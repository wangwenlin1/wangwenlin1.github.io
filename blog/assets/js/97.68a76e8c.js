(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{1153:function(t,s,a){"use strict";a.r(s);var e=a(19),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"基本类型和它们的字面量表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型和它们的字面量表示"}},[t._v("#")]),t._v(" 基本类型和它们的字面量表示")]),t._v(" "),a("p",[t._v("类型（type）可以被看作是值（value）的模板，值可以被看作是类型的实例。 这篇文章将介绍内置（或称为预声明的）基本类型和它们字面量的表示形式。 本篇文章不介绍组合类型。")]),t._v(" "),a("h2",{attrs:{id:"基本内置类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本内置类型"}},[t._v("#")]),t._v(" 基本内置类型")]),t._v(" "),a("p",[t._v("Go支持如下内置基本类型：")]),t._v(" "),a("ul",[a("li",[t._v("一种内置布尔类型："),a("code",[t._v("bool")]),t._v("。")]),t._v(" "),a("li",[t._v("11种内置整数类型："),a("code",[t._v("int8")]),t._v("、"),a("code",[t._v("uint8")]),t._v("、"),a("code",[t._v("int16")]),t._v("、"),a("code",[t._v("uint16")]),t._v("、"),a("code",[t._v("int32")]),t._v("、"),a("code",[t._v("uint32")]),t._v("、"),a("code",[t._v("int64")]),t._v("、"),a("code",[t._v("uint64")]),t._v("、"),a("code",[t._v("int")]),t._v("、"),a("code",[t._v("uint")]),t._v("和"),a("code",[t._v("uintptr")]),t._v("。")]),t._v(" "),a("li",[t._v("两种内置浮点数类型："),a("code",[t._v("float32")]),t._v("和"),a("code",[t._v("float64")]),t._v("。")]),t._v(" "),a("li",[t._v("两种内置复数类型："),a("code",[t._v("complex64")]),t._v("和"),a("code",[t._v("complex128")]),t._v("。")]),t._v(" "),a("li",[t._v("一种内置字符串类型："),a("code",[t._v("string")]),t._v("。")])]),t._v(" "),a("p",[t._v("内置类型也称为预声明类型。")]),t._v(" "),a("p",[t._v("这17种内置基本类型（type）各自属于一种Go中的类型种类（kind）。 尽管所有的内置基本类型的名称都是"),a("a",{attrs:{href:"https://gfw.go101.org/article/keywords-and-identifiers.html#identifier",target:"_blank",rel:"noopener noreferrer"}},[t._v("非导出标识符"),a("OutboundLink")],1),t._v("， 我们可以不用引入任何代码包而直接使用这些类型。")]),t._v(" "),a("p",[t._v("除了 "),a("code",[t._v("bool")]),t._v(" 和 "),a("code",[t._v("string")]),t._v(" 类型，其它的15种内置基本类型都称为数值类型（整型、浮点数型和复数型）。")]),t._v(" "),a("p",[t._v("Go中有两种内置类型别名（type alias）：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("byte")]),t._v("是"),a("code",[t._v("uint8")]),t._v("的内置别名。 我们可以将"),a("code",[t._v("byte")]),t._v("和"),a("code",[t._v("uint8")]),t._v("看作是同一个类型。")]),t._v(" "),a("li",[a("code",[t._v("rune")]),t._v("是"),a("code",[t._v("int32")]),t._v("的内置别名。 我们可以将"),a("code",[t._v("rune")]),t._v("和"),a("code",[t._v("int32")]),t._v("看作是同一个类型。")])]),t._v(" "),a("p",[t._v("以 "),a("code",[t._v("u")]),t._v(" 开头的整数类型称为无符号整数类型。 无符号整数类型的值都是非负的。 一个数值类型名称中的数字表示每个这个类型的值将在内存中占有多少二进制位（以后简称位）。二进制位常称为比特（bit）。 比如，一个 "),a("code",[t._v("uint8")]),t._v(" 的值将占有8位。 我们称 "),a("code",[t._v("uint8")]),t._v(" 类型的值的尺寸是8位。 因此，最大的 "),a("code",[t._v("uint8")]),t._v(" 值是 "),a("code",[t._v("255")]),t._v(" （28-1）， 最大的 "),a("code",[t._v("int8")]),t._v(" 值是 "),a("code",[t._v("127")]),t._v(" （27-1）， 最小的 "),a("code",[t._v("int8")]),t._v(" 值是 "),a("code",[t._v("-128")]),t._v(" （-27）。")]),t._v(" "),a("p",[t._v("任一个类型的所有值的尺寸都是相同的，所以一个值的尺寸也常称为它的类型的尺寸。")]),t._v(" "),a("p",[t._v("更多的时候，我们使用字节（byte）做为值尺寸的度量单位。 一个字节相当于8个比特。所以 "),a("code",[t._v("uint32")]),t._v(" 类型的尺寸为4，即每个 "),a("code",[t._v("uint32")]),t._v(" 值占用4个字节。")]),t._v(" "),a("p",[a("code",[t._v("uintptr")]),t._v(" 、 "),a("code",[t._v("int")]),t._v(" 以及 "),a("code",[t._v("uint")]),t._v(" 类型的值的尺寸依赖于具体编译器实现。 通常地，在64位的架构上， "),a("code",[t._v("int")]),t._v(" 和 "),a("code",[t._v("uint")]),t._v(" 类型的值是64位的；在32位的架构上，它们是32位的。 编译器必须保证 "),a("code",[t._v("uintptr")]),t._v(" 类型的值的尺寸能够存下任意一个内存地址。")]),t._v(" "),a("p",[t._v("一个 "),a("code",[t._v("complex64")]),t._v(" 复数值的实部和虚部都是 "),a("code",[t._v("float32")]),t._v(" 类型的值。 一个 "),a("code",[t._v("complex128")]),t._v(" 复数值的实部和虚部都是 "),a("code",[t._v("float64")]),t._v(" 类型的值。")]),t._v(" "),a("p",[t._v("在内存中，所有的浮点数都使用"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/IEEE_754",target:"_blank",rel:"noopener noreferrer"}},[t._v("IEEE-754格式"),a("OutboundLink")],1),t._v("存储。")]),t._v(" "),a("p",[t._v("一个布尔值表示一个真假。在内存中，一个布尔值只有两种可能的状态。 这两种状态使用两个预声明（或称为内置）的常量（ "),a("code",[t._v("false")]),t._v(" 和 "),a("code",[t._v("true")]),t._v(" ）来表示。 关于常量声明，"),a("a",{attrs:{href:"https://gfw.go101.org/article/constants-and-variables.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("下一篇文章"),a("OutboundLink")],1),t._v("将做详细解释。")]),t._v(" "),a("p",[t._v("从逻辑上说，一个字符串值表示一段文本。 在内存中，一个字符串存储为一个字节（byte）序列。 此字节序列体现了此字符串所表示的文本的UTF-8编码形式。 我们可以从"),a("a",{attrs:{href:"https://gfw.go101.org/article/string.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go中的字符串"),a("OutboundLink")],1),t._v("一文中获取更多关于字符串的知识。")]),t._v(" "),a("p",[t._v("尽管布尔和字符串类型分类各自只有一种内置类型， 我们可以声明定义更多自定义布尔和字符串类型。 所以，Go代码中可以出现很多布尔和字符串类型（数值类型也同样）。 下面是一个类型声明的例子。 在这些例子中， "),a("code",[t._v("type")]),t._v(" 是一个关键字。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一些类型定义声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//status和bool是两个不同的类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Mystring "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Mystring和string是两个不同的类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Id "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Id和uint64是两个不同的类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("real")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// real和float32是两个不同的类型")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一些类型别名声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" boolean "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// boolean和bool表示同一个类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Text和string表示同一个类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" U8 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// U8、uint8和byte表示同一个类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// char、rune和int32表示同一个类型")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"零值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#零值"}},[t._v("#")]),t._v(" 零值")]),t._v(" "),a("p",[t._v("每种类型都有一个零值。一个类型的零值可以看作是此类型的默认值。")]),t._v(" "),a("ul",[a("li",[t._v("一个布尔类型的零值表示真假中的假。")]),t._v(" "),a("li",[t._v("数值类型的零值都是零（但是不同类型的零在内存中占用的空间可能不同）。")]),t._v(" "),a("li",[t._v("一个字符串类型的零值是一个空字符串。")])]),t._v(" "),a("h2",{attrs:{id:"基本类型的字面量表示形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型的字面量表示形式"}},[t._v("#")]),t._v(" 基本类型的字面量表示形式")]),t._v(" "),a("p",[t._v("一个值的字面形式称为一个字面量，它表示此值在代码中文字体现形式（和内存中的表现形式相对应）。一个值可能会有很多种字面量形式。")]),t._v(" "),a("h3",{attrs:{id:"布尔值的字面量形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔值的字面量形式"}},[t._v("#")]),t._v(" 布尔值的字面量形式")]),t._v(" "),a("p",[t._v("Go白皮书没有定义布尔类型值字面量形式。 我们可以将"),a("code",[t._v("false")]),t._v("和"),a("code",[t._v("true")]),t._v("这两个预声明的有名常量当作布尔类型的字面量形式。 但是，我们应该知道，从严格意义上说，它们不属于字面量。有名常量声明将在下一篇文章中介绍和详细解释。")]),t._v(" "),a("p",[t._v("布尔类型的零值可以使用预声明的"),a("code",[t._v("false")]),t._v("来表示。")]),t._v(" "),a("h3",{attrs:{id:"整数类型值的字面量形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整数类型值的字面量形式"}},[t._v("#")]),t._v(" 整数类型值的字面量形式")]),t._v(" "),a("p",[t._v("整数类型值有四种字面量形式：十进制形式（decimal）、八进制形式（octal）、十六进制形式（hex）和二进制形式（binary）。 比如，下面的三个字面量均表示十进制的15：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xF")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 十六进制表示（必须使用0x或者0X开头）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0XF")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("017")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 八进制表示（必须使用0、0o或者0O开头）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("o17\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("O17\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("b1111 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二进制表示（必须使用0b或者0B开头）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("B1111\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 十进制表示（必须不能用0开头）")]),t._v("\n")])])]),a("p",[t._v("（注意：二进制形式和以 "),a("code",[t._v("0o")]),t._v(" 或 "),a("code",[t._v("0O")]),t._v(" 开头的八进制形式从Go 1.13开始才支持。）")]),t._v(" "),a("p",[t._v("下面的程序打印出两个 "),a("code",[t._v("true")]),t._v(" 。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("017")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意这里的 "),a("code",[t._v("==")]),t._v(" 是一个等于比较操作符。 操作符将在后续的文章"),a("a",{attrs:{href:"https://gfw.go101.org/article/operators.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用操作符"),a("OutboundLink")],1),t._v("一文中详细解释。")]),t._v(" "),a("p",[t._v("整数类型的零值的字面量一般使用 "),a("code",[t._v("0")]),t._v(" 表示。 当然， "),a("code",[t._v("00")]),t._v(" 和 "),a("code",[t._v("0x0")]),t._v(" 等也是合法的整数类型零值的字面量形式。")]),t._v(" "),a("h3",{attrs:{id:"浮点数类型值的字面量形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮点数类型值的字面量形式"}},[t._v("#")]),t._v(" 浮点数类型值的字面量形式")]),t._v(" "),a("p",[t._v("一个浮点数的完整字面量形式包含一个十进制整数部分、一个小数点、一个十进制小数部分和一个整数指数部分。 常常地，某些部分可以根据情况省略掉。一些例子（ "),a("code",[t._v("xEn")]),t._v(" 表示 "),a("code",[t._v("x")]),t._v(" 乘以 "),a("code",[t._v("10n")]),t._v(" 的意思，而 "),a("code",[t._v("xE-n")]),t._v(" 表示 "),a("code",[t._v("x")]),t._v(" 除以 "),a("code",[t._v("10n")]),t._v(" 的意思）：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.23")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("01.23")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 1.23")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".23")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个e或者E随后的数值是指数值（底数为10）。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指数值必须为一个可以带符号的十进制整数字面量。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.23e2")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 123.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123E2")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 12300.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123.E+2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 12300.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e-1")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0.1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1e0")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0.1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0010e-2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0.1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0e+5")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0.0")]),t._v("\n")])])]),a("p",[t._v("从Go 1.13开始，Go也支持另一种浮点数字面量形式（权称为十六进制浮点数文字表示）。 在一个十六进制浮点数文字表示中，")]),t._v(" "),a("ul",[a("li",[t._v("和整数的十六进制文字表示一样，浮点数的十六进制文字表示也必须使用"),a("code",[t._v("0x")]),t._v("或者"),a("code",[t._v("0X")]),t._v("开头。")]),t._v(" "),a("li",[t._v("和整数的十六进制文字表示不同的是，字母"),a("code",[t._v("p")]),t._v("或者"),a("code",[t._v("P")]),t._v("可以出现在浮点数的十六进制文字表示中，其后跟随着一个幂指数（底数为2）。")]),t._v(" "),a("li",[t._v("另外要注意，"),a("code",[t._v("e")]),t._v("和"),a("code",[t._v("E")]),t._v("不能出现在浮点数的十六进制文字表示中。")])]),t._v(" "),a("p",[t._v("一些合法的浮点数的十六进制文字表示例子（ "),a("code",[t._v("yPn")]),t._v(" 表示 "),a("code",[t._v("y")]),t._v(" 乘以 "),a("code",[t._v("2n")]),t._v(" 的意思，而 "),a("code",[t._v("yP-n")]),t._v(" 表示 "),a("code",[t._v("y")]),t._v(" 除以 "),a("code",[t._v("2n")]),t._v(" 的意思）：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0.25")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("p10    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 2048.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Fp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 1.9375")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0.5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0X1FFF")]),t._v("P"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0.1249847412109375")]),t._v("\n")])])]),a("p",[t._v("而下面这几个均是不合法的浮点数的十六进制文字表示。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("p1    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 整数部分表示必须包含至少一个数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p指数形式只能出现在浮点数的十六进制文字表示中")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".5e-2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// e和E不能出现在浮点数的十六进制文字表示中")]),t._v("\n")])])]),a("p",[t._v("注意：下面这个表示是合法的，但是它不是浮点数的十六进制文字表示。事实上，它是一个减法算术表达式。其中的 "),a("code",[t._v("e")]),t._v(" 为是十进制中的 "),a("code",[t._v("14")]),t._v(" ， "),a("code",[t._v("0x15e")]),t._v(" 为一个整数十六进制文字表示， "),a("code",[t._v("-2")]),t._v(" 并不是此整数十六进制文字表示的一部分。 (算术运算将在后续的文章"),a("a",{attrs:{href:"https://gfw.go101.org/article/operators.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用操作符"),a("OutboundLink")],1),t._v("一文中详细介绍。)")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x15e")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0x15e - 2 (整数相减表达式)")]),t._v("\n")])])]),a("p",[t._v("浮点类型的零值的标准字面量形式为 "),a("code",[t._v("0.0")]),t._v(" 。 当然其它很多形式也是合法的，比如 "),a("code",[t._v("0.")]),t._v(" 、 "),a("code",[t._v(".0")]),t._v(" 、 "),a("code",[t._v("0e0")]),t._v(" 和 "),a("code",[t._v("0x0p0")]),t._v(" 等。")]),t._v(" "),a("h3",{attrs:{id:"虚部字面量形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚部字面量形式"}},[t._v("#")]),t._v(" 虚部字面量形式")]),t._v(" "),a("p",[t._v("一个虚部值的字面量形式由一个浮点数字面量或者一个整数字面量和其后跟随的一个小写的字母 "),a("code",[t._v("i")]),t._v(" 组成。 在Go 1.13之前，如果虚部中 "),a("code",[t._v("i")]),t._v(" 前的部分为一个整数字面量，则其必须为并且总是被视为十进制形式。 一些例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.23i")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.i")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".23i")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123i")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0123i")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 123i（兼容性使然。见下）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.23E2i")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 123i")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e-1i")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("011i")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 11i（兼容性使然。见下）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("00011i")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 11i（兼容性使然。见下）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面这几行从Go 1.13开始才能编译通过。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("o11i    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 9i")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x11i")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 17i")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("b11i    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 3i")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0i")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0.5i")]),t._v("\n")])])]),a("p",[t._v("注意：在Go 1.13之前，虚部字面量中字母 "),a("code",[t._v("i")]),t._v(" 前的部分只能为浮点数字面量。 为了兼容老的Go版本，从Go 1.13开始，一些虚部字面量中表现为（不以 "),a("code",[t._v("0o")]),t._v(" 和 "),a("code",[t._v("0O")]),t._v(" 开头的）八进制形式的整数字面量仍被视为浮点数字面量。 比如上例中的 "),a("code",[t._v("011i")]),t._v(" 、 "),a("code",[t._v("0123i")]),t._v(" 和 "),a("code",[t._v("00011i")]),t._v(" 。")]),t._v(" "),a("p",[t._v("虚部字面量用来表示复数的虚部。下面是一些复数值的字面量形式：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2i")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 1.0 + 2.0i")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1i")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 1.0 + -0.1i")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.23i")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.89")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == -7.89 + 1.23i")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.23i")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0.0 + 1.23i")]),t._v("\n")])])]),a("p",[t._v("复数零值的标准字面表示为 "),a("code",[t._v("0.0+0.0i")]),t._v(" 。 当然 "),a("code",[t._v("0i")]),t._v(" 、 "),a("code",[t._v(".0i")]),t._v(" 、 "),a("code",[t._v("0+0i")]),t._v(" 等表示也是合法的。")]),t._v(" "),a("h3",{attrs:{id:"数值字面表示中使用下划线分段来增强可读性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值字面表示中使用下划线分段来增强可读性"}},[t._v("#")]),t._v(" 数值字面表示中使用下划线分段来增强可读性")]),t._v(" "),a("p",[t._v("从Go 1.13开始，下划线 "),a("code",[t._v("_")]),t._v(" 可以出现在整数、浮点数和虚部数字面量中，以用做分段符以增强可读性。 但是要注意，在一个数值字面表示中，一个下划线 "),a("code",[t._v("_")]),t._v(" 不能出现在此字面表示的首尾，并且其两侧的字符必须为（相应进制的）数字字符或者进制表示头。")]),t._v(" "),a("p",[t._v("一些合法和不合法使用下划线的例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 合法的使用下划线的例子")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("_9          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 69")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("_33_77_22   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0337722")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("x_Bad_Face  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0xBadFace")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("X_1F_FFP"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// == 0X1FFFP-16")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("b1011_0111 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xA")]),t._v("_B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Fp2i\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 非法的使用下划线的例子")]),t._v("\n_69        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下划线不能出现在首尾")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("69")]),t._v("_        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下划线不能出现在首尾")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("__9       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下划线不能相连")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("_xBadFace "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// x不是一个合法的八进制数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .不是一个合法的十进制数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("_5       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .不是一个合法的十进制数字")]),t._v("\n")])])]),a("h3",{attrs:{id:"rune值的字面量形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rune值的字面量形式"}},[t._v("#")]),t._v(" rune值的字面量形式")]),t._v(" "),a("p",[t._v("上面已经提到， "),a("code",[t._v("rune")]),t._v(" 类型是 "),a("code",[t._v("int32")]),t._v(" 类型的别名。 因此，rune类型（泛指）是特殊的整数类型。 一个rune值可以用上面已经介绍的整数类型的字面量形式表示。 另一方面，很多各种整数类型的值也可以用本小节介绍的rune字面量形式来表示。")]),t._v(" "),a("p",[t._v("在Go中，一个rune值表示一个Unicode码点。 一般说来，我们可以将一个Unicode码点看作是一个Unicode字符。 但是，我们也应该知道，有些Unicode字符由多个Unicode码点组成。 每个英文或中文Unicode字符值含有一个Unicode码点。")]),t._v(" "),a("p",[t._v("一个rune字面量由若干包在一对单引号中的字符组成。 包在单引号中的字符序列表示一个Unicode码点值。 rune字面量形式有几个变种，其中最常用的一种变种是将一个rune值对应的Unicode字符直接包在一对单引号中。比如：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个英文字符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'π'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'众'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个中文字符")]),t._v("\n")])])]),a("p",[t._v("下面这些rune字面量形式的变种和 "),a("code",[t._v("'a'")]),t._v(" 是等价的 （字符 "),a("code",[t._v("a")]),t._v(" 的Unicode值是97）。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\141'")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 141是97的八进制表示")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\x61'")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 61是97的十六进制表示")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\u0061'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\U00000061'")]),t._v("\n")])])]),a("p",[t._v("注意： "),a("code",[t._v("\\")]),t._v(" 之后必须跟随三个八进制数字字符（0-7）表示一个byte值， "),a("code",[t._v("\\x")]),t._v(" 之后必须跟随两个十六进制数字字符（0-9，a-f和A-F）表示一个byte值， "),a("code",[t._v("\\u")]),t._v(" 之后必须跟随四个十六进制数字字符表示一个rune值（此rune值的高四位都为0）， "),a("code",[t._v("\\U")]),t._v(" 之后必须跟随八个十六进制数字字符表示一个rune值。 这些八进制和十六进制的数字字符序列表示的整数必须是一个合法的Unicode码点值，否则编译将失败。")]),t._v(" "),a("p",[t._v("下面这些 "),a("code",[t._v("println")]),t._v(" 函数调用都将打印出 "),a("code",[t._v("true")]),t._v(" 。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("97")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\141'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\x61'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\u0061'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\U00000061'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x61")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\x61'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\u4f17'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'众'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("事实上，在日常编程中，这四种rune字面量形式的变种很少用来表示rune值。 它们多用做字符串的双引号字面量形式中的转义字符（详见下一小节）。")]),t._v(" "),a("p",[t._v("如果一个rune字面量中被单引号包起来的部分含有两个字符， 并且第一个字符是 "),a("code",[t._v("\\")]),t._v(" ，第二个字符不是 "),a("code",[t._v("x")]),t._v(" 、 "),a("code",[t._v("u")]),t._v(" 和 "),a("code",[t._v("U")]),t._v(" ，那么这两个字符将被转义为一个特殊字符。 目前支持的转义组合为：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\\a   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),t._v("值："),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x07")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 铃声字符\n\\b   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),t._v("值："),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x08")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 退格字符（backspace）\n\\f   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),t._v("值："),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0C")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 换页符（form feed）\n\\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),t._v("值："),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 换行符（line feed or newline）\n\\r   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),t._v("值："),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0D")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 回车符（carriage "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("）\n\\t   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),t._v("值："),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x09")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 水平制表符（horizontal tab）\n\\v   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),t._v("值："),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 竖直制表符（vertical tab）\n\\\\   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),t._v("值："),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x5c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 一个反斜杠（backslash）\n\\'   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),t._v("值："),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x27")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 一个单引号（single quote）\n")])])]),a("p",[t._v("其中， "),a("code",[t._v("\\n")]),t._v(" 在日常编程中用得最多。")]),t._v(" "),a("p",[t._v("一个例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\r'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 13")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 39")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\x0A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("rune类型的零值常用 "),a("code",[t._v("'\\000'")]),t._v(" 、 "),a("code",[t._v("'\\x00'")]),t._v(" 或 "),a("code",[t._v("'\\u0000'")]),t._v(" 等来表示。")]),t._v(" "),a("h3",{attrs:{id:"字符串值的字面量形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串值的字面量形式"}},[t._v("#")]),t._v(" 字符串值的字面量形式")]),t._v(" "),a("p",[t._v("在Go中，字符串值是UTF-8编码的， 甚至所有的Go源代码都必须是UTF-8编码的。")]),t._v(" "),a("p",[t._v("Go字符串的字面量形式有两种。 一种是解释型字面表示（interpreted string literal，双引号风格）。 另一种是直白字面表示（raw string literal，反引号风格）。 下面的两个字符串表示形式是等价的：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解释形式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello\\nworld!\\n\\"你好世界\\""')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直白形式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('`Hello\nworld!\n"你好世界"`')]),t._v("\n")])])]),a("p",[t._v("在上面的解释形式（双引号风格）的字符串字面量中，每个 "),a("code",[t._v("\\n")]),t._v(" 将被转义为一个换行符，每个 "),a("code",[t._v('\\"')]),t._v(" 将被转义为一个双引号字符。 双引号风格的字符串字面量中支持的转义字符和rune字面量基本一致，除了一个例外：双引号风格的字符串字面量中支持 "),a("code",[t._v('\\"')]),t._v(" 转义，但不支持 "),a("code",[t._v("\\'")]),t._v(" 转义；而rune字面量则刚好相反。")]),t._v(" "),a("p",[t._v("以 "),a("code",[t._v("\\")]),t._v(" 、 "),a("code",[t._v("\\x")]),t._v(" 、 "),a("code",[t._v("\\u")]),t._v(" 和 "),a("code",[t._v("\\U")]),t._v(" 开头的rune字面量（不包括两个单引号）也可以出现在双引号风格的字符串字面量中。比如：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这几个字符串字面量是等价的。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\141\\142\\143"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\x61\\x62\\x63"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\x61b\\x63"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这几个字符串字面量是等价的。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\u4f17\\xe4\\xba\\xba"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// “众”的Unicode值为4f17，它的UTF-8")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码为三个字节：0xe4 0xbc 0x97。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\xe4\\xbc\\x97\\u4eba"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// “人”的Unicode值为4eba，它的UTF-8")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码为三个字节：0xe4 0xba 0xba。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\xe4\\xbc\\x97\\xe4\\xba\\xba"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"众人"')]),t._v("\n")])])]),a("p",[t._v("在UTF-8编码中，一个Unicode码点（rune）可能由1到4个字节组成。 每个英文字母的UTF-8编码只需要一个字节；每个中文字符的UTF-8编码需要三个字节。")]),t._v(" "),a("p",[t._v("直白反引号风格的字面表示中是不支持转义字符的。 除了首尾两个反引号，直白反引号风格的字面表示中不能包含反引号。 为了跨平台兼容性，直白反引号风格的字面表示中的回车符（Unicode码点为 "),a("code",[t._v("0x0D")]),t._v(" ） 将被忽略掉。")]),t._v(" "),a("p",[t._v("字符串类型的零值在代码里用 "),a("code",[t._v('""')]),t._v(" 或````表示。")]),t._v(" "),a("h2",{attrs:{id:"基本数值类型字面量的适用范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数值类型字面量的适用范围"}},[t._v("#")]),t._v(" 基本数值类型字面量的适用范围")]),t._v(" "),a("p",[t._v("一个数值型的字面量只有在不需要舍入时，才能用来表示一个整数基本类型的值。 比如， "),a("code",[t._v("1.0")]),t._v(" 可以表示任何基本整数类型的值，但 "),a("code",[t._v("1.01")]),t._v(" 却不可以。 当一个数值型的字面量用来表示一个非整数基本类型的值时，舍入（或者精度丢失）是允许的。")]),t._v(" "),a("p",[t._v("每种数值类型有一个能够表示的数值范围。 如果一个字面量超出了一个类型能够表示的数值范围（溢出），则在编译时刻，此字面量不能用来表示此类型的值。")]),t._v(" "),a("p",[t._v("下表是一些例子：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("字面表示")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("此字面表示可以表示哪些类型的值（在编译时刻）")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("256")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("除了int8和uint8类型外的所有的基本数值类型。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("255")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("除了int8类型外的所有的基本数值类型。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("-123")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("除了无符号整数类型外的所有的基本数值类型。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("123")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("所有的基本数值类型。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("123.000")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("1.23e2")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("'a'")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("1.0+0i")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("1.23")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("所有浮点数和复数基本数值类型。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("0x10000000000000000")]),t._v(" (16 zeros)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("3.5e38")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("除了float32和complex64类型外的所有浮点数和复数基本数值类型。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("1+2i")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("所有复数基本数值类型。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("2e+308")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无。")])])])]),t._v(" "),a("p",[t._v("注意几个溢出的例子：")]),t._v(" "),a("ul",[a("li",[t._v("字面量"),a("code",[t._v("0x10000000000000000")]),t._v("需要65个比特才能表示，所以在运行时刻，任何基本整数类型都不能精确表示此字面量。")]),t._v(" "),a("li",[t._v("在IEEE-754标准中，最大的可以精确表示的float32类型数值为"),a("code",[t._v("3.40282346638528859811704183484516925440e+38")]),t._v("，所以"),a("code",[t._v("3.5e38")]),t._v("不能表示任何float32和complex64类型的值。")]),t._v(" "),a("li",[t._v("在IEEE-754标准中，最大的可以精确表示的float64类型数值为"),a("code",[t._v("1.797693134862315708145274237317043567981e+308")]),t._v("，因此"),a("code",[t._v("2e+308")]),t._v("不能表示任何基本数值类型的值。")]),t._v(" "),a("li",[t._v("尽管"),a("code",[t._v("0x10000000000000000")]),t._v("可以用来表示float32类型的值，但是它不能被任何float32类型的值所精确表示。上面已经提到了，当使用字面量来表示非整数基本数值类型的时候，精度丢失是允许的（但溢出是不允许的）。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);