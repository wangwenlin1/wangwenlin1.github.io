(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{1210:function(v,_,t){"use strict";t.r(_);var a=t(19),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"面向对象的设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的设计模式"}},[v._v("#")]),v._v(" 面向对象的设计模式")]),v._v(" "),a("p",[v._v("最经典的设计模式就是由Erich Gamma等人提出的23种GoF设计模式，这些已成为设计领域的“圣经”。")]),v._v(" "),a("h2",{attrs:{id:"本章目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本章目标"}},[v._v("#")]),v._v(" 本章目标")]),v._v(" "),a("p",[v._v("结合应用场景去阐述如何应用设计模式解决问题，重点在于对设计模式的应用。")]),v._v(" "),a("p",[a("strong",[v._v("主要内容")])]),v._v(" "),a("ul",[a("li",[a("p",[v._v("理解模式和设计模式的基本概念及作用。")])]),v._v(" "),a("li",[a("p",[v._v("了解典型GoF模式的应用场景和方法。")])]),v._v(" "),a("li",[a("p",[v._v("了解职责分配模式的概念和应用方法。")])])]),v._v(" "),a("h2",{attrs:{id:"模式与设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式与设计模式"}},[v._v("#")]),v._v(" 模式与设计模式")]),v._v(" "),a("h3",{attrs:{id:"模式基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式基础"}},[v._v("#")]),v._v(" 模式基础")]),v._v(" "),a("p",[v._v("每一个模式应至少包括3个方面的要素")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("背景")])]),v._v(" "),a("li",[a("code",[v._v("问题")])]),v._v(" "),a("li",[a("code",[v._v("解决方案")])])]),v._v(" "),a("h2",{attrs:{id:"模式的形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模式的形式"}},[v._v("#")]),v._v(" 模式的形式")]),v._v(" "),a("p",[v._v("为了能够有效地表示模式，一般均需要采用特定的形式进行描述。围绕模式的3个基本要素，可以从以下方面来展开描述一个模式。")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("名称")]),v._v("：模式的标识或句柄。为了便于模式的传播和使用，每个模式都会有一个直观而响亮的名称，这个名称将作为模式的唯一标识被广泛应用。")]),v._v(" "),a("li",[a("code",[v._v("问题")]),v._v("：陈述问题，用于描述模式的意图与目标。每个模式都是为了解决某个或某类问题而提出的。")]),v._v(" "),a("li",[a("code",[v._v("背景")]),v._v("：描述模式中的问题及其解决方案可重现的前提，决定了模式的可应用性。模式不是万能的，它只能在特定的背景下解决相应的问题。")]),v._v(" "),a("li",[a("code",[v._v("影响力")]),v._v("：描述相关的影响因素与约束，以及它们与设计目标之间的交互和冲突。它揭示了问题的复杂性，并定义了不同设计结果的折中方案。")]),v._v(" "),a("li",[a("code",[v._v("解决方案")]),v._v("：描述了解决问题的静态结构与动态交互。这是模式的主体内容，一般包括静态和动态两个方面，通过特定的形式来描述问题是被如何解决的。此外，还可以描述注意事项及模式的变形和特化等特殊情况的应对方案。")]),v._v(" "),a("li",[a("code",[v._v("例子")]),v._v("：通过一些简单的示例来说明如何应用该模式。")]),v._v(" "),a("li",[a("code",[v._v("结果")]),v._v("：运用模式后得到的系统状态或配置。")]),v._v(" "),a("li",[a("code",[v._v("基本原理")]),v._v("：模式实现过程中所遵循或采用的基本理论和方法。")]),v._v(" "),a("li",[a("code",[v._v("相关模式")]),v._v("：与该模式相关的其他模式，以供使用者参考。")]),v._v(" "),a("li",[a("code",[v._v("已知应用")]),v._v("：该模式的一些成功应用案例，以便使用者能够充分理解模式的作用和应用场景。")])]),v._v(" "),a("h3",{attrs:{id:"设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[v._v("#")]),v._v(" 设计模式")]),v._v(" "),a("p",[v._v("设计模式是在构件设计阶段，通过定义类或特定对象之间的结构和行为，从而解决某类设计问题的通用解决方案。")]),v._v(" "),a("p",[v._v("好处：")]),v._v(" "),a("ul",[a("li",[v._v("可以有效地利用前人的经验来设计系统，而不用进行“重复劳动”。在提高设计质量的同时，通过复用可以进一步加快开发效率。")]),v._v(" "),a("li",[v._v("作为一种“设计语言”，便于设计者之间相互交流而不产生误解。")]),v._v(" "),a("li",[v._v("是培养优秀设计师的一条捷径。")])]),v._v(" "),a("center",[v._v("设计模式相关概念对比")]),v._v(" "),a("p",[a("img",{attrs:{src:t(560),alt:""}})]),v._v(" "),a("h2",{attrs:{id:"gof模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gof模式"}},[v._v("#")]),v._v(" GoF模式")]),v._v(" "),a("p",[a("img",{attrs:{src:t(561),alt:""}}),a("br"),v._v(" "),a("img",{attrs:{src:t(562),alt:""}}),a("br"),v._v(" "),a("img",{attrs:{src:t(563),alt:""}}),a("br"),v._v(" "),a("img",{attrs:{src:t(564),alt:""}}),a("br"),v._v(" "),a("img",{attrs:{src:t(565),alt:""}}),a("br"),v._v(" "),a("img",{attrs:{src:t(566),alt:""}}),a("br"),v._v(" "),a("img",{attrs:{src:t(567),alt:""}}),a("br"),v._v(" "),a("img",{attrs:{src:t(568),alt:""}}),a("br"),v._v(" "),a("img",{attrs:{src:t(569),alt:""}})]),v._v(" "),a("h3",{attrs:{id:"应用gof模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用gof模式"}},[v._v("#")]),v._v(" 应用GoF模式")]),v._v(" "),a("h4",{attrs:{id:"lego系统中的状态模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lego系统中的状态模式"}},[v._v("#")]),v._v(" Lego系统中的状态模式")]),v._v(" "),a("center",[v._v("应用状态模式后的设计方案")]),v._v(" "),a("p",[a("img",{attrs:{src:t(570),alt:""}})]),v._v(" "),a("h4",{attrs:{id:"汉堡店系统中的装饰模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#汉堡店系统中的装饰模式"}},[v._v("#")]),v._v(" 汉堡店系统中的装饰模式")]),v._v(" "),a("center",[v._v("Susan的汉堡店（原始版）")]),v._v(" "),a("p",[a("img",{attrs:{src:t(571),alt:""}})]),v._v(" "),a("center",[v._v("Susan的汉堡店（奶酪版）")]),v._v(" "),a("p",[a("img",{attrs:{src:t(572),alt:""}})]),v._v(" "),a("center",[v._v("Susan的汉堡店（奶酪洋葱版）")]),v._v(" "),a("p",[a("img",{attrs:{src:t(573),alt:""}})]),v._v(" "),a("center",[v._v("Susan的汉堡店（奶酪洋葱西红柿版）")]),v._v(" "),a("p",[a("img",{attrs:{src:t(574),alt:""}})]),v._v(" "),a("center",[v._v("运用装饰模式重构Susan的汉堡店")]),v._v(" "),a("p",[a("img",{attrs:{src:t(575),alt:""}})]),v._v(" "),a("h4",{attrs:{id:"培养模式思维"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#培养模式思维"}},[v._v("#")]),v._v(" 培养模式思维")]),v._v(" "),a("ol",[a("li",[a("code",[v._v("设计模式的意图")])])]),v._v(" "),a("p",[v._v("设计模式最根本的意图就是适应需求变更。在软件开发中，变更是会频繁发生的，而这其中，需求变更是最常见、影响最大的一种。因为需求是整个软件系统的基础，软件系统就是为了满足需求而存在的。当需求发生变化时，后续的分析、设计、实现都会受到影响。为此，一个好的系统应该是能够快速应对需求变更，并能保持稳定的。而设计模式就是为了让软件更加适应变更，有更多的可扩展性，从而保证发生需求变更时不需要重新设计。")]),v._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[v._v("设计模式的实现思路")])])]),v._v(" "),a("p",[v._v("应对变更的直接手段就是封装变更，从而使变更的影响降到最小。其基本实现思路就是封装复杂性，并对外提供简单接口，通过多态包容的特性扩展新功能来应对变更。"),a("br"),v._v("\n多态包容是指宿主对象中包含抽象基类（或接口）的引用，而实际行为委托给该引用所指向的实际对象，从而使这些行为可以根据该引用所指向的实际对象不同而不同。具体的实现思路包括以下几个方面。")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("增加间接层")])])]),v._v(" "),a("p",[v._v("初始的设计方案都是为了满足需求而提出的，大多直接来自分析阶段的具体类。而且为了便于对象之间的交互，这些具体类之间往往存在着很强的耦合，难以有效地应对需求的变更，也难以复用。优化设计的出发点就是对这些具体类解耦，通过增加一个间接层（大多为抽象层），将两个具体类之间的关系转换为具体类和抽象层之间的关系，使依赖止于抽象，从而设计出满足设计原则的高质量方案。"),a("br"),v._v("\n增加间接层是模式思维最原始的出发点。观察GoF模式所提供的类图，可以发现绝大多数设计模式都是按照这种思想，通过新增的间接层来达到最大程度的复用。")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("针对接口编程，而不针对实现编程")])])]),v._v(" "),a("p",[v._v("高质量设计的关键就在于抽象。事实上，DIP就是针对接口编程思想的体现，其依赖止于抽象的思想，要求设计方案中应尽量引用抽象类或接口，从而实现针对接口的编程。")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("优先使用聚合，而不是继承")])])]),v._v(" "),a("p",[v._v("面向对象的初学者经常热衷于继承所提供的强大的代码复用能力。然而，事实上通过聚合其他对象也可以实现复用，而聚合在某些方面比继承更有优势。")]),v._v(" "),a("h4",{attrs:{id:"学习和使用设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#学习和使用设计模式"}},[v._v("#")]),v._v(" 学习和使用设计模式")]),v._v(" "),a("h4",{attrs:{id:"运用模式设计可复用构件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运用模式设计可复用构件"}},[v._v("#")]),v._v(" 运用模式设计可复用构件")]),v._v(" "),a("center",[v._v("打电话的通信图")]),v._v(" "),a("p",[a("img",{attrs:{src:t(576),alt:""}})]),v._v(" "),a("center",[v._v("打电话的初始类图")]),v._v(" "),a("p",[a("img",{attrs:{src:t(577),alt:""}})]),v._v(" "),a("h3",{attrs:{id:"职责分配模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#职责分配模式"}},[v._v("#")]),v._v(" 职责分配模式")]),v._v(" "),a("p",[v._v("考虑到职责分配在面向对象设计中的重要性和难度，有经验的面向对象设计者也总结了一些成功地用于职责分配的原则和模式，用于指导职责分配过程。")]),v._v(" "),a("h4",{attrs:{id:"通用职责分配软件模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用职责分配软件模式"}},[v._v("#")]),v._v(" 通用职责分配软件模式")]),v._v(" "),a("p",[a("img",{attrs:{src:t(578),alt:""}})]),v._v(" "),a("p",[v._v("创建者模式用于指导分配与创建对象相关的职责，其基本目的是找到一个在任何情况下都与被创建者对象相关联的创建者，以支持低耦合。这些情况包括整体聚合了部分、容器包含了对象、记录器记录了被记录的数据，通过在类图中所定义的这些关系来选择创建者。")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("信息专家模式是职责分配中使用最广泛的模式，它表达了一种“直觉”，对象处理自己拥有的相关信息的事务；或者说对象所能处理的职责依赖于其所拥有的数据（即拥有该数据的对象为该职责的专家）。如在用例分析期间，实体类为控制类提供相应的数据职责就是遵循该模式。该模式的一些别名更能体现其含义，如“根据数据分配职责”“了解所需信息的实体完成相应的行为”“DIY（Do It Yourself）”“根据涉及的属性提供服务”。")])]),v._v(" "),a("li",[a("p",[v._v("低耦合、高内聚是两个设计中讨论最广泛的概念（从结构化设计到面向对象的设计都涉及该问题）。而此处的耦合主要是指类之间的关系的强弱程度，内聚则表示单个类内部职责之间的相关程度。低耦合不代表类之间没有耦合(8)，而是尽量降低耦合度。类之间存在依赖、关联、聚合、组合、泛化等各种不同的关系，在尽可能采用较低耦合度关系的基础上达到系统要求。高内聚则意味着单个类内部职责高度相关，因此，从形式上说，高内聚的类应该只包含较少的操作，操作的关联度很高，其任务也比较单一；这其实和SRP的要求是一致的。")])]),v._v(" "),a("li",[a("p",[v._v("控制器模式则要求把协调处理系统消息的职责分配给不同的控制类来处理。事实上，分析阶段所引入的控制类就是此模式的体现。")])]),v._v(" "),a("li",[a("p",[v._v("多态模式主要用于处理某个职责在不同的派生类中所表现出的不同的行为，将职责分配给由同一接口派生出来的不同具体类，这与设计模式的多态包容思维是一致的。")])]),v._v(" "),a("li",[a("p",[v._v("纯虚构模式是将一组高度内聚的职责抽象为一个虚构的类，从而可以构造出高内聚、易复用的类。然而，由于虚构模式通常是通过功能划分不同的类，这与面向对象的数据和操作的封装思想并不一致，而且容易陷入结构化的功能分解的误区，因此在使用时要谨慎。")])]),v._v(" "),a("li",[a("p",[v._v("中介模式是把职责分配给一个虚构的中介类，由该中介类来协调多个类之间的职责，从而隔离耦合度过大的多个类，达到低耦合。该模式与设计模式中增加间接层的思维方式是一致的。")])]),v._v(" "),a("li",[a("p",[v._v("受保护变化模式的基本思想是将易变的部分封装起来，并对外提供一个稳定的接口，从而构建稳定系统。该模式是对封装、信息隐藏等面向对象原则的另一种表示，第6.3节所阐述的OCP也是从另一个角度来描述这种思想的。")])])]),v._v(" "),a("h4",{attrs:{id:"迪米特准则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迪米特准则"}},[v._v("#")]),v._v(" 迪米特准则")]),v._v(" "),a("p",[v._v("迪米特准则（Law of Demeter）是面向对象设计中另一个非常实用的职责分配模式。Craig Larman将它作为PV模式的一个特例，提供了一种获得受限结构变化的机制，它给出了在一个方法内应该向哪些对象发送消息的限制。")]),v._v(" "),a("p",[v._v("该准则给出了在一个方法内应该向哪些对象发送消息的限制，规定在一个方法中，消息只能发往以下对象。")]),v._v(" "),a("ul",[a("li",[v._v("对象本身。")]),v._v(" "),a("li",[v._v("该方法的一个参数。")]),v._v(" "),a("li",[v._v("对象本身的属性。")]),v._v(" "),a("li",[v._v("对象本身的一个属性集合中的元素。")]),v._v(" "),a("li",[v._v("该方法内部创建的对象。")])]),v._v(" "),a("h2",{attrs:{id:"其他问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他问题"}},[v._v("#")]),v._v(" 其他问题")]),v._v(" "),a("h3",{attrs:{id:"设计模式与编程语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式与编程语言"}},[v._v("#")]),v._v(" 设计模式与编程语言")]),v._v(" "),a("p",[v._v("设计模式是用于设计阶段的，其本身并不依赖于编程语言，它构成了一种比编程语言更抽象的设计语言，可以使设计者彼此交流设计思想。因此，从理论上来说，可以采用任何一种编程语言来实现设计模式。")]),v._v(" "),a("h3",{attrs:{id:"设计模式与重构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式与重构"}},[v._v("#")]),v._v(" 设计模式与重构")]),v._v(" "),a("p",[v._v("随着极限编程等一些敏捷方法的兴起，重构（Refactoring）的概念正日益被大家所接受并被广泛应用。所谓重构，是这样一个过程：在不改变代码外在行为的前提下，对代码做出修改，以改进程序的内部结构，从而提高程序质量；换句话说，就是在代码写好后改进它的设计。重构的基本理念就是在软件设计早期，如果没有看出抽象的必要，可以先实现一个简单的系统。当第一次被需求触发而显现出抽象的必要时，机会就来了，此时再运用设计原则或模式，提取抽象接口，重构原来的设计方案，从而获得高质量的设计。"),a("br"),v._v("\n重构的兴起使得设计模式闪现出新的光辉，它不仅在设计期间适用，而且在实现阶段也适用。在实现阶段，设计模式为重构提供了目标，当程序员的代码面临质量问题时，可以按照可适用的设计模式重构代码。")]),v._v(" "),a("h2",{attrs:{id:"练习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[v._v("#")]),v._v(" 练习")]),v._v(" "),a("h3",{attrs:{id:"选择题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择题"}},[v._v("#")]),v._v(" 选择题")]),v._v(" "),a("p",[v._v("1．面向对象的设计原则与设计模式最本质的区别是（　B　）。")]),v._v(" "),a("ul",[a("li",[v._v("A．设计原则用于构架设计，而设计模式用于构件设计")]),v._v(" "),a("li",[v._v("B．设计原则是基本指导思想，而设计模式则是具体技术的应用")]),v._v(" "),a("li",[v._v("C．设计原则与编程语言无关，而设计模式依赖于特定的编程语言")]),v._v(" "),a("li",[v._v("D．设计原则适用于所有的面向对象系统，而设计模式只适用于特定的应用系统")])]),v._v(" "),a("p",[v._v("2．下列有关设计原则和设计模式的论述中，错误的是（　A　）。")]),v._v(" "),a("ul",[a("li",[v._v("A．设计原则是构造高质量设计的出发点")]),v._v(" "),a("li",[v._v("B．设计模式是遵循设计原则的手段之一")]),v._v(" "),a("li",[v._v("C．设计原则来自于设计模式的具体应用")]),v._v(" "),a("li",[v._v("D．设计模式的核心思想是多态包容")])]),v._v(" "),a("p",[v._v("3．设计模式是设计中通用问题的解决方案；GoF的23种设计模式为我们的设计提供了许多优秀的解决方案。在某一系统的设计过程中发现这样一个问题：已有的两个设计类需要互相通信，但接口不一致，此时我们应该考虑使用（　C　）来解决。")]),v._v(" "),a("ul",[a("li",[v._v("A．状态（State）模式")]),v._v(" "),a("li",[v._v("B．装饰（Decorator）模式")]),v._v(" "),a("li",[v._v("C．适配器（Adapter）模式")]),v._v(" "),a("li",[v._v("D．命令（Command）模式")])]),v._v(" "),a("p",[v._v("4．迪米特（Demeter）准则用于指导详细设计阶段类的职责分配，根据该准则，在一个对象的方法中，其消息不应该发往（　D　）。")]),v._v(" "),a("ul",[a("li",[v._v("A．对象本身")]),v._v(" "),a("li",[v._v("B．该方法的参数")]),v._v(" "),a("li",[v._v("C．该方法内创建的对象")]),v._v(" "),a("li",[v._v("D．直接依赖于该对象的对象")])]),v._v(" "),a("h3",{attrs:{id:"简答题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简答题"}},[v._v("#")]),v._v(" 简答题")]),v._v(" "),a("p",[v._v("1．什么是模式？什么是设计模式？它们之间有什么区别和联系？")]),v._v(" "),a("blockquote",[a("p",[v._v("模式是对以往成功应用经验的总结与复用，是对某个问题的通用解决方案，并可以重复使用该方案"),a("br"),v._v("\n设计模式是在构件设计阶段，通过定义类或特定对象之间的结构和行为，从而解决某个类设计问题的通用解决方案"),a("br"),v._v("\n模式的含义更广，可用于各类背景和领域；设计模式是模式的一种，是针对面对对象设计的微结构模式")])]),v._v(" "),a("p",[v._v("2．面向对象的设计原则和设计模式之间有什么区别和联系？")]),v._v(" "),a("blockquote",[a("p",[v._v("设计原则是面向对象设计的指导思想，设计模式只是遵循这一思想的手段之一")])]),v._v(" "),a("p",[v._v("3．什么是GoF模式？有哪些典型的GoF模式？")]),v._v(" "),a("blockquote",[a("p",[v._v("GoF 模式是指由 Erich Gamma 等四人在《设计模式—可复用面向对象软件的基础》一书中提出的 23 种设计模式。"),a("br"),v._v("\nGoF 设计模式按照范围分为类模式和对象模式，按照目的分为创建型模式、结构型模式和行为型模式。典型的 GoF 模式有工厂方法、抽象工厂、单例、适配器、组合、命令、状态、策略等模式")])]),v._v(" "),a("p",[v._v("4．模式思维主要包括哪些方面的内容？在实践中如何有效地使用设计模式？")]),v._v(" "),a("blockquote",[a("p",[v._v("设计模式的根本意图是适应需求变更，而应对变更的直接手段就是封装变更，从而使变更的影响降到最小。其基本实现思路就是封装复杂性，并对外提供简单接口。通过多态包容的特性扩展新功能来应对变更"),a("br"),v._v("\n多态包容是指宿主对象中包括抽象基类（或接口）的引用，而实际行为委托给该引用所指向的实际对象，从而是这些行为可以根据该引用所指向的实际对象不同而不同。具体的实现思路包括三个方面：")]),v._v(" "),a("ol",[a("li",[v._v("增加间接层")]),v._v(" "),a("li",[v._v("针对接口编程，而不是针对实现编程")]),v._v(" "),a("li",[v._v("优先使用聚合，而不是继承"),a("br"),v._v("\n使用设计模式并不是简单的背诵和抄袭的过程。每个设计模式都有其应用背景（意图）和解决方案，只有在需要的场合选择合适的模式才能有效地发挥模式的作用，过度的滥用设计模式也会陷入过度设计，从而带来不必要的复杂性。初学者首先需要逐个学习设计模式的意图、适用性、解决方案等内容，并对其基本的使用有一定的了解，之后在实践中逐步地应用，通过应用来领悟设计模式的主旨和内涵，发现隐藏在设计模式背后模式思维和原则")])])]),v._v(" "),a("p",[v._v("5．什么是通用职责分配模式？有哪些典型的通用职责分配模式？")]),v._v(" "),a("blockquote",[a("p",[v._v("职责分配模式是指用于处理面向对象设计中进行类的职责分配的原则和模式，他们结合类职责分配期间所面临的问题，给出了具体分配原则；从而可以有效的指导用例设计期间类的职责分配过程，典型的类职责分配模式包括：创建者、信息专家、低耦合、控制器、高内聚、多态、纯虚构、中介、和受保护变化等。")])]),v._v(" "),a("p",[v._v("6．什么是迪米特准则？在什么情况下使用该准则？")]),v._v(" "),a("blockquote",[a("p",[v._v("迪米特准则是面向对象设计的另一个非常实用的职责分配模式。它给出了在一个方法内应该向哪些对象发送消息的限制。"),a("br"),v._v("\n该准则给出了在一个方法内应该向哪些对象发送消息的限制，规定在一个方法中，消息只能发往下面的对象；对象本身；该方法的一个参数；对象本身的属性；对象本身的一个属性集合中的元素；该方法内部创建的对象")])])],1)}),[],!1,null,null,null);_.default=s.exports},560:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-16-12-53.689c53de.png"},561:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-16-45-18.8b7dbfdd.png"},562:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-16-45-45.a28812b9.png"},563:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-16-46-15.30c5e87f.png"},564:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-16-46-56.0a260ade.png"},565:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-16-47-29.bd29826b.png"},566:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-16-47-50.a995ecdb.png"},567:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-16-48-07.bfb43380.png"},568:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-16-48-24.17188af8.png"},569:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-16-48-37.4fecc5ec.png"},570:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-18-14-37.f7746cbd.png"},571:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-18-16-39.da23bc9d.png"},572:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-18-18-24.927ea289.png"},573:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-18-25-08.1768e4ac.png"},574:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-18-26-04.51d319b6.png"},575:function(v,_,t){v.exports=t.p+"assets/img/2021-03-25-18-28-26.9ccce33f.png"},576:function(v,_,t){v.exports=t.p+"assets/img/2021-03-26-09-40-23.82b5554c.png"},577:function(v,_,t){v.exports=t.p+"assets/img/2021-03-26-09-43-39.571bbb33.png"},578:function(v,_,t){v.exports=t.p+"assets/img/2021-03-26-12-10-07.49285aef.png"}}]);