(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{1141:function(t,a,s){"use strict";s.r(a);var n=s(19),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"指针"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指针"}},[t._v("#")]),t._v(" 指针")]),t._v(" "),n("p",[t._v("虽然Go吸收融合了很多其语言中的各种特性，但是Go主要被归入C语言家族。其中一个重要的原因就是Go和C一样，也支持指针。 当然Go中的指针相比C指针有很多限制。本篇文章将介绍指针相关的各种概念和Go指针相关的各种细节。")]),t._v(" "),n("h2",{attrs:{id:"内存地址"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存地址"}},[t._v("#")]),t._v(" 内存地址")]),t._v(" "),n("p",[t._v("一个内存地址表示操作系统管理的整个内存中的一个偏移量（相对于从整个内存的起始，以字节计数）。")]),t._v(" "),n("p",[t._v("通常地，一个内存地址用一个操作系统原生字（native word）来存储。 一个原生字在32位操作系统上占4个字节，在64位操作系统上占8个字节。 所以，32位操作系统上的理论最大支持内存容量为4GB（1GB == 230字节），64位操作系统上的理论最大支持内存容量为264Byte，即16EB（EB：艾字节，1EB == 1024PB, 1PB == 1024TB, 1TB == 1024GB）。")]),t._v(" "),n("p",[t._v("内存地址的字面形式常用整数的十六进制字面量来表示，比如 "),n("code",[t._v("0x1234CDEF")]),t._v(" 。")]),t._v(" "),n("p",[t._v("以后我们常简称内存地址为地址。")]),t._v(" "),n("h2",{attrs:{id:"值的地址"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#值的地址"}},[t._v("#")]),t._v(" 值的地址")]),t._v(" "),n("p",[t._v("一个值的地址是指此值的直接部分占据的内存的起始地址。在Go中，每个值都包含一个直接部分，但有些值可能还包含一个或多个间接部分，"),n("a",{attrs:{href:"https://gfw.go101.org/article/type-system-overview.html#value-part",target:"_blank",rel:"noopener noreferrer"}},[t._v("下下篇"),n("OutboundLink")],1),t._v("文章将对此详述。")]),t._v(" "),n("h2",{attrs:{id:"什么是指针"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是指针"}},[t._v("#")]),t._v(" 什么是指针？")]),t._v(" "),n("p",[t._v("指针是Go中的一种类型分类（kind）。一个指针是某个指针类型的一个值。一个指针可以存储一个内存地址。 事实上，我们经常称一个指针为一个内存地址，或者称一个内存地址为一个指针。")]),t._v(" "),n("p",[t._v("通常地，一个指针中存储的内存地址为另外一个值的地址。和C指针不一样，为了安全起见，Go指针有很多限制，详见下面的章节。")]),t._v(" "),n("h2",{attrs:{id:"指针类型和值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指针类型和值"}},[t._v("#")]),t._v(" 指针类型和值")]),t._v(" "),n("p",[t._v("在Go中，一个非定义指针类型的字面形式为 "),n("code",[t._v("*T")]),t._v(" ，其中 "),n("code",[t._v("T")]),t._v(" 为一个任意类型。类型 "),n("code",[t._v("T")]),t._v(" 称为指针类型 "),n("code",[t._v("*T")]),t._v(" 的基类型（base type）。 如果一个指针类型的基类型为 "),n("code",[t._v("T")]),t._v(" ，则我们可以称此指针类型为一个 "),n("code",[t._v("T")]),t._v(" 指针类型。")]),t._v(" "),n("p",[t._v("虽然我们可以声明定义指针类型，但是一般不推荐这么做。非定义指针类型的可读性更高。")]),t._v(" "),n("p",[t._v("如果一个指针类型的"),n("a",{attrs:{href:"https://gfw.go101.org/article/type-system-overview.html#underlying-type",target:"_blank",rel:"noopener noreferrer"}},[t._v("底层类型"),n("OutboundLink")],1),t._v("是 "),n("code",[t._v("*T")]),t._v(" ，则它的基类型为 "),n("code",[t._v("T")]),t._v(" 。")]),t._v(" "),n("p",[t._v("如果两个非定义指针类型的基类型为同一类型，则这两个非定义指针类型亦为同一类型。")]),t._v(" "),n("p",[t._v("一些指针类型的例子：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个基类型为int的非定义指针类型。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个多级非定义指针类型，它的基类型为*int。")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Ptr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ptr是一个定义的指针类型，它的基类型为int。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" PP "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Ptr  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// PP是一个定义的多级指针类型，它的基类型为Ptr。")]),t._v("\n")])])]),n("p",[t._v("指针类型的零值的字面量使用预声明的 "),n("code",[t._v("nil")]),t._v(" 来表示。一个nil指针（常称为空指针）中不存储任何地址。")]),t._v(" "),n("p",[t._v("如果一个指针类型的基类型为 "),n("code",[t._v("T")]),t._v(" ，则此指针类型的值只能存储类型为 "),n("code",[t._v("T")]),t._v(" 的值的地址。")]),t._v(" "),n("h2",{attrs:{id:"关于引用-reference-这个术语"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于引用-reference-这个术语"}},[t._v("#")]),t._v(" 关于引用（reference）这个术语")]),t._v(" "),n("p",[t._v("在《Go语言101》中，术语“引用”暗示着一个关系。比如，如果一个指针中存储着另外一个值的地址，则我们可以说此指针值引用着另外一个值；同时另外一个值当前至少有一个引用。 本书对此术语的使用和Go白皮书是一致的。")]),t._v(" "),n("p",[t._v("当一个指针引用着另外一个值，我们也常说此指针指向另外一个值。")]),t._v(" "),n("h2",{attrs:{id:"如何获取一个指针值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何获取一个指针值"}},[t._v("#")]),t._v(" 如何获取一个指针值？")]),t._v(" "),n("p",[t._v("有两种方式来得到一个指针值：")]),t._v(" "),n("ol",[n("li",[t._v("我们可以用内置函数"),n("code",[t._v("new")]),t._v("来为任何类型的值开辟一块内存并将此内存块的起始地址做为此值的地址返回。 假设"),n("code",[t._v("T")]),t._v("是任一类型，则函数调用"),n("code",[t._v("new(T)")]),t._v("返回一个类型为"),n("code",[t._v("*T")]),t._v("的指针值。 存储在返回指针值所表示的地址处的值（可被看作是一个匿名变量）为"),n("code",[t._v("T")]),t._v("的零值。")]),t._v(" "),n("li",[t._v("我们也可以使用前置取地址操作符"),n("code",[t._v("&")]),t._v("来获取一个可寻址的值的地址。 对于一个类型为"),n("code",[t._v("T")]),t._v("的可寻址的值"),n("code",[t._v("t")]),t._v("，我们可以用"),n("code",[t._v("&t")]),t._v("来取得它的地址。"),n("code",[t._v("&t")]),t._v("的类型为"),n("code",[t._v("*T")]),t._v("。")])]),t._v(" "),n("p",[t._v("一般说来，一个可寻址的值是指被放置在内存中某固定位置处的一个值（但放置在某固定位置处的一个值并非一定是可寻址的）。 目前，我们只需知道所有变量都是可以寻址的；但是所有常量、函数返回值和强制转换结果都是不可寻址的。 当一个变量被声明的时候，Go运行时将为此变量开辟一段内存。此内存的起始地址即为此变量的地址。")]),t._v(" "),n("p",[t._v("更多可被（或不可被）寻址的值将在以后的文章中逐渐提及。 如果你已经对Go比较熟悉，你可以阅读"),n("a",{attrs:{href:"https://gfw.go101.org/article/summaries.html#not-addressable",target:"_blank",rel:"noopener noreferrer"}},[t._v("此条总结"),n("OutboundLink")],1),t._v("来了解在Go中哪些值可以或不可以被寻址。")]),t._v(" "),n("p",[t._v("下一节中的例子将展示如何获取一些值的地址。")]),t._v(" "),n("h2",{attrs:{id:"指针-地址-解引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指针-地址-解引用"}},[t._v("#")]),t._v(" 指针（地址）解引用")]),t._v(" "),n("p",[t._v("我们可以使用前置解引用操作符 "),n("code",[t._v("*")]),t._v(" 来访问存储在一个指针所表示的地址处的值（即此指针所引用着的值）。 比如，对于基类型为 "),n("code",[t._v("T")]),t._v(" 的指针类型的一个指针值 "),n("code",[t._v("p")]),t._v(" ，我们可以用 "),n("code",[t._v("*p")]),t._v(" 来表示地址 "),n("code",[t._v("p")]),t._v(" 处的值。 此值的类型为 "),n("code",[t._v("T")]),t._v(" 。 "),n("code",[t._v("*p")]),t._v(" 称为指针 "),n("code",[t._v("p")]),t._v(" 的解引用。解引用是取地址的逆过程。")]),t._v(" "),n("p",[t._v("解引用一个nil指针将产生一个"),n("a",{attrs:{href:"https://gfw.go101.org/article/control-flows-more.html#panic-recover",target:"_blank",rel:"noopener noreferrer"}},[t._v("恐慌"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("p",[t._v("下面这个例子展示了如何取地址和解引用。")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tp0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p0指向一个int类型的零值")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// （打印出一个十六进制形式的地址）")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\n\tx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p0              "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// x是p0所引用的值的一个复制。")]),t._v("\n\tp1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("x      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p1和p2中都存储着x的地址。")]),t._v("\n\t                      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// x、*p1和*p2表示着同一个int值。")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" p2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\tp3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p0            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <=> p3 := &(*p0)")]),t._v("\n\t                      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <=> p3 := p0")]),t._v("\n\t                      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p3和p0中存储的地址是一样的。")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" p3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("789")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 789 789 123")]),t._v("\n\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%T, %T \\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// int, int")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%T, %T \\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// *int, *int")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("下面这张图描绘了上面这个例子中各个值之间的关系。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(365),alt:"指针值"}})]),t._v(" "),n("h2",{attrs:{id:"我们为什么需要指针"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#我们为什么需要指针"}},[t._v("#")]),t._v(" 我们为什么需要指针？")]),t._v(" "),n("p",[t._v("让我们先看一个例子：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("double")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" x\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("double")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("我们本期望上例中的 "),n("code",[t._v("double")]),t._v(" 函数将变量 "),n("code",[t._v("a")]),t._v(" 的值放大为原来的两倍，但是事实证明我们的期望没有得到实现。 为什么呢？因为在Go中，所有的赋值（包括函数调用传参）过程都是一个值复制过程。 所以在上面的 "),n("code",[t._v("double")]),t._v(" 函数体内修改的是变量 "),n("code",[t._v("a")]),t._v(" 的一个副本，而没有修改变量 "),n("code",[t._v("a")]),t._v(" 本身。")]),t._v(" "),n("p",[t._v("当然我们可以让 "),n("code",[t._v("double")]),t._v(" 函数返回输入参数的两倍数，但是此方法并非适用于所有场合。 下面这个例子通过将输入参数的类型改为一个指针类型来达到同样的目的。")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("double")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("x\n\tx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此行仅为讲解目的")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("double")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6")]),t._v("\n\tp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("double")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12 false")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("从上例可以看出，通过将 "),n("code",[t._v("double")]),t._v(" 函数的输入参数的类型改为 "),n("code",[t._v("*int")]),t._v(" ，传入的实参 "),n("code",[t._v("&a")]),t._v(" 和它在此函数体内的一个副本 "),n("code",[t._v("x")]),t._v(" 都引用着变量 "),n("code",[t._v("a")]),t._v(" 。 所以对 "),n("code",[t._v("*x")]),t._v(" 的修改等价于对 "),n("code",[t._v("*p")]),t._v(" （也就是变量 "),n("code",[t._v("a")]),t._v(" ）的修改。 换句话说，新版本的 "),n("code",[t._v("double")]),t._v(" 函数内的操作可以反映到此函数外了。")]),t._v(" "),n("p",[t._v("当然，在此函数体内对传入的指针实参的修改 "),n("code",[t._v("x = nil")]),t._v(" 依旧不能反映到函数外，因为此修改发生在此指针的一个副本上。 所以在 "),n("code",[t._v("double")]),t._v(" 函数调用之后，局部变量 "),n("code",[t._v("p")]),t._v(" 的值并没有被修改为 "),n("code",[t._v("nil")]),t._v(" 。")]),t._v(" "),n("p",[t._v("简而言之，指针提供了一种间接的途径来访问和修改一些值。 虽然很多语言中没有指针这个概念，但是指针被隐藏其它概念之中。")]),t._v(" "),n("h2",{attrs:{id:"在go中返回一个局部变量的地址是安全的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在go中返回一个局部变量的地址是安全的"}},[t._v("#")]),t._v(" 在Go中返回一个局部变量的地址是安全的")]),t._v(" "),n("p",[t._v("和C不一样，Go是支持垃圾回收的，所以一个函数返回其内声明的局部变量的地址是绝对安全的。比如：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("newInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"go指针的一些限制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#go指针的一些限制"}},[t._v("#")]),t._v(" Go指针的一些限制")]),t._v(" "),n("p",[t._v("为了安全起见，Go指针在使用上相对于C指针有很多限制。 通过施加这些限制，Go指针保留了C指针的好处，同时也避免了C指针的危险性。")]),t._v(" "),n("h3",{attrs:{id:"go指针不支持算术运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#go指针不支持算术运算"}},[t._v("#")]),t._v(" Go指针不支持算术运算")]),t._v(" "),n("p",[t._v("在Go中，指针是不能参与算术运算的。比如，对于一个指针 "),n("code",[t._v("p")]),t._v(" ， 运算 "),n("code",[t._v("p++")]),t._v(" 和 "),n("code",[t._v("p-2")]),t._v(" 都是非法的。")]),t._v(" "),n("p",[t._v("如果 "),n("code",[t._v("p")]),t._v(" 为一个指向一个数值类型值的指针， "),n("code",[t._v("*p++")]),t._v(" 将被编译器认为是合法的并且等价于 "),n("code",[t._v("(*p)++")]),t._v(" 。 换句话说，解引用操作符 "),n("code",[t._v("*")]),t._v(" 的优先级都高于自增 "),n("code",[t._v("++")]),t._v(" 和自减 "),n("code",[t._v("--")]),t._v(" 操作符。")]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("int64")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面这两行编译不通过。")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n\tp++\n\tp = (&a) + 8\n\t*/")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6 6")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n\tfmt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10 10")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"一个指针类型的值不能被随意转换为另一个指针类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一个指针类型的值不能被随意转换为另一个指针类型"}},[t._v("#")]),t._v(" 一个指针类型的值不能被随意转换为另一个指针类型")]),t._v(" "),n("p",[t._v("在Go中，只有如下某个条件被满足的情况下，一个类型为 "),n("code",[t._v("T1")]),t._v(" 的指针值才能被显式转换为另一个指针类型 "),n("code",[t._v("T2")]),t._v(" ：")]),t._v(" "),n("ol",[n("li",[t._v("类型"),n("code",[t._v("T1")]),t._v("和"),n("code",[t._v("T2")]),t._v("的底层类型必须一致（忽略结构体字段的标签）。 特别地，如果类型"),n("code",[t._v("T1")]),t._v("和"),n("code",[t._v("T2")]),t._v("中只要有一个是"),n("a",{attrs:{href:"https://gfw.go101.org/article/type-system-overview.html#non-defined-type",target:"_blank",rel:"noopener noreferrer"}},[t._v("非定义类型"),n("OutboundLink")],1),t._v("并且它们的底层类型一致（考虑结构体字段的标签），则此转换可以是隐式的。 关于结构体，请参阅"),n("a",{attrs:{href:"https://gfw.go101.org/article/struct.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("下一篇文章"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("li",[t._v("类型"),n("code",[t._v("T1")]),t._v("和"),n("code",[t._v("T2")]),t._v("都为非定义类型并且它们的基类型的底层类型一致（忽略结构体字段的标签）。")])]),t._v(" "),n("p",[t._v("比如，")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" MyInt "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Ta    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Tb    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("MyInt\n")])])]),n("p",[t._v("对于上面所示的这些指针类型，下面的事实成立：")]),t._v(" "),n("ol",[n("li",[t._v("类型"),n("code",[t._v("*int64")]),t._v("的值可以被隐式转换到类型"),n("code",[t._v("Ta")]),t._v("，反之亦然（因为它们的底层类型均为"),n("code",[t._v("*int64")]),t._v("）。")]),t._v(" "),n("li",[t._v("类型 "),n("code",[t._v("*MyInt")]),t._v("的值可以被隐式转换到类型"),n("code",[t._v("Tb")]),t._v("，反之亦然（因为它们的底层类型均为"),n("code",[t._v("*MyInt")]),t._v("）。")]),t._v(" "),n("li",[t._v("类型"),n("code",[t._v("*MyInt")]),t._v("的值可以被显式转换为类型"),n("code",[t._v("*int64")]),t._v("，反之亦然（因为它们都是非定义的并且它们的基类型的底层类型均为"),n("code",[t._v("int64")]),t._v("）。")]),t._v(" "),n("li",[t._v("类型"),n("code",[t._v("Ta")]),t._v("的值不能直接被转换为类型"),n("code",[t._v("Tb")]),t._v("，即使是显式转换也是不行的。 但是，通过上述三条事实，通过三层显式转换"),n("code",[t._v("Tb((*MyInt)((*int64)(ta)))")]),t._v("，一个类型为"),n("code",[t._v("Ta")]),t._v("的值"),n("code",[t._v("ta")]),t._v("可以被间接地转换为类型"),n("code",[t._v("Tb")]),t._v("。")])]),t._v(" "),n("p",[t._v("这些指针类型的任何值都无法被转换到类型 "),n("code",[t._v("*uint64")]),t._v(" 。")]),t._v(" "),n("h3",{attrs:{id:"一个指针值不能和其它任一指针类型的值进行比较"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一个指针值不能和其它任一指针类型的值进行比较"}},[t._v("#")]),t._v(" 一个指针值不能和其它任一指针类型的值进行比较")]),t._v(" "),n("p",[t._v("Go指针值是支持（使用比较运算符 "),n("code",[t._v("==")]),t._v(" 和 "),n("code",[t._v("!=")]),t._v(" ）比较的。 但是，两个指针只有在下列任一条件被满足的时候才可以比较：")]),t._v(" "),n("ol",[n("li",[t._v("这两个指针的类型相同。")]),t._v(" "),n("li",[t._v("其中一个指针可以被隐式转换为另一个指针的类型。换句话说，这两个指针的类型的底层类型必须一致并且其中一个指针类型为非定义的（考虑结构体字段的标签）。")]),t._v(" "),n("li",[t._v("其中一个并且只有一个指针用类型不确定的"),n("code",[t._v("nil")]),t._v("标识符表示。")])]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" MyInt "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Ta    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Tb    "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("MyInt\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4个不同类型的指针：")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pa0 Ta\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pa1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pb0 Tb\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pb1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("MyInt\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面这6行编译没问题。它们的比较结果都为true。")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pa0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" pa1\n\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pb0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" pb1\n\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pa0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pa1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pb0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pb1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面这三行编译不通过。")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n\t_ = pa0 == pb0\n\t_ = pa1 == pb1\n\t_ = pa0 == Tb(nil)\n\t*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"一个指针值不能被赋值给其它任意类型的指针值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一个指针值不能被赋值给其它任意类型的指针值"}},[t._v("#")]),t._v(" 一个指针值不能被赋值给其它任意类型的指针值")]),t._v(" "),n("p",[t._v("一个指针值可以被赋值给另一个指针值的条件和这两个指针值可以比较的条件（见上一小节）是一致的。")]),t._v(" "),n("h2",{attrs:{id:"上述go指针的限制是可以被打破的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#上述go指针的限制是可以被打破的"}},[t._v("#")]),t._v(" 上述Go指针的限制是可以被打破的")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://gfw.go101.org/article/unsafe.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("unsafe")]),t._v(" 标准库包"),n("OutboundLink")],1),t._v("中提供的非类型安全指针（ "),n("code",[t._v("unsafe. Pointer")]),t._v(" ）机制可以被用来打破上述Go指针的安全限制。 "),n("code",[t._v("unsafe. Pointer")]),t._v(" 类型类似于C语言中的 "),n("code",[t._v("void*")]),t._v(" 。 但是，通常地，非类型安全指针机制不推荐在Go日常编程中使用。")])])}),[],!1,null,null,null);a.default=e.exports},365:function(t,a,s){t.exports=s.p+"assets/img/pointer.1da184fc.png"}}]);