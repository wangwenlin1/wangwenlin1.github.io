(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{1162:function(t,s,a){"use strict";a.r(s);var n=a(19),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"go问答"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go问答"}},[t._v("#")]),t._v(" Go问答")]),t._v(" "),a("h2",{attrs:{id:"编译器错误信息-non-name-on-left-side-of-意味着什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器错误信息-non-name-on-left-side-of-意味着什么"}},[t._v("#")]),t._v(" 编译器错误信息 "),a("code",[t._v("non-name *** on left side of :=")]),t._v(" 意味着什么?")]),t._v(" "),a("p",[t._v("直到目前（Go 1.16）, Go中对短变量声明有一个"),a("a",{attrs:{href:"https://golang.google.cn/ref/spec#Short_variable_declarations",target:"_blank",rel:"noopener noreferrer"}},[t._v("强制性约束"),a("OutboundLink")],1),t._v("：")]),t._v(" "),a("p",[t._v("所有位于 "),a("code",[t._v(":=")]),t._v(" 符号左侧的条目都必须是纯"),a("a",{attrs:{href:"https://golang.google.cn/ref/spec#Identifiers",target:"_blank",rel:"noopener noreferrer"}},[t._v("标识符"),a("OutboundLink")],1),t._v("，并且其中至少有一个为新变量名称。")]),t._v(" "),a("p",[t._v("这意味着容器元素索引表达式（ "),a("code",[t._v("x[i]")]),t._v(" ）、结构体的字段选择器（ "),a("code",[t._v("x.f")]),t._v(" ）、指针解引用（ "),a("code",[t._v("*p")]),t._v(" ）和限定标识符（ "),a("code",[t._v("aPackage. Value")]),t._v(" ）都不能出现在 "),a("code",[t._v(":=")]),t._v(" 符号的左侧。")]),t._v(" "),a("p",[t._v("目前，这还是一个"),a("a",{attrs:{href:"https://github.com/golang/go/issues/377",target:"_blank",rel:"noopener noreferrer"}},[t._v("未解决问题"),a("OutboundLink")],1),t._v("（已经和"),a("a",{attrs:{href:"https://github.com/golang/go/issues/6842",target:"_blank",rel:"noopener noreferrer"}},[t._v("一个相关问题"),a("OutboundLink")],1),t._v("合并）。而且感觉Go核心开发团队目前"),a("a",{attrs:{href:"https://github.com/golang/go/issues/30318",target:"_blank",rel:"noopener noreferrer"}},[t._v("并未有立即解决此问题的打算"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"编译器错误信息-unexpected-newline-expecting-意味着什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器错误信息-unexpected-newline-expecting-意味着什么"}},[t._v("#")]),t._v(" 编译器错误信息 "),a("code",[t._v("unexpected newline, expecting { ...")]),t._v(" 意味着什么?")]),t._v(" "),a("p",[t._v("在编写Go代码时，我们不能随意断行。 请阅读"),a("a",{attrs:{href:"https://gfw.go101.org/article/line-break-rules.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码断行规则"),a("OutboundLink")],1),t._v("一文以了解Go代码断行规则。 一般来说，根据这些规则，在左括号之前断行是不合法的。")]),t._v(" "),a("p",[t._v("例如，下列代码片段")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("将会被编译器解释成")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Go编译器将为每个左大括号 "),a("code",[t._v("{")]),t._v(" 起始的代码行报告一个语法错误。 为避免这些报错，我们需要将上述代码重写为下面这样：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"编译器错误信息-declared-and-not-used-意味着什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器错误信息-declared-and-not-used-意味着什么"}},[t._v("#")]),t._v(" 编译器错误信息 "),a("code",[t._v("declared and not used")]),t._v(" 意味着什么?")]),t._v(" "),a("p",[t._v("对于标准编译器，在局部代码块中声明的每一个变量必须被至少一次用做r-value（right-hand-side value，右值）。")]),t._v(" "),a("p",[t._v("因此，下列代码将编译失败，因为 "),a("code",[t._v("y")]),t._v(" 只被用做目标值（目标值都为左值）。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// y被声明了但没有被用做右值")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ty "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里，y被用做左值")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"go运行时是否维护映射条目的遍历顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go运行时是否维护映射条目的遍历顺序"}},[t._v("#")]),t._v(" Go运行时是否维护映射条目的遍历顺序？")]),t._v(" "),a("p",[t._v("不。"),a("a",{attrs:{href:"https://golang.google.cn/ref/spec#For_range",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go白皮书"),a("OutboundLink")],1),t._v("明确提到映射元素的迭代顺序时未定义的。 所以对于同一个映射值，它的一个遍历过程和下一个遍历过程中的元素呈现次序不保证是相同的。 对于标准编译器，映射元素的遍历顺序是随机的。 如果你需要固定的映射元素遍历顺序，那么你就需要自己来维护这个顺序。 更多信息请阅读Go官方博客文章"),a("a",{attrs:{href:"https://blog.golang.com/go-maps-in-action#TOC_7.",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go maps in action"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("但是请注意：从Go 1.12开始，标准库包中的各个打印函数的结果中，映射条目总是排了序的。")]),t._v(" "),a("h2",{attrs:{id:"go编译器是否会进行字节填充以确保结构体字段的地址对齐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go编译器是否会进行字节填充以确保结构体字段的地址对齐"}},[t._v("#")]),t._v(" Go编译器是否会进行字节填充以确保结构体字段的地址对齐？")]),t._v(" "),a("p",[t._v("至少对于标准的Go编译器和gccgo，答案是肯定的。 具体需要填充多少个字节取决于操作系统和编译器实现。 请阅读"),a("a",{attrs:{href:"https://gfw.go101.org/article/memory-layout.html#size-and-padding",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于Go值的内存布局"),a("OutboundLink")],1),t._v("一文获取详情。")]),t._v(" "),a("p",[t._v("Go编译器将不会重新排列结构体的字段来最小化结构体值的尺寸。 因为这样做会导致意想不到的结果。 但是，根据需要，程序员可以手工重新排序字段来实现填充最小化。")]),t._v(" "),a("h2",{attrs:{id:"为什么一个结构体类型的最后一个字段类型的尺寸为零时会影响此结构体的尺寸"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么一个结构体类型的最后一个字段类型的尺寸为零时会影响此结构体的尺寸"}},[t._v("#")]),t._v(" 为什么一个结构体类型的最后一个字段类型的尺寸为零时会影响此结构体的尺寸？")]),t._v(" "),a("p",[t._v("一个可寻址的结构值的所有字段都可以被取地址。 如果非零尺寸的结构体值的最后一个字段的尺寸是零，那么取此最后一个字段的地址将会返回一个越出了为此结构体值分配的内存块的地址。 这个返回的地址可能指向另一个被分配的内存块。 在目前的官方Go标准运行时的实现中，如果一个内存块被至少一个依然活跃的指针引用，那么这个内存块将不会被视作垃圾因而肯定不会被回收。 所以只要有一个活跃的指针存储着此非零尺寸的结构体值的最后一个字段的越界地址，它将阻止垃圾收集器回收另一个内存块，从而可能导致内存泄漏。")]),t._v(" "),a("p",[t._v("为避免上述问题，标准的Go编译器会确保取一个非零尺寸的结构体值的最后一个字段的地址时，绝对不会返回越出分配给此结构体值的内存块的地址。 Go标准编译器通过在需要时在结构体最后的零尺寸字段之后填充一些字节来实现这一点。")]),t._v(" "),a("p",[t._v("如果一个结构体的全部字段的类型都是零尺寸的(因此整个结构体也是零尺寸的)，那么就不需要再填充字节，因为标准编译器会专门处理零尺寸的内存块。")]),t._v(" "),a("p",[t._v("一个例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsafe"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" T1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ta "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\tx "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" T2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tx "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n\t\ta "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 16")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"new-t-是-var-t-t-t-的语法糖吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-t-是-var-t-t-t-的语法糖吗"}},[t._v("#")]),t._v(" "),a("code",[t._v("new(T)")]),t._v(" 是 "),a("code",[t._v("var t T; (&t)")]),t._v(" 的语法糖吗？")]),t._v(" "),a("p",[t._v("虽然这两者在实现上会有一些微妙的差别，取决于编译器的具体实现，但是我们基本上可以认为这两者是等价的。 即，通过 "),a("code",[t._v("new")]),t._v(" 函数分配的内存块可以在栈上，也可以在堆上。")]),t._v(" "),a("h2",{attrs:{id:"运行时错误信息-all-goroutines-are-asleep-deadlock-意味着什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行时错误信息-all-goroutines-are-asleep-deadlock-意味着什么"}},[t._v("#")]),t._v(" 运行时错误信息 "),a("code",[t._v("all goroutines are asleep - deadlock")]),t._v(" 意味着什么?")]),t._v(" "),a("p",[t._v("用词**"),a("em",[t._v("asleep*"),a("strong",[t._v("在这里其实并不准确，实际上它的意思是")]),a("em",[t._v("处于阻塞状态*")])]),t._v("。")]),t._v(" "),a("p",[t._v("因为一个处于阻塞状态的协程只能被另一个协程解除阻塞，如果程序中所有的协程都进入了阻塞状态，则它们将永远都处于阻塞状态。 这意味着程序死锁了。一个正常运行的程序永远不应该死锁，一个死锁的程序肯定是由于逻辑实现上的bug造成的。 因此官方Go标准运行时将在一个程序死锁时令其崩溃退出。")]),t._v(" "),a("h2",{attrs:{id:"_64位整数值的地址是否能保证总是64位对齐的-以便可以被安全地原子访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_64位整数值的地址是否能保证总是64位对齐的-以便可以被安全地原子访问"}},[t._v("#")]),t._v(" 64位整数值的地址是否能保证总是64位对齐的，以便可以被安全地原子访问？")]),t._v(" "),a("p",[t._v("传递给 "),a("code",[t._v("sync/atomic")]),t._v(" 标准库包中的64位函数的地址必须是64位对齐的，否则调用这些函数将在运行时导致恐慌产生。")]),t._v(" "),a("p",[t._v("对于标准编译器和gccgo编译器，在64位架构下，64位整数的地址将保证总是64位对齐的。 所以它们总是可以被安全地原子访问。 但在32位架构下，64位整数的地址仅保证是32位对齐的。 所以原子访问某些64位整数可能会导致恐慌。 但是，有一些方法可以保证一些64位整数总是可以被安全地原子访问。 请阅读"),a("a",{attrs:{href:"https://gfw.go101.org/article/memory-layout.html#64bit-atomic-operation",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于Go值的内存布局"),a("OutboundLink")],1),t._v("一文以获得详情。")]),t._v(" "),a("h2",{attrs:{id:"赋值是原子操作吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值是原子操作吗"}},[t._v("#")]),t._v(" 赋值是原子操作吗？")]),t._v(" "),a("p",[t._v("对于标准编译器来说，赋值不是原子操作。")]),t._v(" "),a("p",[t._v("请阅读"),a("a",{attrs:{href:"https://golang.google.cn/doc/faq#What_operations_are_atomic_What_about_mutexes",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方FAQ中的此问答"),a("OutboundLink")],1),t._v("以了解更多。")]),t._v(" "),a("h2",{attrs:{id:"是否每一个零值在内存中占据的字节都是零"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否每一个零值在内存中占据的字节都是零"}},[t._v("#")]),t._v(" 是否每一个零值在内存中占据的字节都是零？")]),t._v(" "),a("p",[t._v("对于大部分类型，答案是肯定的。不过事实上，这依赖于编译器。 例如，对于标准编译器，对于某些字符串类型的零值，此结论并不十分正确。")]),t._v(" "),a("p",[t._v("比如:")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsafe"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4869856")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("反过来，对于标准编译器已经支持的所有架构，如果一个值的所有字节都是零，那么这个值肯定是它的类型的零值。 然而，Go规范并没有保证这一点。我曾听说在某些比较老的处理器上，空指针表示的内存地址并不为零。")]),t._v(" "),a("h2",{attrs:{id:"标准的go编译器是否支持函数内联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准的go编译器是否支持函数内联"}},[t._v("#")]),t._v(" 标准的Go编译器是否支持函数内联？")]),t._v(" "),a("p",[t._v("是的，标准编译器支持函数内联。编译器会自动内联一些满足某些条件的短小函数。这些内联条件可能会在不同编译器版本之间发生变化。")]),t._v(" "),a("p",[t._v("目前（Go 1.16），对于标准编译器，")]),t._v(" "),a("ul",[a("li",[t._v("没有显式的方式来在用户代码中指定哪些函数应该被内联。")]),t._v(" "),a("li",[t._v("尽管编译参数"),a("code",[t._v('-gcflags "-l"')]),t._v("可以阻止任何函数被内联， 但是并没有一个正式的方式来避免某个特定的用户函数被内联。 目前我们可以在函数声明前增加一行"),a("code",[t._v("//go:noinline")]),t._v(" 指令来避免这个函数被内联。 但是此方式不保证永久有效。")])]),t._v(" "),a("h2",{attrs:{id:"终结器-finalizer-可以用做对象的析构函数吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#终结器-finalizer-可以用做对象的析构函数吗"}},[t._v("#")]),t._v(" 终结器（finalizer）可以用做对象的析构函数吗？")]),t._v(" "),a("p",[t._v("在Go程序里，我们可以通过调用 "),a("code",[t._v("runtime. SetFinalizer")]),t._v(" 函数来给一个对象设置一个终结器函数。 一般说来，此终结器函数将在此对象被垃圾回收之前调用。 但是终结器并非被设计为对象的析构函数。 通过 "),a("code",[t._v("runtime. SetFinalizer")]),t._v(" 函数设置的终结器函数并不保证总会被运行。 因此我们不应该依赖于终结器来保证程序的正确性。")]),t._v(" "),a("p",[t._v("终结器的主要用途是为了库包的维护者能够尽可能地避免因为库包使用者不正确地使用库包而带来的危害。 例如，我们知道，当在程序中使用完某个文件后，我们应该将其关闭。 但是有时候因为种种原因，比如经验不足或者粗心大意，导致一些文件在使用完成后并未被关闭，那么和这些文件相关的很多资源只有在此程序退出之后才能得到释放。这属于资源泄漏。 为了尽可能地避免防止资源泄露， "),a("code",[t._v("os")]),t._v(" 库包的维护者将会在一个 "),a("code",[t._v("os. File")]),t._v(" 对象被被创建的时候为之设置一个终结器。 此终结器函数将关闭此 "),a("code",[t._v("os. File")]),t._v(" 对象。当此 "),a("code",[t._v("os. File")]),t._v(" 对象因为不再被使用而被垃圾回收的时候，此终结器函数将被调用。")]),t._v(" "),a("p",[t._v("请记住，有一些终结器函数永远不会被调用，并且有时候不当的设置终结器函数将会阻止对象被垃圾回收。 关于更多细节，请阅读"),a("a",{attrs:{href:"https://golang.google.cn/pkg/runtime/#SetFinalizer",target:"_blank",rel:"noopener noreferrer"}},[t._v("runtime. SetFinalizer函数的文档"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"如何使用尽可能短的代码行数来获取任意月份的天数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用尽可能短的代码行数来获取任意月份的天数"}},[t._v("#")]),t._v(" 如何使用尽可能短的代码行数来获取任意月份的天数？")]),t._v(" "),a("p",[t._v("假设输入的年份是一个自然年，并且输入的月份也是一个自然月（1代表1月）。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("days "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("year"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" month"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UTC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Day")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("对于Go中的 "),a("code",[t._v("time")]),t._v(" 标准库包，正常月份的去值范围为 "),a("code",[t._v("[1, 12]")]),t._v(" ，并且每个月的起始日是 "),a("code",[t._v("1")]),t._v(" 。 所以， "),a("code",[t._v("y")]),t._v(" 年的 "),a("code",[t._v("m")]),t._v(" 月的起始时间就是 "),a("code",[t._v("time. Date(y, m, 1, 0, 0, 0, 0, time. UTC)")]),t._v(" 。")]),t._v(" "),a("p",[t._v("传递给 "),a("code",[t._v("time. Date")]),t._v(" 函数的实参可以超出它们的正常范围，此函数将这些实参进行规范化。 例如，1月32日会被转换成2月1日。")]),t._v(" "),a("p",[t._v("以下是一些Go语言里的日期使用示例：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"time"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2017-02-01 00:00:00 +0000 UTC")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2017")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UTC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2017-01-31 23:59:59.999999999 +0000 UTC")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2017")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UTC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2017-01-31 00:00:00 +0000 UTC")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2017")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UTC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2016-12-31 00:00:00 +0000 UTC")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2016")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UTC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2017-02-01 00:00:00 +0000 UTC")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2016")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UTC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"函数调用-time-sleep-d-和通道接收-time-after-d-操作之间有何区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数调用-time-sleep-d-和通道接收-time-after-d-操作之间有何区别"}},[t._v("#")]),t._v(" 函数调用 "),a("code",[t._v("time. Sleep(d)")]),t._v(" 和通道接收 "),a("code",[t._v("<-time. After(d)")]),t._v(" 操作之间有何区别？")]),t._v(" "),a("p",[t._v("两者都会将当前的goroutine执行暂停一段时间。 区别在于 "),a("code",[t._v("time. Sleep(d)")]),t._v(" 函数调用将使当前的协程进入睡眠字状态，但是当前协程的"),a("a",{attrs:{href:"https://gfw.go101.org/article/control-flows-more.html#states-of-goroutine",target:"_blank",rel:"noopener noreferrer"}},[t._v("（主）状态"),a("OutboundLink")],1),t._v("依然为运行状态； 而通道接收 "),a("code",[t._v("<-time. After(d)")]),t._v(" 操作将使当前协程进入阻塞状态。")]),t._v(" "),a("h2",{attrs:{id:"调用-strings-和-bytes-标准库包里-trimleft-和-trimright-函数经常会返回不符预期的结果-这些函数的实现存在bugs吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用-strings-和-bytes-标准库包里-trimleft-和-trimright-函数经常会返回不符预期的结果-这些函数的实现存在bugs吗"}},[t._v("#")]),t._v(" 调用 "),a("code",[t._v("strings")]),t._v(" 和 "),a("code",[t._v("bytes")]),t._v(" 标准库包里 "),a("code",[t._v("TrimLeft")]),t._v(" 和 "),a("code",[t._v("TrimRight")]),t._v(" 函数经常会返回不符预期的结果，这些函数的实现存在bugs吗？")]),t._v(" "),a("p",[t._v("哈，我们不能保证这些函数的实现绝对没有bug，但是如果这些函数返回的结果是不符你的预期，更有可能的是你的期望是不正确的。")]),t._v(" "),a("p",[t._v("标准包 "),a("code",[t._v("strings")]),t._v(" 和 "),a("code",[t._v("bytes")]),t._v(" 里有多个修剪（trim）函数。 这些函数可以被分类为两组：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Trim")]),t._v("、"),a("code",[t._v("TrimLeft")]),t._v("、"),a("code",[t._v("TrimRight")]),t._v("、"),a("code",[t._v("TrimSpace")]),t._v("、"),a("code",[t._v("TrimFunc")]),t._v("、"),a("code",[t._v("TrimLeftFunc")]),t._v("和"),a("code",[t._v("TrimRightFunc")]),t._v("。 这些函数将修剪首尾所有满足指定（或隐含）条件的utf-8编码的Unicode码点(即rune)。（"),a("code",[t._v("TrimSpace")]),t._v("隐含了修剪各种空格符。） 这些函数将检查每个开头或结尾的rune值，直到遇到一个不满足条件的rune值为止。")]),t._v(" "),a("li",[a("code",[t._v("TrimPrefix")]),t._v("和"),a("code",[t._v("TrimSuffix")]),t._v("。 这两个函数会把指定前缀或后缀的子字符串（或子切片）作为一个整体进行修剪。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/golang/go/issues/19172",target:"_blank",rel:"noopener noreferrer"}},[t._v("部分"),a("OutboundLink")],1),a("a",{attrs:{href:"https://github.com/golang/go/issues/18160",target:"_blank",rel:"noopener noreferrer"}},[t._v("程序员"),a("OutboundLink")],1),a("a",{attrs:{href:"https://github.com/golang/go/issues/14657",target:"_blank",rel:"noopener noreferrer"}},[t._v("会"),a("OutboundLink")],1),t._v("把 "),a("code",[t._v("TrimLeft")]),t._v(" 和 "),a("code",[t._v("TrimRight")]),t._v(" 函数当作 "),a("code",[t._v("TrimPrefix")]),t._v(" 和 "),a("code",[t._v("TrimSuffix")]),t._v(" 函数而"),a("a",{attrs:{href:"https://github.com/golang/go/issues/19371",target:"_blank",rel:"noopener noreferrer"}},[t._v("误用"),a("OutboundLink")],1),t._v("。 自然地，函数返回的结果很可能不是预期的那样。")]),t._v(" "),a("p",[t._v("例如:")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"strings"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abaay森z众xbbab"')]),t._v("\n\to "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Println\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("o")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TrimPrefix")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// aay森z众xbbab")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("o")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TrimSuffix")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// abaay森z众xbb")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("o")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TrimLeft")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// y森z众xbbab")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("o")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TrimRight")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// abaay森z众x")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("o")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Trim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ab"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// y森z众x")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("o")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TrimFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// trim all ascii chars")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 森z众")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"函数-fmt-print-和-fmt-println-的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数-fmt-print-和-fmt-println-的区别是什么"}},[t._v("#")]),t._v(" 函数 "),a("code",[t._v("fmt. Print")]),t._v(" 和 "),a("code",[t._v("fmt. Println")]),t._v(" 的区别是什么？")]),t._v(" "),a("p",[a("code",[t._v("fmt. Println")]),t._v(" 函数总会在两个相邻的参数之间输出一个空格，然而 "),a("code",[t._v("fmt. Print")]),t._v(" 函数仅当两个相邻的参数（的具体值）都不是字符串类型时才会在它们之间输出一个空格。")]),t._v(" "),a("p",[t._v("另外一个区别是 "),a("code",[t._v("fmt. Println")]),t._v(" 函数会在结尾写入一个换行符，但是 "),a("code",[t._v("fmt. Print")]),t._v(" 函数不会。")]),t._v(" "),a("h2",{attrs:{id:"函数-log-print-和函数-log-println-有什么区别吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数-log-print-和函数-log-println-有什么区别吗"}},[t._v("#")]),t._v(" 函数 "),a("code",[t._v("log. Print")]),t._v(" 和函数 "),a("code",[t._v("log.Println")]),t._v(" 有什么区别吗?")]),t._v(" "),a("p",[t._v("函数 "),a("code",[t._v("log. Print")]),t._v(" 与 "),a("code",[t._v("log. Println")]),t._v(" 的区别与上一个问题里描述的关于函数 "),a("code",[t._v("fmt. Print")]),t._v(" 和 "),a("code",[t._v("fmt. Println")]),t._v(" 的第一个区别点类似。")]),t._v(" "),a("p",[t._v("这两个函数都会在结尾输出一个换行符。")]),t._v(" "),a("h2",{attrs:{id:"函数-fmt-print-、-fmt-println-和-fmt-printf-的实现进行同步了吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数-fmt-print-、-fmt-println-和-fmt-printf-的实现进行同步了吗"}},[t._v("#")]),t._v(" 函数 "),a("code",[t._v("fmt. Print")]),t._v(" 、 "),a("code",[t._v("fmt. Println")]),t._v(" 和 "),a("code",[t._v("fmt. Printf")]),t._v(" 的实现进行同步了吗？")]),t._v(" "),a("p",[t._v("没有。 如果有同步的需求，请使用 "),a("code",[t._v("log")]),t._v(" 标准库包里的相应函数。 你可以调用 "),a("code",[t._v("log. SetFlags(0)")]),t._v(" 来避免每一个日志行的前缀输出。")]),t._v(" "),a("h2",{attrs:{id:"内置的-print-和-println-函数与-fmt-和-log-标准库包中相应的打印函数有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置的-print-和-println-函数与-fmt-和-log-标准库包中相应的打印函数有什么区别"}},[t._v("#")]),t._v(" 内置的 "),a("code",[t._v("print")]),t._v(" 和 "),a("code",[t._v("println")]),t._v(" 函数与 "),a("code",[t._v("fmt")]),t._v(" 和 "),a("code",[t._v("log")]),t._v(" 标准库包中相应的打印函数有什么区别？")]),t._v(" "),a("p",[t._v("除了上一个问题里提到的区别之外，这三组函数之间还有一些其他区别。")]),t._v(" "),a("ol",[a("li",[t._v("内置的"),a("code",[t._v("print")]),t._v("/"),a("code",[t._v("println")]),t._v("函数总是写入标准错误。 "),a("code",[t._v("fmt")]),t._v("标准包里的打印函数总是写入标准输出。 "),a("code",[t._v("log")]),t._v("标准包里的打印函数会默认写入标准错误，然而也可以通过"),a("code",[t._v("log.SetOutput")]),t._v("函数来配置。")]),t._v(" "),a("li",[t._v("内置"),a("code",[t._v("print")]),t._v("/"),a("code",[t._v("println")]),t._v("函数的调用不能接受数组和结构体参数。")]),t._v(" "),a("li",[t._v("对于组合类型的参数，内置的"),a("code",[t._v("print")]),t._v("/"),a("code",[t._v("println")]),t._v("函数将输出参数的底层值部的地址，而"),a("code",[t._v("fmt")]),t._v("和"),a("code",[t._v("log")]),t._v("标准库包中的打印函数将输出接口参数的动态值的字面形式。")]),t._v(" "),a("li",[t._v("目前（Go 1.16），对于标准编译器，调用内置的"),a("code",[t._v("print")]),t._v("/"),a("code",[t._v("println")]),t._v("函数不会使调用参数引用的值逃逸到堆上，而"),a("code",[t._v("fmt")]),t._v("和"),a("code",[t._v("log")]),t._v("标准库包中的打印函数将使调用参数引用的值逃逸到堆上。")]),t._v(" "),a("li",[t._v("如果一个实参有"),a("code",[t._v("String() string")]),t._v("或"),a("code",[t._v("Error() string")]),t._v("方法，那么"),a("code",[t._v("fmt")]),t._v("和"),a("code",[t._v("log")]),t._v("标准库包里的打印函数在打印参数时会调用这两个方法，而内置的"),a("code",[t._v("print")]),t._v("/"),a("code",[t._v("println")]),t._v("函数则会忽略参数的这些方法。")]),t._v(" "),a("li",[t._v("内置的"),a("code",[t._v("print")]),t._v("/"),a("code",[t._v("println")]),t._v("函数不保证在未来的Go版本中继续存在。")])]),t._v(" "),a("h2",{attrs:{id:"标准库包-math-rand-和-crypto-rand-生成的随机数之间有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准库包-math-rand-和-crypto-rand-生成的随机数之间有什么区别"}},[t._v("#")]),t._v(" 标准库包 "),a("code",[t._v("math/rand")]),t._v(" 和 "),a("code",[t._v("crypto/rand")]),t._v(" 生成的随机数之间有什么区别？")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("math/rand")]),t._v(" 标准库包生成的伪随机数序列对于给定的种子是确定的。 这样生成的随机数不适用于安全敏感的环境中。 如果处于加密安全目的，我们应该使用 "),a("code",[t._v("crypto/rand")]),t._v(" 标准库包生成的伪随机数序列。")]),t._v(" "),a("h2",{attrs:{id:"标准库中为什么没有-math-round-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准库中为什么没有-math-round-函数"}},[t._v("#")]),t._v(" 标准库中为什么没有 "),a("code",[t._v("math. Round")]),t._v(" 函数?")]),t._v(" "),a("p",[a("code",[t._v("math. Round")]),t._v(" 函数是有的，但是只是从Go 1.10开始才有这个函数。 从Go 1.10开始，标准库添加了两个新函数 "),a("code",[t._v("math. Round")]),t._v(" 和 "),a("code",[t._v("math. RoundToEven")]),t._v(" 。")]),t._v(" "),a("p",[t._v("在Go 1.10之前，关于 "),a("code",[t._v("math. Round")]),t._v(" 函数是否应该被添加进标准包，经历了"),a("a",{attrs:{href:"https://github.com/golang/go/issues/4594",target:"_blank",rel:"noopener noreferrer"}},[t._v("很长时候的讨论"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"哪些类型不支持比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哪些类型不支持比较"}},[t._v("#")]),t._v(" 哪些类型不支持比较？")]),t._v(" "),a("p",[t._v("下列类型不支持比较：")]),t._v(" "),a("ul",[a("li",[t._v("映射（map）")]),t._v(" "),a("li",[t._v("切片")]),t._v(" "),a("li",[t._v("函数")]),t._v(" "),a("li",[t._v("包含不可比较字段的结构体类型")]),t._v(" "),a("li",[t._v("元素类型为不可比较类型的数组类型")])]),t._v(" "),a("p",[t._v("不支持比较的类型不能用做映射类型的键值类型。")]),t._v(" "),a("p",[t._v("请注意：")]),t._v(" "),a("ul",[a("li",[t._v("尽管映射，切片和函数值不支持比较，但是它们的值可以与类型不确定的"),a("code",[t._v("nil")]),t._v("标识符比较。")]),t._v(" "),a("li",[t._v("如果两个接口值的动态类型相同且不可比较，那么在运行时"),a("a",{attrs:{href:"https://gfw.go101.org/article/interface.html#comparison",target:"_blank",rel:"noopener noreferrer"}},[t._v("比较这两个接口的值"),a("OutboundLink")],1),t._v("会产生一个恐慌。")])]),t._v(" "),a("p",[t._v("关于为什么映射，切片和函数不支持比较，请阅读Go的官方FAQ中"),a("a",{attrs:{href:"https://golang.google.cn/doc/faq#map_keys",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于这个问答"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"为什么两个-nil-值有时候会不相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么两个-nil-值有时候会不相等"}},[t._v("#")]),t._v(" 为什么两个 "),a("code",[t._v("nil")]),t._v(" 值有时候会不相等？")]),t._v(" "),a("p",[a("em",[t._v("（Go官方FAQ中的"),a("a",{attrs:{href:"https://golang.google.cn/doc/faq#nil_error",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个答案"),a("OutboundLink")],1),t._v("也回答了这个问题。）")])]),t._v(" "),a("p",[t._v("一个接口值可以看作是一个包裹非接口值的盒子。被包裹在一个接口值中的非接口值的类型必须实现了此接口值的类型。 在Go中，很多种类型的类型的零值都是用 "),a("code",[t._v("nil")]),t._v(" 来表示的。 一个什么都没包裹的接口值为一个零值接口值，即nil接口值。 一个包裹着其它非接口类型的nil值的接口值并非什么都没包裹，所以它不是（或者说它不等于）一个nil接口值。")]),t._v(" "),a("p",[t._v("当对一个nil接口值和一个nil非接口值进行比较时（假设它们可以比较），此nil非接口值将先被转换为nil接口值的类型，然后再进行比较； 此转换的结果为一个包裹了此nil非接口值的一个副本的接口值，此接口值不是（或者说它不等于）一个nil接口值，所以此比较不相等。")]),t._v(" "),a("p",[t._v("关于更详细的解释请阅读"),a("a",{attrs:{href:"https://gfw.go101.org/article/interface.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("接口"),a("OutboundLink")],1),t._v("和"),a("a",{attrs:{href:"https://gfw.go101.org/article/nil.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于Go中的 "),a("code",[t._v("nil")]),t._v(" "),a("OutboundLink")],1),t._v("两篇文章。")]),t._v(" "),a("p",[t._v("一个示例：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pi\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pb\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" z "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v("\n\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"为什么类型-t1-和-t2-没有共享相同底层类型-即使不同的类型-t1-和-t2-共享相同的底层类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么类型-t1-和-t2-没有共享相同底层类型-即使不同的类型-t1-和-t2-共享相同的底层类型"}},[t._v("#")]),t._v(" 为什么类型 "),a("code",[t._v("[]T1")]),t._v(" 和 "),a("code",[t._v("[]T2")]),t._v(" 没有共享相同底层类型，即使不同的类型 "),a("code",[t._v("T1")]),t._v(" 和 "),a("code",[t._v("T2")]),t._v(" 共享相同的底层类型？")]),t._v(" "),a("p",[a("em",[t._v("（不久前，Go官方FAQ也增加了"),a("a",{attrs:{href:"https://golang.google.cn/doc/faq#convert_slice_with_same_underlying_type",target:"_blank",rel:"noopener noreferrer"}},[t._v("一个相似的问题"),a("OutboundLink")],1),t._v("。）")])]),t._v(" "),a("p",[t._v("在Go语言中，仅当两个切片类型共享相同的"),a("a",{attrs:{href:"https://gfw.go101.org/article/type-system-overview.html#underlying-type",target:"_blank",rel:"noopener noreferrer"}},[t._v("底层类型"),a("OutboundLink")],1),t._v("时，其中一个切片类型才可以转换成另一个切片的类型而不需要使用"),a("a",{attrs:{href:"https://gfw.go101.org/article/unsafe.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("unsafe")]),t._v(" 机制"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("一个非定义组合类型的底层类型是此组合类型本身。 所以即便两个不同的类型 "),a("code",[t._v("T1")]),t._v(" 和 "),a("code",[t._v("T2")]),t._v(" 共享相同的底层类型，类型 "),a("code",[t._v("[]T1")]),t._v(" 和 "),a("code",[t._v("[]T2")]),t._v(" 也依然是不同的类型，因此它们的底层类型也是不同的。这意味着其中一个的值不能转换为另一个。")]),t._v(" "),a("p",[t._v("底层类型 "),a("code",[t._v("[]T1")]),t._v(" 和 "),a("code",[t._v("[]T2")]),t._v(" 不同的原因是：")]),t._v(" "),a("ul",[a("li",[t._v("把"),a("code",[t._v("[]T1")]),t._v("和"),a("code",[t._v("[]T2")]),t._v("的值相互转换的需求在实践中并不常见。")]),t._v(" "),a("li",[t._v("使得"),a("a",{attrs:{href:"https://gfw.go101.org/article/type-system-overview.html#underlying-type",target:"_blank",rel:"noopener noreferrer"}},[t._v("底层类型的溯源规则"),a("OutboundLink")],1),t._v("更加简单。")])]),t._v(" "),a("p",[t._v("同样的原因也适用于其它组合类型。 例如：类型 "),a("code",[t._v("map[T]T1")]),t._v(" 和 "),a("code",[t._v("map[T]T2")]),t._v(" 同样不共享相同的底层类型，即便 "),a("code",[t._v("T1")]),t._v(" 和 "),a("code",[t._v("T2")]),t._v(" 共享相同的底层类型。")]),t._v(" "),a("p",[t._v("类型 "),a("code",[t._v("[]T1")]),t._v(" 的值时候有可能通过使用 "),a("code",[t._v("unsafe")]),t._v(" 机制转换成 "),a("code",[t._v("[]T2")]),t._v(" 的，但是一般不建议这么做：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsafe"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" MyInt "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("MyInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [123 8 9]")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [123 8 9]")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%T \\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []int")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%T \\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []main.MyInt")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"哪些值可以被取地址-哪些值不可以被取地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哪些值可以被取地址-哪些值不可以被取地址"}},[t._v("#")]),t._v(" 哪些值可以被取地址，哪些值不可以被取地址？")]),t._v(" "),a("p",[t._v("以下的值是不可以寻址的：")]),t._v(" "),a("ul",[a("li",[t._v("字符串的字节元素")]),t._v(" "),a("li",[t._v("映射元素")]),t._v(" "),a("li",[t._v("接口值的动态值（类型断言的结果）")]),t._v(" "),a("li",[t._v("常量（包括有名常量和字面量）")]),t._v(" "),a("li",[t._v("声明的包级别函数")]),t._v(" "),a("li",[t._v("方法（用做函数值）")]),t._v(" "),a("li",[t._v("中间结果值\n"),a("ul",[a("li",[t._v("函数调用")]),t._v(" "),a("li",[t._v("显式值转换")]),t._v(" "),a("li",[t._v("各种操作，不包含指针解引用（dereference）操作，但是包含：\n"),a("ul",[a("li",[t._v("通道接收操作")]),t._v(" "),a("li",[t._v("子字符串操作")]),t._v(" "),a("li",[t._v("子切片操作")]),t._v(" "),a("li",[t._v("加法、减法、乘法、以及除法等等。")])])])])])]),t._v(" "),a("p",[t._v("请注意： "),a("code",[t._v("&T{}")]),t._v(" 在Go里是一个语法糖，它是 "),a("code",[t._v("tmp := T{}; (&tmp)")]),t._v(" 的简写形式。 所以 "),a("code",[t._v("&T{}")]),t._v(" 是合法的并不代表字面量 "),a("code",[t._v("T{}")]),t._v(" 是可寻址的。")]),t._v(" "),a("p",[t._v("以下的值是可寻址的，因此可以被取地址：")]),t._v(" "),a("ul",[a("li",[t._v("变量")]),t._v(" "),a("li",[t._v("可寻址的结构体的字段")]),t._v(" "),a("li",[t._v("可寻址的数组的元素")]),t._v(" "),a("li",[t._v("任意切片的元素（无论是可寻址切片或不可寻址切片）")]),t._v(" "),a("li",[t._v("指针解引用（dereference）操作")])]),t._v(" "),a("h2",{attrs:{id:"为什么映射元素不可被取地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么映射元素不可被取地址"}},[t._v("#")]),t._v(" 为什么映射元素不可被取地址？")]),t._v(" "),a("p",[t._v("在Go中，映射的设计保证一个映射值在内存允许的情况下可以加入任意个条目。 另外为了防止一个映射中为其条目开辟的内存段支离破碎，官方标准编译器使用了哈希表来实现映射。 并且为了保证元素索引的效率，一个映射值的底层哈希表只为其中的所有条目维护一段连续的内存段。 因此，一个映射值随着其中的条目数量逐渐增加时，其维护的连续的内存段需要不断重新开辟来增容，并把原来内存段上的条目全部复制到新开辟的内存段上。 另外，即使一个映射值维护的内存段没有增容，某些哈希表实现也可能在当前内存段中移动其中的条目。 总之，映射中的元素的地址会因为各种原因而改变。 如果映射元素可以被取地址，则Go运行时（runtime）必须在元素地址改变的时候修改所有存储了元素地址的指针值。 这极大得增加了Go编译器和运行时的实现难度，并且严重影响了程序运行效率。 因此，目前，Go中禁止取映射元素的地址。")]),t._v(" "),a("p",[t._v("映射元素不可被取地址的另一个原因是表达式 "),a("code",[t._v("aMap[key]")]),t._v(" 可能返回一个存储于 "),a("code",[t._v("aMap")]),t._v(" 中的元素，也可能返回一个不存储于其中的元素零值。 这意味着表达式 "),a("code",[t._v("aMap[key]")]),t._v(" 在 "),a("code",[t._v("(&aMap[key]). Modify()")]),t._v(" 调用执行之后可能仍然被估值为元素零值。 这将使很多人感到困惑，因此在Go中禁止取映射元素的地址。")]),t._v(" "),a("h2",{attrs:{id:"为什么非空切片的元素总是可被取地址-即便对于不可寻址的切片也是如此"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么非空切片的元素总是可被取地址-即便对于不可寻址的切片也是如此"}},[t._v("#")]),t._v(" 为什么非空切片的元素总是可被取地址，即便对于不可寻址的切片也是如此？")]),t._v(" "),a("p",[t._v("切片的内部类型是一个结构体，类似于")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\telements unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引用着一个元素序列")]),t._v("\n\tlength   "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\tcapacity "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("每一个切片间接引用一个元素序列。 尽管一个非空切片是不可取地址的，它的内部元素序列需要开辟在内存中的某处因而必须是可取地址的。 取一个切片的元素地址事实上是取内部元素序列上的元素地址。 因此，不可寻址的非空切片的元素也是可以被取地址的。")]),t._v(" "),a("h2",{attrs:{id:"对任意的非指针和非接口定义类型-t-为什么类型-t-的方法集总是类型-t-的方法集的超集-但是反之却不然"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对任意的非指针和非接口定义类型-t-为什么类型-t-的方法集总是类型-t-的方法集的超集-但是反之却不然"}},[t._v("#")]),t._v(" 对任意的非指针和非接口定义类型 "),a("code",[t._v("T")]),t._v(" ，为什么类型 "),a("code",[t._v("*T")]),t._v(" 的方法集总是类型 "),a("code",[t._v("T")]),t._v(" 的方法集的超集，但是反之却不然？")]),t._v(" "),a("p",[t._v("在Go语言中，为了方便，对于一个非指针和非接口定义类型 "),a("code",[t._v("T")]),t._v(" ，")]),t._v(" "),a("ul",[a("li",[t._v("一个"),a("code",[t._v("T")]),t._v("类型的值可以调用为"),a("code",[t._v("*T")]),t._v("类型声明的方法，但是仅当此"),a("code",[t._v("T")]),t._v("的值是可寻址的情况下。 编译器在调用指针属主方法前，会自动取此"),a("code",[t._v("T")]),t._v("值的地址。 因为不是任何"),a("code",[t._v("T")]),t._v("值都是可寻址的，所以并非任何"),a("code",[t._v("T")]),t._v("值都能够调用为类型"),a("code",[t._v("*T")]),t._v("声明的方法。 这种便利只是一个语法糖，而不是一种固有的规则。")]),t._v(" "),a("li",[t._v("一个"),a("code",[t._v("*T")]),t._v("类型的值可以调用为类型"),a("code",[t._v("T")]),t._v("声明的方法。 这是因为解引用指针总是合法的。 这种便利不仅仅是一个语法糖，它也是一种固有的规则。")])]),t._v(" "),a("p",[t._v("所以很合理的， "),a("code",[t._v("*T")]),t._v(" 的方法集总是 "),a("code",[t._v("T")]),t._v(" 方法集的超集，但反之不然。")]),t._v(" "),a("p",[t._v("事实上，你可以认为对于每一个为类型 "),a("code",[t._v("T")]),t._v(" 声明的方法，编译器都会为类型 "),a("code",[t._v("*T")]),t._v(" 自动隐式声明一个同名和同签名的方法。 详见"),a("a",{attrs:{href:"https://gfw.go101.org/article/method.html#implicit-pointer-methods",target:"_blank",rel:"noopener noreferrer"}},[t._v("方法"),a("OutboundLink")],1),t._v("一文。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MethodX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v0 ParamType0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ResultType0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译器将会为*T隐式声明一个如下的方法。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MethodX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v0 ParamType0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ResultType0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MethodX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("更多解释请阅读Go官方FAQ中的"),a("a",{attrs:{href:"https://golang.google.cn/doc/faq#different_method_sets",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个问答"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"我们可以为哪些类型声明方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们可以为哪些类型声明方法"}},[t._v("#")]),t._v(" 我们可以为哪些类型声明方法？")]),t._v(" "),a("p",[t._v("请阅读"),a("a",{attrs:{href:"https://gfw.go101.org/article/method.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("方法"),a("OutboundLink")],1),t._v("一文获取答案。")]),t._v(" "),a("h2",{attrs:{id:"在go里如何声明不可变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在go里如何声明不可变量"}},[t._v("#")]),t._v(" 在Go里如何声明不可变量？")]),t._v(" "),a("p",[t._v("如下是三种***不可变值***的定义：")]),t._v(" "),a("ol",[a("li",[t._v("没有地址的值（所以它们不可以寻址）。")]),t._v(" "),a("li",[t._v("有地址但是因为种种原因在语法上不可以寻址的值。")]),t._v(" "),a("li",[t._v("可寻址但不允许在语法上被修改的值。")])]),t._v(" "),a("p",[t._v("在Go语言中，直到现在（Go 1.16），没有值满足第三种定义。")]),t._v(" "),a("p",[t._v("有名常量值满足第一种定义。")]),t._v(" "),a("p",[t._v("方法和声明的函数可以被视为声明的不可变值。 它们满足第二种定义。字符串的字节元素同样满足第二种定义。")]),t._v(" "),a("p",[t._v("在Go中没有办法声明其它不可变值。")]),t._v(" "),a("h2",{attrs:{id:"为什么没有内置的-set-容器类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么没有内置的-set-容器类型"}},[t._v("#")]),t._v(" 为什么没有内置的 "),a("code",[t._v("set")]),t._v(" 容器类型？")]),t._v(" "),a("p",[t._v("集合（set）可以看作是不关心元素值的映射。 在Go语言里， "),a("code",[t._v("map[Tkey]struct{}")]),t._v(" 经常被用做一个集合类型。")]),t._v(" "),a("h2",{attrs:{id:"什么是byte-什么是rune-如何将-byte-和-rune-类型的值转换为字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是byte-什么是rune-如何将-byte-和-rune-类型的值转换为字符串"}},[t._v("#")]),t._v(" 什么是byte？什么是rune？ 如何将 "),a("code",[t._v("[]byte")]),t._v(" 和 "),a("code",[t._v("[]rune")]),t._v(" 类型的值转换为字符串？")]),t._v(" "),a("p",[t._v("在Go语言里， "),a("code",[t._v("byte")]),t._v(" 是 "),a("code",[t._v("uint8")]),t._v(" 类型的一个别名。 换言之， "),a("code",[t._v("byte")]),t._v(" 和 "),a("code",[t._v("uint8")]),t._v(" 是相同的类型。 "),a("code",[t._v("rune")]),t._v(" 和 "),a("code",[t._v("int32")]),t._v(" 属于同样类似的关系。")]),t._v(" "),a("p",[t._v("一个 "),a("code",[t._v("rune")]),t._v(" 值通常被用来存储一个Unicode码点。")]),t._v(" "),a("p",[a("code",[t._v("[]byte")]),t._v(" 和 "),a("code",[t._v("[]rune")]),t._v(" 类型的值可以被显式地直接转换成字符串，反之亦然。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go"')]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" rs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rune")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s0 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("更多关于字符串的信息，请阅读"),a("a",{attrs:{href:"https://gfw.go101.org/article/string.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go中的字符串"),a("OutboundLink")],1),t._v("一文。")]),t._v(" "),a("h2",{attrs:{id:"如何原子地操作指针值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何原子地操作指针值"}},[t._v("#")]),t._v(" 如何原子地操作指针值？")]),t._v(" "),a("p",[t._v("例如:")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unsafe"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sync/atomic"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" T "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// just a demo")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("T\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newP "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加载（读取）")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("atomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LoadPointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存储（修改）")]),t._v("\n\tatomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("StorePointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tunsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 交换")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" oldP "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("atomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SwapPointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tunsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比较并交换")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" swapped "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" atomic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("CompareAndSwapPointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tunsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tunsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" swapped\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("是的，目前指针的原子操作使用起来非常得繁琐。")]),t._v(" "),a("h2",{attrs:{id:"iota-是什么意思"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iota-是什么意思"}},[t._v("#")]),t._v(" "),a("code",[t._v("iota")]),t._v(" 是什么意思？")]),t._v(" "),a("p",[t._v("Iota是希腊字母表中的第九个字母。 在Go语言中， "),a("code",[t._v("iota")]),t._v(" 用在常量声明中。 在每一个常量声明组中，其值在该常量声明组的第***N***个常量规范中的值为 "),a("code",[t._v("N")]),t._v(" 。")]),t._v(" "),a("h2",{attrs:{id:"为什么没有一个内置的-closed-函数用来检查通道是否已经关闭"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么没有一个内置的-closed-函数用来检查通道是否已经关闭"}},[t._v("#")]),t._v(" 为什么没有一个内置的 "),a("code",[t._v("closed")]),t._v(" 函数用来检查通道是否已经关闭？")]),t._v(" "),a("p",[t._v("原因是此函数的实用性非常有限。 此类函数调用的返回结果不能总是反映输入通道实参的最新状态。 所以依靠此函数的返回结果来做决定不是一个好主意。")]),t._v(" "),a("p",[t._v("如果你确实需要这种函数，你可以不怎么费功夫地自己写一个。 请阅读"),a("a",{attrs:{href:"https://gfw.go101.org/article/channel-closing.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何优雅地关闭通道"),a("OutboundLink")],1),t._v("一文来了解如何编写一个 "),a("code",[t._v("closed")]),t._v(" 函数以及如何避免使用这样的函数。")]),t._v(" "),a("h2",{attrs:{id:"函数返回局部变量的指针是否安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数返回局部变量的指针是否安全"}},[t._v("#")]),t._v(" 函数返回局部变量的指针是否安全？")]),t._v(" "),a("p",[t._v("是的，在Go中这是绝对安全的。")]),t._v(" "),a("p",[t._v("支持栈的Go编译器将会对每个局部变量进行逃逸分析。 对于官方标准编译器来说，如果一个值可以在编译时刻被断定它在运行时刻仅会在一个协程中被使用，则此值将被开辟在（此协程的）栈上；否则此值将被开辟在堆上。 请阅读"),a("a",{attrs:{href:"https://gfw.go101.org/article/memory-block.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("内存块"),a("OutboundLink")],1),t._v("一文了解更多。")]),t._v(" "),a("h2",{attrs:{id:"单词-gopher-在go社区中表示什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单词-gopher-在go社区中表示什么"}},[t._v("#")]),t._v(" 单词***gopher***在Go社区中表示什么？")]),t._v(" "),a("p",[t._v("在Go社区中，"),a("em",[a("em",[a("em",[t._v("gopher***表示Go程序员。 这个昵称可能是源自于Go语言采用了"),a("a",{attrs:{href:"https://blog.golang.com/gopher",target:"_blank",rel:"noopener noreferrer"}},[t._v("一个卡通小地鼠（gopher）"),a("OutboundLink")],1),t._v("做为吉祥物。 顺便说一下，这个卡通小地鼠是由")]),t._v("Renee French")]),t._v("设计的。 "),a("em",[t._v("Renee French")]),t._v("是Go项目首任负责人")]),t._v("Rob Pike*的妻子。")])])}),[],!1,null,null,null);s.default=e.exports}}]);