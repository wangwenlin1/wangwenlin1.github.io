(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{1170:function(r,t,e){"use strict";e.r(t);var o=e(19),n=Object(o.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"并发同步概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并发同步概述"}},[r._v("#")]),r._v(" 并发同步概述")]),r._v(" "),e("p",[r._v("本文将解释什么是并发同步，并列出Go支持的几种并发同步技术。")]),r._v(" "),e("h2",{attrs:{id:"什么是并发同步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是并发同步"}},[r._v("#")]),r._v(" 什么是并发同步？")]),r._v(" "),e("p",[r._v("并发同步是指如何控制若干并发计算（在Go中，即协程），从而")]),r._v(" "),e("ul",[e("li",[r._v("避免在它们之间产生数据竞争的现象；")]),r._v(" "),e("li",[r._v("避免在它们无所事事的时候消耗CPU资源。")])]),r._v(" "),e("p",[r._v("并发同步有时候也称为数据同步。")]),r._v(" "),e("h2",{attrs:{id:"go支持哪些并发同步技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#go支持哪些并发同步技术"}},[r._v("#")]),r._v(" Go支持哪些并发同步技术？")]),r._v(" "),e("p",[e("a",{attrs:{href:"https://gfw.go101.org/article/channel.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("通道"),e("OutboundLink")],1),r._v("一文已经解释了如何使用通道来做并发同步。 除了使用通道，Go还支持几种通用并发同步技术，比如互斥锁和原子操作。 请阅读下面的文章来了解各种并发同步技术的使用。")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://gfw.go101.org/article/channel-use-cases.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("通道用例大全"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://gfw.go101.org/article/channel-closing.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("如何优雅地关闭通道"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://gfw.go101.org/article/concurrent-synchronization-more.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[r._v("sync")]),r._v("标准库包中提供的并发同步技术"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://gfw.go101.org/article/concurrent-atomic-operation.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[r._v("sync/atomic")]),r._v("标准库包中提供的原子操作技术"),e("OutboundLink")],1)])]),r._v(" "),e("p",[r._v("我们也可以利用网络和文件读写来做并发同步，但是这样的并发同步方法使用在一个程序进程内部时效率相对比较低。 一般来说，这样的方法多适用于多个进程之间或多个主机之间的并发同步。《Go语言101》中不介绍这样的并发同步方法。")]),r._v(" "),e("p",[r._v("为了更好地理解各种并发同步技术，推荐在适当的时候（具有一定的Go并发编程经验时）阅读"),e("a",{attrs:{href:"https://gfw.go101.org/article/memory-model.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("Go中的内存顺序保证"),e("OutboundLink")],1),r._v("一文。")]),r._v(" "),e("p",[r._v("Go中提供的各种并发同步技术并不能阻止Go程序员写出"),e("a",{attrs:{href:"https://gfw.go101.org/article/concurrent-common-mistakes.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("不正确的并发代码"),e("OutboundLink")],1),r._v("。 但是，这些技术使得Go程序员可以轻松写出正确的并发代码。特别地，Go中提供的独特的通道技术使得并发编程变得很轻松和惬意。")])])}),[],!1,null,null,null);t.default=n.exports}}]);