(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{1281:function(e,t,a){"use strict";a.r(t);var s=a(19),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"高可用集群搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高可用集群搭建"}},[e._v("#")]),e._v(" 高可用集群搭建")]),e._v(" "),a("p",[e._v("kubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。")]),e._v(" "),a("p",[e._v("这个工具能通过两条指令完成一个kubernetes集群的部署：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n# 创建一个 Master 节点\n$ kubeadm init\n\n# 将一个 Node 节点加入到当前集群中\n$ kubeadm join <Master节点的IP和端口 >\n")])])]),a("h2",{attrs:{id:"安装要求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装要求"}},[e._v("#")]),e._v(" 安装要求")]),e._v(" "),a("p",[e._v("在开始之前，部署Kubernetes集群机器需要满足以下几个条件：")]),e._v(" "),a("ul",[a("li",[e._v("一台或多台机器，操作系统 CentOS7.x-86_x64")]),e._v(" "),a("li",[e._v("硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多")]),e._v(" "),a("li",[e._v("可以访问外网，需要拉取镜像，如果服务器不能上网，需要提前下载镜像并导入节点")]),e._v(" "),a("li",[e._v("禁止swap分区")])]),e._v(" "),a("h2",{attrs:{id:"准备环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备环境"}},[e._v("#")]),e._v(" 准备环境")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("角色")]),e._v(" "),a("th",[e._v("IP")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("master1")]),e._v(" "),a("td",[e._v("192.168.44.155")])]),e._v(" "),a("tr",[a("td",[e._v("master2")]),e._v(" "),a("td",[e._v("192.168.44.156")])]),e._v(" "),a("tr",[a("td",[e._v("node1")]),e._v(" "),a("td",[e._v("192.168.44.157")])]),e._v(" "),a("tr",[a("td",[e._v("VIP（虚拟ip）")]),e._v(" "),a("td",[e._v("192.168.44.158")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n# 关闭防火墙\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n# 关闭selinux\nsed -i 's/enforcing/disabled/' /etc/selinux/config  # 永久\nsetenforce 0  # 临时\n\n# 关闭swap\nswapoff -a  # 临时\nsed -ri 's/.*swap.*/#&/' /etc/fstab    # 永久\n\n# 根据规划设置主机名\nhostnamectl set-hostname <hostname>\n\n# 在master添加hosts\ncat >> /etc/hosts << EOF\n192.168.44.158    master.k8s.io   k8s-vip\n192.168.44.155    master01.k8s.io master1\n192.168.44.156    master02.k8s.io master2\n192.168.44.157    node01.k8s.io   node1\nEOF\n\n# 将桥接的IPv4流量传递到iptables的链\ncat > /etc/sysctl.d/k8s.conf << EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\nsysctl --system  # 生效\n\n# 时间同步\nyum install ntpdate -y\nntpdate time.windows.com\n")])])]),a("h2",{attrs:{id:"所有master节点部署keepalived"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#所有master节点部署keepalived"}},[e._v("#")]),e._v(" 所有master节点部署keepalived")]),e._v(" "),a("h3",{attrs:{id:"安装相关包和keepalived"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装相关包和keepalived"}},[e._v("#")]),e._v(" 安装相关包和keepalived")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nyum install -y conntrack-tools libseccomp libtool-ltdl\n\nyum install -y keepalived\n")])])]),a("h3",{attrs:{id:"配置master节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置master节点"}},[e._v("#")]),e._v(" 配置master节点")]),e._v(" "),a("p",[e._v("master1节点配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\ncat > /etc/keepalived/keepalived.conf <<EOF \n! Configuration File for keepalived\n\nglobal_defs {\n   router_id k8s\n}\n\nvrrp_script check_haproxy {\n    script "killall -0 haproxy"\n    interval 3\n    weight -2\n    fall 10\n    rise 2\n}\n\nvrrp_instance VI_1 {\n    state MASTER \n    interface ens33 \n    virtual_router_id 51\n    priority 250\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass ceb1b3ec013d66163d6ab\n    }\n    virtual_ipaddress {\n        192.168.44.158\n    }\n    track_script {\n        check_haproxy\n    }\n\n}\nEOF\n')])])]),a("p",[e._v("master2节点配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\ncat > /etc/keepalived/keepalived.conf <<EOF \n! Configuration File for keepalived\n\nglobal_defs {\n   router_id k8s\n}\n\nvrrp_script check_haproxy {\n    script "killall -0 haproxy"\n    interval 3\n    weight -2\n    fall 10\n    rise 2\n}\n\nvrrp_instance VI_1 {\n    state BACKUP \n    interface ens33 \n    virtual_router_id 51\n    priority 200\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass ceb1b3ec013d66163d6ab\n    }\n    virtual_ipaddress {\n        192.168.44.158\n    }\n    track_script {\n        check_haproxy\n    }\n\n}\nEOF\n')])])]),a("h3",{attrs:{id:"启动和检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动和检查"}},[e._v("#")]),e._v(" 启动和检查")]),e._v(" "),a("p",[e._v("在两台master节点都执行")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n# 启动keepalived\n$ systemctl start keepalived.service\n设置开机启动\n$ systemctl enable keepalived.service\n# 查看启动状态\n$ systemctl status keepalived.service\n")])])]),a("p",[e._v("启动后查看master1的网卡信息")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nip a s ens33\n")])])]),a("h2",{attrs:{id:"部署haproxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署haproxy"}},[e._v("#")]),e._v(" 部署haproxy")]),e._v(" "),a("h3",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nyum install -y haproxy\n")])])]),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[e._v("#")]),e._v(" 配置")]),e._v(" "),a("p",[e._v("两台master节点的配置均相同，配置中声明了后端代理的两个master节点服务器，指定了haproxy运行的端口为16443等，因此16443端口为集群的入口")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\ncat > /etc/haproxy/haproxy.cfg << EOF\n#---------------------------------------------------------------------\n# Global settings\n#---------------------------------------------------------------------\nglobal\n    # to have these messages end up in /var/log/haproxy.log you will\n    # need to:\n    # 1) configure syslog to accept network log events.  This is done\n    #    by adding the '-r' option to the SYSLOGD_OPTIONS in\n    #    /etc/sysconfig/syslog\n    # 2) configure local2 events to go to the /var/log/haproxy.log\n    #   file. A line like the following can be added to\n    #   /etc/sysconfig/syslog\n    #\n    #    local2.*                       /var/log/haproxy.log\n    #\n    log         127.0.0.1 local2\n    \n    chroot      /var/lib/haproxy\n    pidfile     /var/run/haproxy.pid\n    maxconn     4000\n    user        haproxy\n    group       haproxy\n    daemon \n       \n    # turn on stats unix socket\n    stats socket /var/lib/haproxy/stats\n#---------------------------------------------------------------------\n# common defaults that all the 'listen' and 'backend' sections will\n# use if not designated in their block\n#---------------------------------------------------------------------  \ndefaults\n    mode                    http\n    log                     global\n    option                  httplog\n    option                  dontlognull\n    option http-server-close\n    option forwardfor       except 127.0.0.0/8\n    option                  redispatch\n    retries                 3\n    timeout http-request    10s\n    timeout queue           1m\n    timeout connect         10s\n    timeout client          1m\n    timeout server          1m\n    timeout http-keep-alive 10s\n    timeout check           10s\n    maxconn                 3000\n#---------------------------------------------------------------------\n# kubernetes apiserver frontend which proxys to the backends\n#--------------------------------------------------------------------- \nfrontend kubernetes-apiserver\n    mode                 tcp\n    bind                 *:16443\n    option               tcplog\n    default_backend      kubernetes-apiserver    \n#---------------------------------------------------------------------\n# round robin balancing between the various backends\n#---------------------------------------------------------------------\nbackend kubernetes-apiserver\n    mode        tcp\n    balance     roundrobin\n    server      master01.k8s.io   192.168.44.155:6443 check\n    server      master02.k8s.io   192.168.44.156:6443 check\n#---------------------------------------------------------------------\n# collection haproxy statistics message\n#---------------------------------------------------------------------\nlisten stats\n    bind                 *:1080\n    stats auth           admin:awesomePassword\n    stats refresh        5s\n    stats realm          HAProxy\\ Statistics\n    stats uri            /admin?stats\nEOF\n")])])]),a("h3",{attrs:{id:"启动和检查-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动和检查-2"}},[e._v("#")]),e._v(" 启动和检查")]),e._v(" "),a("p",[e._v("两台master都启动")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n# 设置开机启动\n$ systemctl enable haproxy\n# 开启haproxy\n$ systemctl start haproxy\n# 查看启动状态\n$ systemctl status haproxy\n")])])]),a("p",[e._v("检查端口")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nnetstat -lntup|grep haproxy\n")])])]),a("h2",{attrs:{id:"所有节点安装docker-kubeadm-kubelet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#所有节点安装docker-kubeadm-kubelet"}},[e._v("#")]),e._v(" 所有节点安装Docker/kubeadm/kubelet")]),e._v(" "),a("p",[e._v("Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。")]),e._v(" "),a("h3",{attrs:{id:"安装docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装docker"}},[e._v("#")]),e._v(" 安装Docker")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n$ wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo\n$ yum -y install docker-ce-18.06.1.ce-3.el7\n$ systemctl enable docker && systemctl start docker\n$ docker --version\nDocker version 18.06.1-ce, build e68fc7a\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\n$ cat > /etc/docker/daemon.json << EOF\n{\n  "registry-mirrors": ["https://b9pmyelo.mirror.aliyuncs.com"]\n}\nEOF\n')])])]),a("h3",{attrs:{id:"添加阿里云yum软件源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加阿里云yum软件源"}},[e._v("#")]),e._v(" 添加阿里云YUM软件源")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n$ cat > /etc/yum.repos.d/kubernetes.repo << EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n")])])]),a("h3",{attrs:{id:"安装kubeadm-kubelet和kubectl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装kubeadm-kubelet和kubectl"}},[e._v("#")]),e._v(" 安装kubeadm，kubelet和kubectl")]),e._v(" "),a("p",[e._v("由于版本更新频繁，这里指定版本号部署：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n$ yum install -y kubelet-1.16.3 kubeadm-1.16.3 kubectl-1.16.3\n$ systemctl enable kubelet\n")])])]),a("h2",{attrs:{id:"部署kubernetes-master"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署kubernetes-master"}},[e._v("#")]),e._v(" 部署Kubernetes Master")]),e._v(" "),a("h3",{attrs:{id:"创建kubeadm配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建kubeadm配置文件"}},[e._v("#")]),e._v(" 创建kubeadm配置文件")]),e._v(" "),a("p",[e._v("在具有vip的master上操作，这里为master1")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\n$ mkdir /usr/local/kubernetes/manifests -p\n\n$ cd /usr/local/kubernetes/manifests/\n\n$ vi kubeadm-config.yaml\n\napiServer:\n  certSANs:\n\n    - master1\n    - master2\n    - master.k8s.io\n    - 192.168.44.158\n    - 192.168.44.155\n    - 192.168.44.156\n    - 127.0.0.1\n\n  extraArgs:\n    authorization-mode: Node,RBAC\n  timeoutForControlPlane: 4m0s\napiVersion: kubeadm.k8s.io/v1beta1\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\ncontrolPlaneEndpoint: "master.k8s.io:16443"\ncontrollerManager: {}\ndns: \n  type: CoreDNS\netcd:\n  local:    \n    dataDir: /var/lib/etcd\nimageRepository: registry.aliyuncs.com/google_containers\nkind: ClusterConfiguration\nkubernetesVersion: v1.16.3\nnetworking: \n  dnsDomain: cluster.local  \n  podSubnet: 10.244.0.0/16\n  serviceSubnet: 10.1.0.0/16\nscheduler: {}\n')])])]),a("h3",{attrs:{id:"在master1节点执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在master1节点执行"}},[e._v("#")]),e._v(" 在master1节点执行")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n$ kubeadm init --config kubeadm-config.yaml\n")])])]),a("p",[e._v("按照提示配置环境变量，使用kubectl工具：")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.kube\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" -i /etc/kubernetes/admin.conf "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.kube/config\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("chown")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -u"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -g"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.kube/config\n$ kubectl get nodes\n$ kubectl get pods -n kube-system\n")])])]),a("p",[a("strong",[e._v("按照提示保存以下内容，一会要使用：")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubeadm "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),e._v(" master.k8s.io:16443 --token jv5z7n.3y1zi95p952y9p65 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --discovery-token-ca-cert-hash sha256:403bca185c2f3a4791685013499e7ce58f9848e2213e27194b75a2e3293d8812 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --control-plane \n")])])]),a("p",[e._v("查看集群状态")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl get cs\n\nkubectl get pods -n kube-system\n")])])]),a("h2",{attrs:{id:"安装集群网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装集群网络"}},[e._v("#")]),e._v(" 安装集群网络")]),e._v(" "),a("p",[e._v("从官方地址获取到flannel的yaml，在master1上执行")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" flannel\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" flannel\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" -c https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n")])])]),a("p",[e._v("安装flannel网络")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl apply -f kube-flannel.yml \n")])])]),a("p",[e._v("检查")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl get pods -n kube-system\n")])])]),a("h2",{attrs:{id:"master2节点加入集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master2节点加入集群"}},[e._v("#")]),e._v(" master2节点加入集群")]),e._v(" "),a("h3",{attrs:{id:"复制密钥及相关文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制密钥及相关文件"}},[e._v("#")]),e._v(" 复制密钥及相关文件")]),e._v(" "),a("p",[e._v("从master1复制密钥及相关文件到master2")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ssh root@192.168.44.156 mkdir -p /etc/kubernetes/pki/etcd")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# scp /etc/kubernetes/admin.conf root@192.168.44.156:/etc/kubernetes")]),e._v("\n   \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# scp /etc/kubernetes/pki/{ca.*,sa.*,front-proxy-ca.*} root@192.168.44.156:/etc/kubernetes/pki")]),e._v("\n   \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# scp /etc/kubernetes/pki/etcd/ca.* root@192.168.44.156:/etc/kubernetes/pki/etcd")]),e._v("\n")])])]),a("h3",{attrs:{id:"master2加入集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master2加入集群"}},[e._v("#")]),e._v(" master2加入集群")]),e._v(" "),a("p",[e._v("执行在master1上init后输出的join命令, 需要带上参数 "),a("code",[e._v("--control-plane")]),e._v(" 表示把master控制节点加入集群")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nkubeadm join master.k8s.io:16443 --token ckf7bs.30576l0okocepg8b     --discovery-token-ca-cert-hash sha256:19afac8b11182f61073e254fb57b9f19ab4d798b70501036fc69ebef46094aba --control-plane\n")])])]),a("p",[e._v("检查状态")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nkubectl get node\n\nkubectl get pods --all-namespaces\n")])])]),a("h2",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),a("h2",{attrs:{id:"加入kubernetes-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加入kubernetes-node"}},[e._v("#")]),e._v(" 加入Kubernetes Node")]),e._v(" "),a("p",[e._v("在node1上执行")]),e._v(" "),a("p",[e._v("向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nkubeadm join master.k8s.io:16443 --token ckf7bs.30576l0okocepg8b     --discovery-token-ca-cert-hash sha256:19afac8b11182f61073e254fb57b9f19ab4d798b70501036fc69ebef46094aba\n")])])]),a("p",[a("strong",[e._v("集群网络重新安装，因为添加了新的node节点")])]),e._v(" "),a("p",[e._v("检查状态")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nkubectl get node\n\nkubectl get pods --all-namespaces\n")])])]),a("h2",{attrs:{id:"-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[e._v("#")])]),e._v(" "),a("h2",{attrs:{id:"测试kubernetes集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试kubernetes集群"}},[e._v("#")]),e._v(" 测试kubernetes集群")]),e._v(" "),a("p",[e._v("在Kubernetes集群中创建一个pod，验证是否正常运行：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n$ kubectl create deployment nginx --image=nginx\n$ kubectl expose deployment nginx --port=80 --type=NodePort\n$ kubectl get pod,svc\n")])])]),a("p",[e._v("访问地址：http://NodeIP: Port")]),e._v(" "),a("h2",{attrs:{id:"部署-nginx-负载均衡器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署-nginx-负载均衡器"}},[e._v("#")]),e._v(" 部署 Nginx 负载均衡器")]),e._v(" "),a("ul",[a("li",[e._v("kube-apiserver 高可用架构图：")]),e._v(" "),a("li",[e._v("涉及软件：")])]),e._v(" "),a("p",[e._v("Keepalived 是一个主流高可用软件，基于 VIP 绑定实现服务器双机热备，在上述拓扑中，Keepalived 主要根据 Nginx 运行状态判断是否需要故障转移（偏移 VIP），例如当 Nginx主节点挂掉，VIP 会自动绑定在 Nginx 备节点，从而保证 VIP 一直可用，实现 Nginx 高可用。"),a("br"),e._v("\nNginx 是一个主流 Web 服务和反向代理服务器，这里用四层实现对 apiserver 实现负载均"),a("br"),e._v("\n衡。")]),e._v(" "),a("h3",{attrs:{id:"安装软件包-主-备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装软件包-主-备"}},[e._v("#")]),e._v(" 安装软件包（主/备）")]),e._v(" "),a("h3",{attrs:{id:"nginx-配置文件-主-备一样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置文件-主-备一样"}},[e._v("#")]),e._v(" Nginx 配置文件（主/备一样）")]),e._v(" "),a("h3",{attrs:{id:"keepalived-配置文件-nginx-master"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keepalived-配置文件-nginx-master"}},[e._v("#")]),e._v(" keepalived 配置文件（Nginx Master）")]),e._v(" "),a("p",[e._v("vrrp_script：指定检查 nginx 工作状态脚本（根据 nginx 状态判断是否故障转移）"),a("br"),e._v("\nvirtual_ipaddress：虚拟 IP（VIP）")]),e._v(" "),a("h3",{attrs:{id:"检查-nginx-状态脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查-nginx-状态脚本"}},[e._v("#")]),e._v(" 检查 nginx 状态脚本：")]),e._v(" "),a("h3",{attrs:{id:"keepalived-配置文件-nginx-backup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keepalived-配置文件-nginx-backup"}},[e._v("#")]),e._v(" keepalived 配置文件（Nginx Backup）")]),e._v(" "),a("p",[e._v("上述配置文件中检查 nginx 运行状态脚本："),a("br"),e._v("\n注：keepalived 根据脚本返回状态码（0 为工作正常，非 0 不正常）判断是否故障转移。")]),e._v(" "),a("h3",{attrs:{id:"启动并设置开机启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动并设置开机启动"}},[e._v("#")]),e._v(" 启动并设置开机启动")]),e._v(" "),a("h3",{attrs:{id:"查看-keepalived-工作状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看-keepalived-工作状态"}},[e._v("#")]),e._v(" 查看 keepalived 工作状态")]),e._v(" "),a("p",[e._v("可以看到，在 ens33 网卡绑定了 192.168.31.88 虚拟 IP，说明工作正常。")]),e._v(" "),a("h3",{attrs:{id:"nginx-keepalived-高可用测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-keepalived-高可用测试"}},[e._v("#")]),e._v(" Nginx+Keepalived 高可用测试")]),e._v(" "),a("p",[e._v("关闭主节点 Nginx，测试 VIP 是否漂移到备节点服务器。"),a("br"),e._v("\n在 Nginx Master 执行 pkill nginx"),a("br"),e._v("\n在 Nginx Backup，ip addr 命令查看已成功绑定 VIP。")]),e._v(" "),a("h3",{attrs:{id:"访问负载均衡器测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问负载均衡器测试"}},[e._v("#")]),e._v(" 访问负载均衡器测试")]),e._v(" "),a("p",[e._v("找 K8s 集群中任意一个节点，使用 curl 查看 K8s 版本测试，使用 VIP 访问："),a("br"),e._v("\n可以正确获取到 K8s 版本信息，说明负载均衡器搭建正常。该请求数据流程：curl -> vip(nginx) -> apiserver"),a("br"),e._v("\n通过查看 Nginx 日志也可以看到转发 apiserver IP：")]),e._v(" "),a("h3",{attrs:{id:"修改所有-worker-node-连接-lb-vip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改所有-worker-node-连接-lb-vip"}},[e._v("#")]),e._v(" 修改所有 Worker Node 连接 LB VIP")]),e._v(" "),a("p",[e._v("试想下，虽然我们增加了 Master2 和负载均衡器，但是我们是从单 Master 架构扩容的，也"),a("br"),e._v("\n就是说目前所有的 Node 组件连接都还是 Master1，如果不改为连接 VIP 走负载均衡器，那"),a("br"),e._v("\n么 Master 还是单点故障。"),a("br"),e._v("\n因此接下来就是要改所有 Node 组件配置文件中的连接 apiserver IP："),a("br"),e._v("\n也就是通过 kubectl get node 命令查看到的节点。"),a("br"),e._v("\n在上述所有 Worker Node 执行：")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("yum "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" epel-release -y\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" nginx keepalived -y\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/nginx/nginx.conf "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"EOF"\nuser nginx; \nworker_processes auto; \nerror_log /var/log/nginx/error.log; \npid /run/nginx.pid; \ninclude /usr/share/nginx/modules/*.conf; \nevents {\nworker_connections 1024; \n}\n\n# 四层负载均衡，为两台 Master apiserver 组件提供负载均衡\n\nstream {\nlog_format main \'$remote_addr $upstream_addr - [$time_local] $status\n$upstream_bytes_sent\'; \naccess_log /var/log/nginx/k8s-access.log main; \nupstream k8s-apiserver {\nserver 192.168.31.71:6443; # Master1 APISERVER IP: PORT\nserver 192.168.31.74:6443; # Master2 APISERVER IP: PORT\n}\nserver {\nlisten 6443; \nproxy_pass k8s-apiserver; \n}\n}\nhttp {\nlog_format main \'$remote_addr - $remote_user [$time_local] "$request" \'\n\'$status $body_bytes_sent "$http_referer" \'\n\'"$http_user_agent" "$http_x_forwarded_for"\'; \naccess_log /var/log/nginx/access.log main; \nsendfile on; \ntcp_nopush on; \ntcp_nodelay on; \nkeepalive_timeout 65; \ntypes_hash_max_size 2048; \ninclude /etc/nginx/mime.types; \ndefault_type application/octet-stream; \nserver {\nlisten 80 default_server; \nserver_name _; \nlocation / {\n}\n}\n}\nEOF')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/keepalived/keepalived.conf "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('EOF\nglobal_defs {\nnotification_email {\nacassen@firewall.loc\nfailover@firewall.loc\nsysadmin@firewall.loc\n}\nnotification_email_from Alexandre. Cassen@firewall.loc\nsmtp_server 127.0.0.1\nsmtp_connect_timeout 30\nrouter_id NGINX_MASTER\n}\nvrrp_script check_nginx {\nscript "/etc/keepalived/check_nginx.sh"\n}\nvrrp_instance VI_1 {\nstate MASTER\ninterface ens33\nvirtual_router_id 51 # VRRP 路由 ID 实例，每个实例是唯一的\npriority 100 # 优先级，备服务器设置 90\nadvert_int 1 # 指定 VRRP 心跳包通告间隔时间，默认 1 秒\nauthentication {\nauth_type PASS\nauth_pass 1111\n}\n\n# 虚拟 IP\n\nvirtual_ipaddress {\n192.168.31.88/24\n}\ntrack_script {\ncheck_nginx\n}\n}\nEOF')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("/etc/keepalived/check_nginx.sh "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"EOF"\n#!/bin/bash\ncount=$(ps -ef |grep nginx |egrep -cv "grep|$$")\nif [ "$count" -eq 0 ]; then\nexit 1\nelse\nexit 0\nfi\nEOF')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x /etc/keepalived/check_nginx.sh\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/keepalived/keepalived.conf "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('EOF\nglobal_defs {\nnotification_email {\nacassen@firewall.loc\nfailover@firewall.loc\nsysadmin@firewall.loc\n}\nnotification_email_from Alexandre. Cassen@firewall.loc\nsmtp_server 127.0.0.1\nsmtp_connect_timeout 30\nrouter_id NGINX_BACKUP\n}\nvrrp_script check_nginx {\nscript "/etc/keepalived/check_nginx.sh"\n}\nvrrp_instance VI_1 {\nstate BACKUP\ninterface ens33\nvirtual_router_id 51 # VRRP 路由 ID 实例，每个实例是唯一的\npriority 90\nadvert_int 1\nauthentication {\nauth_type PASS\nauth_pass 1111\n}\nvirtual_ipaddress {\n192.168.31.88/24\n}\ntrack_script {\ncheck_nginx\n}\n}\nEOF')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("/etc/keepalived/check_nginx.sh "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"EOF"\n#!/bin/bash\ncount=$(ps -ef |grep nginx |egrep -cv "grep|$$")\nif [ "$count" -eq 0 ]; then\nexit 1\nelse\nexit 0\nfi\nEOF')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x /etc/keepalived/check_nginx.sh\nsystemctl daemon-reload\nsystemctl start nginx\nsystemctl start keepalived\nsystemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" nginx\nsystemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" keepalived\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ip")]),e._v(" a\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(": lo: "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("LOOPBACK, UP, LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("65536")]),e._v(" qdisc noqueue state UNKNOWN group\ndefault qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000")]),e._v("\nlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\ninet "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1/8 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("host")]),e._v(" lo\nvalid_lft forever preferred_lft forever\ninet6 ::1/128 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("host")]),e._v("\nvalid_lft forever preferred_lft forever\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(": ens33: "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("BROADCAST, MULTICAST, UP, LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1500")]),e._v(" qdisc pfifo_fast state UP\ngroup default qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000")]),e._v("\nlink/ether 00:0c:29:04:f7:2c brd ff:ff:ff:ff:ff:ff\ninet "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".31.80/24 brd "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".31.255 scope global noprefixroute ens33\nvalid_lft forever preferred_lft forever\ninet "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".31.88/24 scope global secondary ens33\nvalid_lft forever preferred_lft forever\ninet6 fe80::20c:29ff:fe04:f72c/64 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("link")]),e._v("\nvalid_lft forever preferred_lft forever\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -k https://192.168.31.88:6443/version\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"major"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1"')]),e._v(", \n"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"minor"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"18"')]),e._v(", \n"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"gitVersion"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"v1.18.3"')]),e._v(", \n"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"gitCommit"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2e7996e3e2712684bc73f0dec0200d64eec7fe40"')]),e._v(", \n"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"gitTreeState"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"clean"')]),e._v(", \n"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"buildDate"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2020-05-20T12:43:34Z"')]),e._v(", \n"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"goVersion"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"go1.13.9"')]),e._v(", \n"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"compiler"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"gc"')]),e._v(", \n"),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"platform"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"linux/amd64"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("tail")]),e._v(" /var/log/nginx/k8s-access.log -f\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".31.81 "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".31.71:6443 - "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("30")]),e._v("/May/2020:11:15:10 +0800"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("200")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("422")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".31.81 "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".31.74:6443 - "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("30")]),e._v("/May/2020:11:15:26 +0800"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("200")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("422")]),e._v("\n角色\nIP\nk8s-master1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".31.71\nk8s-master2\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".31.74\nk8s-node1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".31.72\nk8s-node2\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".31.73\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s#192.168.31.71:6443#192.168.31.88:6443#'")]),e._v(" /opt/kubernetes/cfg/*\nsystemctl restart kubelet\nsystemctl restart kube-proxy\nkubectl get node\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);