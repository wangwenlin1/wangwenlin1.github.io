(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{1258:function(a,e,s){"use strict";s.r(e);var v=s(19),_=Object(v.a)({},(function(){var a=this,e=a.$createElement,v=a._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"持久化之aof"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#持久化之aof"}},[a._v("#")]),a._v(" 持久化之AOF")]),a._v(" "),v("h2",{attrs:{id:"aof-append-only-file"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aof-append-only-file"}},[a._v("#")]),a._v(" AOF（Append Only File）")]),a._v(" "),v("h3",{attrs:{id:"是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[a._v("#")]),a._v(" 是什么")]),a._v(" "),v("p",[a._v("以"),v("strong",[a._v("日志")]),a._v("的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来("),v("strong",[a._v("读操作不记录")]),a._v(")， "),v("strong",[a._v("只许追加文件但不可以改写文件")]),a._v("，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作")]),a._v(" "),v("h3",{attrs:{id:"aof持久化流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aof持久化流程"}},[a._v("#")]),a._v(" AOF持久化流程")]),a._v(" "),v("p",[a._v("（1）客户端的请求写命令会被append追加到AOF缓冲区内；")]),a._v(" "),v("p",[a._v("（2）AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；")]),a._v(" "),v("p",[a._v("（3）AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；")]),a._v(" "),v("p",[a._v("（4）Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；")]),a._v(" "),v("p",[v("img",{attrs:{src:s(907),alt:""}})]),a._v(" "),v("h3",{attrs:{id:"aof默认不开启"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aof默认不开启"}},[a._v("#")]),a._v(" AOF默认不开启")]),a._v(" "),v("p",[a._v("可以在redis.conf中配置文件名称，默认为 appendonly.aof")]),a._v(" "),v("p",[a._v("AOF文件的保存路径，同RDB的路径一致。")]),a._v(" "),v("h3",{attrs:{id:"aof和rdb同时开启-redis听谁的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aof和rdb同时开启-redis听谁的"}},[a._v("#")]),a._v(" AOF和RDB同时开启，redis听谁的？")]),a._v(" "),v("p",[a._v("AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）")]),a._v(" "),v("h3",{attrs:{id:"aof启动-修复-恢复"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aof启动-修复-恢复"}},[a._v("#")]),a._v(" AOF启动/修复/恢复")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载。")])]),a._v(" "),v("li",[v("p",[a._v("正常恢复")])]),a._v(" "),v("li",[v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("  修改默认的appendonly no，改为yes\n")])])])]),a._v(" "),v("li",[v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("  将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)\n")])])])]),a._v(" "),v("li",[v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("  恢复：重启redis然后重新加载\n")])])])]),a._v(" "),v("li",[v("p",[a._v("异常恢复")])]),a._v(" "),v("li",[v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("  修改默认的appendonly no，改为yes\n")])])])]),a._v(" "),v("li",[v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("  如遇到***\\*AOF文件损坏\\****，通过/usr/local/bin/***\\*redis-check-aof--fix appendonly.aof\\****进行恢复\n")])])])]),a._v(" "),v("li",[v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("  备份被写坏的AOF文件\n")])])])]),a._v(" "),v("li",[v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("  恢复：重启redis，然后重新加载\n")])])])])]),a._v(" "),v("h3",{attrs:{id:"aof同步频率设置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aof同步频率设置"}},[a._v("#")]),a._v(" AOF同步频率设置")]),a._v(" "),v("p",[a._v("appendfsync always")]),a._v(" "),v("p",[a._v("始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好")]),a._v(" "),v("p",[a._v("appendfsync everysec")]),a._v(" "),v("p",[a._v("每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。")]),a._v(" "),v("p",[a._v("appendfsync no")]),a._v(" "),v("p",[a._v("redis不主动进行同步，把同步时机交给操作系统。")]),a._v(" "),v("h3",{attrs:{id:"rewrite压缩"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rewrite压缩"}},[a._v("#")]),a._v(" Rewrite压缩")]),a._v(" "),v("p",[a._v("1是什么：")]),a._v(" "),v("p",[a._v("AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof")]),a._v(" "),v("p",[a._v("2重写原理，如何实现重写")]),a._v(" "),v("p",[a._v("AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。")]),a._v(" "),v("p",[a._v("no-appendfsync-on-rewrite：")]),a._v(" "),v("p",[a._v("如果 no-appendfsync-on-rewrite=yes ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）")]),a._v(" "),v("p",[a._v("​\t如果 no-appendfsync-on-rewrite=no,  还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）")]),a._v(" "),v("p",[a._v("触发机制，何时重写")]),a._v(" "),v("p",[a._v("Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发")]),a._v(" "),v("p",[a._v("重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。")]),a._v(" "),v("p",[a._v("auto-aof-rewrite-percentage：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）")]),a._v(" "),v("p",[a._v("auto-aof-rewrite-min-size：设置重写的基准值，最小文件64MB。达到这个值开始重写。")]),a._v(" "),v("p",[a._v("例如：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB")]),a._v(" "),v("p",[a._v("系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,")]),a._v(" "),v("p",[a._v("如果Redis的AOF当前大小>= base_size +base_size*100% (默认)且当前大小>=64mb(默认)的情况下，Redis会对AOF进行重写。")]),a._v(" "),v("p",[a._v("3、重写流程")]),a._v(" "),v("p",[a._v("（1）bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。")]),a._v(" "),v("p",[a._v("（2）主进程fork出子进程执行重写操作，保证主进程不会阻塞。")]),a._v(" "),v("p",[a._v("（3）子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。")]),a._v(" "),v("p",[a._v("（4）1).子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。2).主进程把aof_rewrite_buf中的数据写入到新的AOF文件。")]),a._v(" "),v("p",[a._v("（5）使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。")]),a._v(" "),v("p",[v("img",{attrs:{src:s(908),alt:""}})]),a._v(" "),v("h3",{attrs:{id:"优势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[a._v("#")]),a._v(" 优势")]),a._v(" "),v("p",[v("img",{attrs:{src:s(909),alt:""}})]),a._v(" "),v("ul",[v("li",[v("p",[a._v("备份机制更稳健，丢失数据概率更低。")])]),a._v(" "),v("li",[v("p",[a._v("可读的日志文本，通过操作AOF稳健，可以处理误操作。")])])]),a._v(" "),v("h3",{attrs:{id:"劣势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#劣势"}},[a._v("#")]),a._v(" 劣势")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("比起RDB占用更多的磁盘空间。")])]),a._v(" "),v("li",[v("p",[a._v("恢复备份速度要慢。")])]),a._v(" "),v("li",[v("p",[a._v("每次读写都同步的话，有一定的性能压力。")])]),a._v(" "),v("li",[v("p",[a._v("存在个别Bug，造成恢复不能。")])])]),a._v(" "),v("h3",{attrs:{id:"小总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#小总结"}},[a._v("#")]),a._v(" 小总结")]),a._v(" "),v("p",[v("img",{attrs:{src:s(910),alt:""}})]),a._v(" "),v("h2",{attrs:{id:"总结-which-one"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结-which-one"}},[a._v("#")]),a._v(" 总结(Which one)")]),a._v(" "),v("h3",{attrs:{id:"用哪个好"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#用哪个好"}},[a._v("#")]),a._v(" 用哪个好")]),a._v(" "),v("p",[a._v("官方推荐两个都启用。")]),a._v(" "),v("p",[a._v("如果对数据不敏感，可以选单独用RDB。")]),a._v(" "),v("p",[a._v("不建议单独用 AOF，因为可能会出现Bug。")]),a._v(" "),v("p",[a._v("如果只是做纯内存缓存，可以都不用。")]),a._v(" "),v("h3",{attrs:{id:"官网建议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#官网建议"}},[a._v("#")]),a._v(" 官网建议")]),a._v(" "),v("p",[v("img",{attrs:{src:s(911),alt:""}})]),a._v(" "),v("ul",[v("li",[v("p",[a._v("RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储")])]),a._v(" "),v("li",[v("p",[a._v("AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.")])]),a._v(" "),v("li",[v("p",[a._v("Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大")])]),a._v(" "),v("li",[v("p",[a._v("只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.")])]),a._v(" "),v("li",[v("p",[a._v("同时开启两种持久化方式")])]),a._v(" "),v("li",[v("p",[a._v("在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据, 因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.")])]),a._v(" "),v("li",[v("p",[a._v("RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？")])]),a._v(" "),v("li",[v("p",[a._v("建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。")])]),a._v(" "),v("li",[v("p",[a._v("性能建议")])])]),a._v(" "),v("p",[a._v("因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。 如果使用AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。代价,一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。")])])}),[],!1,null,null,null);e.default=_.exports},907:function(a,e,s){a.exports=s.p+"assets/img/2021-05-15-09-01-09.aba61b91.png"},908:function(a,e,s){a.exports=s.p+"assets/img/2021-05-15-09-03-53.66f0fb88.png"},909:function(a,e,s){a.exports=s.p+"assets/img/2021-05-15-09-04-09.fa858b7b.png"},910:function(a,e,s){a.exports=s.p+"assets/img/2021-05-15-09-04-48.cfc17dcd.png"},911:function(a,e,s){a.exports=s.p+"assets/img/2021-05-15-09-05-30.cfc97fc0.png"}}]);