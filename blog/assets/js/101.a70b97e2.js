(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{1158:function(t,n,a){"use strict";a.r(n);var s=a(19),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"代码包和包引入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码包和包引入"}},[t._v("#")]),t._v(" 代码包和包引入")]),t._v(" "),a("p",[t._v("和很多现代编程语言一样，Go代码包（package）来组织管理代码。 我们必须先引入一个代码包（除了 "),a("code",[t._v("builtin")]),t._v(" 标准库包）才能使用其中导出的资源（比如函数、类型、变量和有名常量等）。 此篇文章将讲解Go代码包和代码包引入（import）。")]),t._v(" "),a("h2",{attrs:{id:"包引入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包引入"}},[t._v("#")]),t._v(" 包引入")]),t._v(" "),a("p",[t._v("下面这个简短的程序（假设它存在一个名为 "),a("code",[t._v("simple-import-demo.go")]),t._v(" 的源文件中）引入了一个标准库包。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go has"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"keywords."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("对此程序的一些解释：")]),t._v(" "),a("ul",[a("li",[t._v("第一行指定了源文件"),a("code",[t._v("simple-import-demo.go")]),t._v("所处的包名为"),a("code",[t._v("main")]),t._v("。 程序入口"),a("code",[t._v("main")]),t._v("函数必须处于一个名为"),a("code",[t._v("main")]),t._v("的代码包中。")]),t._v(" "),a("li",[t._v("第三行通过使用"),a("code",[t._v("import")]),t._v("关键字引入了"),a("code",[t._v("fmt")]),t._v("标准库包。 在此源文件中，"),a("code",[t._v("fmt")]),t._v("标准库包将用"),a("code",[t._v("fmt")]),t._v("标识符来表示。 标识符"),a("code",[t._v("fmt")]),t._v("称为"),a("code",[t._v("fmt")]),t._v("标准库包的引入名称。（后续某节将详述代码包的引入名称）。")]),t._v(" "),a("li",[a("code",[t._v("fmt")]),t._v("标准库包中声明了很多终端打印函数供其它代码包使用。 "),a("code",[t._v("Println")]),t._v("函数是其中之一。 它可以将不定数量参数的字符串表示形式输出到标准输出中。 第六行调用了此"),a("code",[t._v("Println")]),t._v("函数。 注意在此调用中，函数名之前需要带上前缀"),a("code",[t._v("fmt.")]),t._v("，其中"),a("code",[t._v("fmt")]),t._v("是"),a("code",[t._v("Println")]),t._v("函数所处的代码包的引入名称。 "),a("code",[t._v("aImportName. AnExportedIdentifier")]),t._v("这种形式称为一个限定标识符（"),a("a",{attrs:{href:"https://golang.google.cn/ref/spec#Qualified_identifiers",target:"_blank",rel:"noopener noreferrer"}},[t._v("qualified identifier"),a("OutboundLink")],1),t._v("）。")]),t._v(" "),a("li",[a("code",[t._v("fmt. Println")]),t._v("函数调用接受任意数量的实参并且对实参的类型没有任何限制。 所以此程序中的此函数调用的三个实参的类型将被推断为它们各自的默认类型："),a("code",[t._v("string")]),t._v("、"),a("code",[t._v("int")]),t._v("和"),a("code",[t._v("string")]),t._v("。")]),t._v(" "),a("li",[t._v("对于一个"),a("code",[t._v("fmt. Println")]),t._v("函数调用，任何两个相邻的实参的输出之间将被插入一个空格字符，并且在最后将输出一个空行字符。")])]),t._v(" "),a("p",[t._v("下面是上面这个程序的运行结果：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n$ go run simple-import-demo.go\nGo has 25 keywords.\n")])])]),a("p",[t._v("当一个代码包被引入一个Go源文件时，只有此代码包中的"),a("a",{attrs:{href:"https://gfw.go101.org/article/keywords-and-identifiers.html#identifier",target:"_blank",rel:"noopener noreferrer"}},[t._v("导出"),a("OutboundLink")],1),t._v("资源（名称为大写字母的变量、常量、函数、定义类型和类型别名等）可以在此源文件被使用。 比如上例中的 "),a("code",[t._v("Println")]),t._v(" 函数即为一个导出资源，所以它可以在上面的程序源文件中使用。")]),t._v(" "),a("p",[t._v("前面几篇文章中使用的内置函数 "),a("code",[t._v("print")]),t._v(" 和 "),a("code",[t._v("println")]),t._v(" 提供了和 "),a("code",[t._v("fmt")]),t._v(" 标准库包中的对应函数相似的功能。 内置函数可以不用引入任何代码包而直接使用。")]),t._v(" "),a("p",[t._v("注意： "),a("code",[t._v("print")]),t._v(" 和 "),a("code",[t._v("println")]),t._v(" 这两个内置函数不推荐使用在生产环境，因为它们不保证一定会出现在以后的Go版本中。")]),t._v(" "),a("p",[t._v("我们可以访问"),a("a",{attrs:{href:"https://golang.org/pkg/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go官网"),a("OutboundLink")],1),t._v("（"),a("a",{attrs:{href:"https://golang.google.cn/pkg/",target:"_blank",rel:"noopener noreferrer"}},[t._v("墙内版"),a("OutboundLink")],1),t._v("）来查看各个标准库包的文档， 我们也可以"),a("a",{attrs:{href:"https://gfw.go101.org/article/go-toolchain.html#doc",target:"_blank",rel:"noopener noreferrer"}},[t._v("开启一个本地文档服务器"),a("OutboundLink")],1),t._v("来查看这些文档。")]),t._v(" "),a("p",[t._v("一个包引入也可称为一个包声明。一个包声明只在当前包含此声明的源文件内可见。")]),t._v(" "),a("p",[t._v("另外一个例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"math/rand"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"下一个伪随机数总是%v。\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Uint32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这个例子多引入了一个 "),a("code",[t._v("math/rand")]),t._v(" 标准库包。 此包是 "),a("code",[t._v("math")]),t._v(" 标准库包中的一个子包。 此包提供了一些函数来产生伪随机数序列。")]),t._v(" "),a("p",[t._v("一些解释：")]),t._v(" "),a("ul",[a("li",[t._v("在此例中，"),a("code",[t._v("math/rand")]),t._v("标准库包的引入名是"),a("code",[t._v("rand")]),t._v("。 "),a("code",[t._v("rand. Uint32()")]),t._v("函数调用将返回一个"),a("code",[t._v("uint32")]),t._v("类型的随机数。")]),t._v(" "),a("li",[a("code",[t._v("Printf")]),t._v("函数是"),a("code",[t._v("fmt")]),t._v("标准库包中提供的另外一个常用终端打印函数。 一个"),a("code",[t._v("Printf")]),t._v("函数调用必须带有至少一个实参，并且第一个实参的类型必须为"),a("code",[t._v("string")]),t._v("。 此第一个实参指定了此调用的打印格式。此格式中的"),a("code",[t._v("%v")]),t._v("在打印结果将被对应的后续实参的字符串表示形式所取代。 比如上列中的"),a("code",[t._v("%v")]),t._v("在打印结果中将被"),a("code",[t._v("rand. Uint32()")]),t._v("函数调用所返回的随机数所取代。 打印格式中的"),a("code",[t._v("\\n")]),t._v("表示一个换行符，这在"),a("a",{attrs:{href:"https://gfw.go101.org/article/basic-types-and-value-literals.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("基本类型和它们的字面量表示"),a("OutboundLink")],1),t._v("一文中已经解释过。")])]),t._v(" "),a("p",[t._v("上面这个程序的输出如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n下一个伪随机数总是2596996162。\n")])])]),a("p",[t._v("如果我们希望上面的程序每次运行的时候输出一个不同的随机数，我们需要在程序启动的时候使用调用 "),a("code",[t._v("rand.Seed")]),t._v(" 函数来设置一个不同的随机数种子。")]),t._v(" "),a("p",[t._v("多个包引入语句可以用一对小括号来合并成一个包引入语句。比如下面这例。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一条包引入语句引入了三个代码包。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"math/rand"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"time"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\trand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Seed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UnixNano")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置随机数种子")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"下一个伪随机数总是%v。\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rand"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Uint32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("一些解释：")]),t._v(" "),a("ul",[a("li",[t._v("此例多引入了一个"),a("code",[t._v("time")]),t._v("标准库包。 此包提供了很多和时间相关的函数和类型。 其中"),a("code",[t._v("time. Time")]),t._v("和"),a("code",[t._v("time. Duration")]),t._v("是两个最常用的类型。")]),t._v(" "),a("li",[t._v("函数调用"),a("code",[t._v("time. Now()")]),t._v("将返回一个表示当前时间的类型为"),a("code",[t._v("time. Time")]),t._v("的值。")]),t._v(" "),a("li",[a("code",[t._v("UnixNano")]),t._v("是类型"),a("code",[t._v("time. Time")]),t._v("的一个方法。 我们可以把方法看作是特殊的函数。方法将在"),a("a",{attrs:{href:"https://gfw.go101.org/article/method.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go中的方法"),a("OutboundLink")],1),t._v("一文中详述。 方法调用"),a("code",[t._v("aTime. UnixNano()")]),t._v("将返回从UTC时间的1970年一月一日到"),a("code",[t._v("aTime")]),t._v("所表示的时间之间的纳秒数。 返回结果的类型为"),a("code",[t._v("int64")]),t._v("。 在上例中，此方法调用的结果用来设置随机数种子。")])]),t._v(" "),a("h2",{attrs:{id:"更多关于-fmt-printf-函数调用的输出格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更多关于-fmt-printf-函数调用的输出格式"}},[t._v("#")]),t._v(" 更多关于 "),a("code",[t._v("fmt.Printf")]),t._v(" 函数调用的输出格式")]),t._v(" "),a("p",[t._v("从上面的例子中，我们已经了解到 "),a("code",[t._v("fmt.Printf")]),t._v(" 函数调用的第一个实参中的 "),a("code",[t._v("%v")]),t._v(" 在输出中将替换为后续的实参的字符串表示形式。 实际上，这种百分号开头的占位字符组合还有很多。下面是一些常用的占位字符组合：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("%v")]),t._v("：将被替换为对应实参字符串表示形式。")]),t._v(" "),a("li",[a("code",[t._v("%T")]),t._v("：将替换为对应实参的类型的字符串表示形式。")]),t._v(" "),a("li",[a("code",[t._v("%x")]),t._v("：将替换为对应实参的十六进制表示。实参的类型可以为字符串、整数、整数数组（array）或者整数切片（slice）等。 （数组和切片将在以后的文章中讲解。）")]),t._v(" "),a("li",[a("code",[t._v("%s")]),t._v("：将被替换为对应实参的字符串表示形式。实参的类型必须为字符串或者字节切片（byte slice）类型。")]),t._v(" "),a("li",[a("code",[t._v("%%")]),t._v("：将被替换为一个百分号。")])]),t._v(" "),a("p",[t._v("一个例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ta"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go"')]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a == %v == 0x%x, b == %s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type of a: %T, type of b: %T\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("输出：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\na == 123 == 0x7b, b == Go\ntype of a: int, type of b: string\n1% 50% 99%\n")])])]),a("p",[t._v("请阅读"),a("a",{attrs:{href:"https://golang.google.cn/pkg/fmt/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("fmt")]),t._v(" 标准库包的文档"),a("OutboundLink")],1),t._v("以了解更多的占位字符组合。 我们也可以运行 "),a("code",[t._v("go doc fmt")]),t._v(" 命令来在终端中查看 "),a("code",[t._v("fmt")]),t._v(" 标准库包的文档。 运行 "),a("code",[t._v("go doc fmt.Printf")]),t._v(" 命令可以查看 "),a("code",[t._v("fmt.Printf")]),t._v(" 函数的文档。")]),t._v(" "),a("h2",{attrs:{id:"代码包目录、代码包引入路径和代码包依赖关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码包目录、代码包引入路径和代码包依赖关系"}},[t._v("#")]),t._v(" 代码包目录、代码包引入路径和代码包依赖关系")]),t._v(" "),a("p",[t._v("一个代码包可以由若干Go源文件组成。一个代码包的源文件须都处于同一个目录下。 一个目录（不包含子目录）下的所有源文件必须都处于同一个代码包中，亦即这些源文件开头的 "),a("code",[t._v("package pkgname")]),t._v(" 语句必须一致。 所以，一个代码包对应着一个目录（不包含子目录），反之亦然。 对应着一个代码包的目录称为此代码包的目录。 一个代码包目录下的每个子目录对应的都是另外一个独立的代码包。")]),t._v(" "),a("p",[t._v("对于Go官方工具链来说，一个引入路径中包含有 "),a("code",[t._v("internal")]),t._v(" 目录名的代码包被视为一个特殊的代码包。 它只能被此 "),a("code",[t._v("internal")]),t._v(" 目录的直接父目录（和此父目录的子目录）中的代码包所引入。 比如，代码包 "),a("code",[t._v(".../a/b/c/internal/d/e/f")]),t._v(" 和 "),a("code",[t._v(".../a/b/c/internal")]),t._v(" 只能被引入路径含有 "),a("code",[t._v(".../a/b/c")]),t._v(" 前缀的代码包引入。")]),t._v(" "),a("p",[t._v("当一个代码包中的某个文件引入了另外一个代码包，则我们说前者代码包依赖于后者代码包。")]),t._v(" "),a("p",[t._v("Go不支持循环引用（依赖）。 如果一个代码包 "),a("code",[t._v("a")]),t._v(" 依赖于代码包 "),a("code",[t._v("b")]),t._v(" ，同时代码包 "),a("code",[t._v("b")]),t._v(" 依赖于代码包 "),a("code",[t._v("c")]),t._v(" ，则代码包 "),a("code",[t._v("c")]),t._v(" 中的源文件不能引入代码包 "),a("code",[t._v("a")]),t._v(" 和代码包 "),a("code",[t._v("b")]),t._v(" ，代码包 "),a("code",[t._v("b")]),t._v(" 中的源文件也不能引入代码包 "),a("code",[t._v("a")]),t._v(" 。")]),t._v(" "),a("p",[t._v("当然，一个代码包中的源文件不能也没必要引入此代码包本身。")]),t._v(" "),a("p",[t._v("和包依赖类似，一个模块也可能依赖于一些其它模块。 此模块的直接依赖模块和这些依赖模块的版本在此模块中的 "),a("code",[t._v("go.mod")]),t._v(" 文件中指定。 模块循环依赖是允许的，但模块循环依赖这种情况在实践中很少见。")]),t._v(" "),a("p",[t._v("今后，我们称一个程序中含有 "),a("code",[t._v("main")]),t._v(" 入口函数的名称为 "),a("code",[t._v("main")]),t._v(" 的代码包为程序代码包（或者命令代码包），称其它代码包为库代码包。 程序代码包不能被其它代码包引入。一个程序只能有一个程序代码包。")]),t._v(" "),a("p",[t._v("代码包目录的名称并不要求一定要和其对应的代码包的名称相同。 但是，库代码包目录的名称最好设为和其对应的代码包的名称相同。 因为一个代码包的引入路径中包含的是此包的目录名，但是此包的默认引入名为此包的名称。 如果两者不一致，会使人感到困惑。")]),t._v(" "),a("p",[t._v("另一方面，最好给每个程序代码包目录指定一个有意义的名字，而不是它的包名 "),a("code",[t._v("main")]),t._v(" 。")]),t._v(" "),a("h2",{attrs:{id:"init-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-函数"}},[t._v("#")]),t._v(" "),a("code",[t._v("init")]),t._v(" 函数")]),t._v(" "),a("p",[t._v("在一个代码包中，甚至一个源文件中，可以声明若干名为 "),a("code",[t._v("init")]),t._v(" 的函数。 这些 "),a("code",[t._v("init")]),t._v(" 函数必须不带任何输入参数和返回结果。")]),t._v(" "),a("p",[t._v("注意：我们不能声明名为 "),a("code",[t._v("init")]),t._v(" 的包级变量、常量或者类型。")]),t._v(" "),a("p",[t._v("在程序运行时刻，在进入 "),a("code",[t._v("main")]),t._v(" 入口函数之前，每个 "),a("code",[t._v("init")]),t._v(" 函数在此包加载的时候将被（串行）执行并且只执行一遍。")]),t._v(" "),a("p",[t._v("下面这个简单的程序中有两个 "),a("code",[t._v("init")]),t._v(" 函数：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi,"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bye"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello,"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" smith"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("titledName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("who "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mr. "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" who\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bob"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" smith "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("titledName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("titledName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Smith"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("此程序的运行结果：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\nhi, Mr. Bob\nhello, Mr. Smith\nbye\n")])])]),a("h2",{attrs:{id:"程序资源初始化顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序资源初始化顺序"}},[t._v("#")]),t._v(" 程序资源初始化顺序")]),t._v(" "),a("p",[t._v("一个程序中所涉及到的所有的在运行时刻要用到的代码包的加载是串行执行的。 在一个程序启动时，每个包中总是在它所有依赖的包都加载完成之后才开始加载。 程序代码包总是最后一个被加载的代码包。每个被用到的包会被而且仅会被加载一次。")]),t._v(" "),a("p",[t._v("在加载一个代码包的过程中，所有的声明在此包中的 "),a("code",[t._v("init")]),t._v(" 函数将被串行调用并且仅调用执行一次。 一个代码包中声明的 "),a("code",[t._v("init")]),t._v(" 函数的调用肯定晚于此代码包所依赖的代码包中声明的 "),a("code",[t._v("init")]),t._v(" 函数。 所有的 "),a("code",[t._v("init")]),t._v(" 函数都将在调用 "),a("code",[t._v("main")]),t._v(" 入口函数之前被调用执行。")]),t._v(" "),a("p",[t._v("在同一个源文件中声明的 "),a("code",[t._v("init")]),t._v(" 函数将按从上到下的顺序被调用执行。 对于声明在同一个包中的两个不同源文件中的两个 "),a("code",[t._v("init")]),t._v(" 函数，Go语言白皮书推荐（但不强求）按照它们所处于的源文件的名称的词典序列（对英文来说，即字母顺序）来调用。 所以最好不要让声明在同一个包中的两个不同源文件中的两个 "),a("code",[t._v("init")]),t._v(" 函数存在依赖关系。")]),t._v(" "),a("p",[t._v("在加载一个代码包的时候，此代码包中声明的所有包级变量都将在此包中的任何一个 "),a("code",[t._v("init")]),t._v(" 函数执行之前初始化完毕。")]),t._v(" "),a("p",[t._v("在同一个包内，包级变量将尽量按照它们在代码中的出现顺序被初始化，但是一个包级变量的初始化肯定晚于它所依赖的其它包级变量。 比如，在下面的代码片段中，四个包级变量的初始化顺序依次为 "),a("code",[t._v("y")]),t._v(" 、 "),a("code",[t._v("z")]),t._v(" 、 "),a("code",[t._v("x")]),t._v(" 、 "),a("code",[t._v("w")]),t._v(" 。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tw       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x\n\tx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("关于更具体的包级变量的初始化顺序，请阅读"),a("a",{attrs:{href:"https://gfw.go101.org/article/evaluation-orders.html#package-level-variables",target:"_blank",rel:"noopener noreferrer"}},[t._v("表达式估值顺序规则"),a("OutboundLink")],1),t._v("一文。")]),t._v(" "),a("h2",{attrs:{id:"完整的引入声明语句形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完整的引入声明语句形式"}},[t._v("#")]),t._v(" 完整的引入声明语句形式")]),t._v(" "),a("p",[t._v("事实上，一个引入声明语句的完整形式为：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" importname "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"path/to/package"')]),t._v("\n")])])]),a("p",[t._v("其中引入名 "),a("code",[t._v("importname")]),t._v(" 是可选的，它的默认值为被引入的包的包名（不是目录名）。")]),t._v(" "),a("p",[t._v("事实上，在本文上面的例子中的包引入声明中， "),a("code",[t._v("importname")]),t._v(" 部分都被省略掉了，因为它们都分别和引入的代码包的包名相同。 这些引入声明等价于下面这些：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" fmt "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// <=> import "fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" rand "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"math/rand"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// <=> import "math/rand"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" time "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"time"')]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// <=> import "time"')]),t._v("\n")])])]),a("p",[t._v("如果一个包引入声明中的 "),a("code",[t._v("importname")]),t._v(" 没有省略，则限定标识符使用的前缀必须为 "),a("code",[t._v("importname")]),t._v(" ，而不是被引入的包的名称。")]),t._v(" "),a("p",[t._v("引入声明语句的完整形式在日常编程中使用的频率不是很高。 但是在某些情况下，完整形式必须被使用。 比如，如果一个源文件引入的两个代码包的包名一样，为了防止使编译器产生困惑，我们至少需要用完整形式为其中一个包指定一个不同的引入名以区分这两个包。")]),t._v(" "),a("p",[t._v("下面是一个使用了完整引入声明语句形式的例子。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tformat "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\trandom "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"math/rand"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"time"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\trandom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Seed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UnixNano")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tformat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"一个随机数:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" random"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Uint32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面这两行编译不通过，因为rand不可识别。")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n\trand.Seed(time.Now().UnixNano())\n\tfmt.Print("一个随机数:", rand.Uint32(), "\\n")\n\t*/')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("一些解释：")]),t._v(" "),a("ul",[a("li",[t._v("我们必须使用"),a("code",[t._v("format")]),t._v("和"),a("code",[t._v("random")]),t._v("，而不是"),a("code",[t._v("fmt")]),t._v("和"),a("code",[t._v("rand")]),t._v("，来做为限定标识符的前缀。")]),t._v(" "),a("li",[a("code",[t._v("Print")]),t._v("是"),a("code",[t._v("fmt")]),t._v("标准库包中的另外一个函数。 和"),a("code",[t._v("Println")]),t._v("函数调用一样，一个"),a("code",[t._v("Print")]),t._v("函数调用也接受任意数量实参。 它将逐个打印出每个实参的字符串表示形式。如果相邻的两个实参都不是字符串类型，则在它们中间会打印一个空格字符。")])]),t._v(" "),a("p",[t._v("一个完整引入声明语句形式的引入名 "),a("code",[t._v("importname")]),t._v(" 可以是一个句点( "),a("code",[t._v(".")]),t._v(" )。 这样的引入称为句点引入。使用被句点引入的包中的导出资源时，限定标识符的前缀必须省略。")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"time"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Current time:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在上面这个例子中， "),a("code",[t._v("Println")]),t._v(" 和 "),a("code",[t._v("Now")]),t._v(" 函数调用不需要带任何前缀。")]),t._v(" "),a("p",[t._v("一般来说，句点引入不推荐使用，因为它们会导致较低的代码可读性。")]),t._v(" "),a("p",[t._v("一个完整引入声明语句形式的引入名 "),a("code",[t._v("importname")]),t._v(" 可以是一个空标识符( "),a("code",[t._v("_")]),t._v(" )。 这样的引入称为匿名引入。一个包被匿名引入的目的主要是为了加载这个包，从而使得这个包中的资源得以初始化。 被匿名引入的包中的 "),a("code",[t._v("init")]),t._v(" 函数将被执行并且仅执行一遍。")]),t._v(" "),a("p",[t._v("在下面这个例子中，"),a("a",{attrs:{href:"https://golang.google.cn/pkg/net/http/pprof/",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("net/http/pprof")]),t._v(" 标准库包"),a("OutboundLink")],1),t._v("中的所有 "),a("code",[t._v("init")]),t._v(" 函数将在 "),a("code",[t._v("main")]),t._v(" 入口函数开始执行之前全部执行一遍。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"net/http/pprof"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 做一些事情")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"每个非匿名引入必须至少被使用一次"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#每个非匿名引入必须至少被使用一次"}},[t._v("#")]),t._v(" 每个非匿名引入必须至少被使用一次")]),t._v(" "),a("p",[t._v("除了匿名引入，其它引入必须在代码中被使用一次。 比如，下面的程序编译不通过。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"net/http"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: 引入未被使用")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"time"')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: 引入未被使用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tformat "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// okay: 下面被使用了一次")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"math/rand"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// okay: 匿名引入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tformat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 使用"fmt"包')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块"}},[t._v("#")]),t._v(" 模块")]),t._v(" "),a("p",[t._v("一个模块（module）为的若干代码包的集合。当被下载至本地后，这些代码包处于同一个目录（此模块的根目录）下。 一个模块可以有很多版本（版本号遵从"),a("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Semantic Versioning"),a("OutboundLink")],1),t._v("规范）。 更多关于模块的概念和使用，请阅读"),a("a",{attrs:{href:"https://golang.google.cn/ref/mod",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),a("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);n.default=e.exports}}]);