(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{1160:function(o,t,a){"use strict";a.r(t);var v=a(19),e=Object(v.a)({},(function(){var o=this,t=o.$createElement,a=o._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[a("h1",{attrs:{id:"go官方链接工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go官方链接工具"}},[o._v("#")]),o._v(" GO官方链接工具")]),o._v(" "),a("p",[a("a",{attrs:{href:"https://golang.google.cn/doc/install",target:"_blank",rel:"noopener noreferrer"}},[o._v("官方下载"),a("OutboundLink")],1)]),o._v(" "),a("h2",{attrs:{id:"安装go官方工具链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装go官方工具链"}},[o._v("#")]),o._v(" 安装Go官方工具链")]),o._v(" "),a("h3",{attrs:{id:"环境变量-gopath"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境变量-gopath"}},[o._v("#")]),o._v(" 环境变量：GOPATH")]),o._v(" "),a("p",[o._v("此环境变量的默认值为当前用户的HOME目录下的名为go文件夹对应的目录路径。GOPATH环境变量可以被手动地配置多个路径。以后，当GOPATH文件夹被提及的时候，它表示GOPATH环境变量中的第一个路径对应的文件夹。")]),o._v(" "),a("p",[o._v("目录结构：")]),o._v(" "),a("ul",[a("li",[o._v("src：存放源代码")]),o._v(" "),a("li",[o._v("pkg: 缓存别本地项目所依赖的Go模块（一个Go模块为若干Go库包的集合）")]),o._v(" "),a("li",[o._v("bin: 存放"),a("code",[o._v("go install")]),o._v("命令产生的二进制文件")])]),o._v(" "),a("p",[o._v("查看：")]),o._v(" "),a("ul",[a("li",[o._v("使用命令 "),a("code",[o._v("go env")])])]),o._v(" "),a("h2",{attrs:{id:"最简单的go程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最简单的go程序"}},[o._v("#")]),o._v(" 最简单的Go程序")]),o._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[o._v("package")]),o._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[o._v("import")]),o._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[o._v('"fmt"')]),o._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[o._v("func")]),o._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[o._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v(")")]),o._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v("{")]),o._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[o._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[o._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v(")")]),o._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[o._v("}")]),o._v("\n")])])]),a("ul",[a("li",[o._v("第一行指定了当前源代码文件所处的包的包名（此处为main）。")]),o._v(" "),a("li",[o._v("第二行是一个空行，用来增强可读性。")]),o._v(" "),a("li",[o._v("第三和第四行声明了一个名为main的函数。 此函数为程序的入口函数。")])]),o._v(" "),a("h3",{attrs:{id:"运行一个go程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行一个go程序"}},[o._v("#")]),o._v(" 运行一个Go程序")]),o._v(" "),a("p",[o._v("打开一个终端（控制台）并进入源文件所在的目录，然后运行")]),o._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[o._v("go run main.go\n")])])]),a("ul",[a("li",[a("p",[a("code",[o._v("go run")]),o._v("子命令并不推荐在正式的大项目中使用。"),a("code",[o._v("go run")]),o._v("子命令只是一种方便的方式来运行简单的Go程序。 对于正式的项目，最好使用"),a("code",[o._v("go build")]),o._v("或者"),a("code",[o._v("go install")]),o._v("子命令构建可执行程序文件来运行Go程序。")])]),o._v(" "),a("li",[a("p",[o._v("支持Go模块特性的Go项目的根目录下需要一个 "),a("code",[o._v("go.mod")]),o._v(" 文件。此文件可以使用 "),a("code",[o._v("go mod init")]),o._v(" 子命令来生成（见下）。")])])]),o._v(" "),a("h2",{attrs:{id:"更多go子命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更多go子命令"}},[o._v("#")]),o._v(" 更多go子命令")]),o._v(" "),a("p",[a("code",[o._v("go vet")]),o._v(" 子命令可以用来检查可能的代码逻辑错误（即警告）。"),a("br"),o._v(" "),a("code",[o._v("go fmt")]),o._v(" 子命令来用同一种代码风格格式化Go代码。"),a("br"),o._v(" "),a("code",[o._v("go test")]),o._v(" 子命令来运行单元和基准测试用例。"),a("br"),o._v(" "),a("code",[o._v("go doc")]),o._v(" 子命令来（在终端中）查看Go代码库包的文档。")]),o._v(" "),a("p",[o._v("强烈推荐让你的Go项目支持Go模块特性来简化依赖管理。对一个支持Go模块特性的项目：")]),o._v(" "),a("ul",[a("li",[a("code",[o._v("go mod init example.com/myproject")]),o._v("命令可以用来在当前目录中生成一个"),a("code",[o._v("go.mod")]),o._v("文件。 当前目录将被视为一个名为"),a("code",[o._v("example.com/myproject")]),o._v("的模块（即当前项目）的根目录。 此"),a("code",[o._v("go.mod")]),o._v("文件将被用来记录当前项目需要的依赖模块和版本信息。 我们可以手动编辑或者使用"),a("code",[o._v("go")]),o._v("子命令来修改此文件。")]),o._v(" "),a("li",[a("code",[o._v("go mod tidy")]),o._v("命令用来通过扫描当前项目中的所有代码来添加未被记录的依赖至"),a("code",[o._v("go.mod")]),o._v("文件或从"),a("code",[o._v("go.mod")]),o._v("文件中删除不再被使用的依赖。")]),o._v(" "),a("li",[a("code",[o._v("go get")]),o._v("命令用拉添加、升级、降级或者删除单个依赖。此命令不如"),a("code",[o._v("go mod tidy")]),o._v("命令常用。")])]),o._v(" "),a("p",[o._v("从Go官方工具链1.16版本开始，我们可以运行 "),a("code",[o._v("go install example.com/program@latest")]),o._v(" 来安装一个第三方Go程序的最新版本（至 "),a("code",[o._v("GOBIIN")]),o._v(" 目录）。 在Go官方工具链1.16版本之前，对应的命令是 "),a("code",[o._v("go get -u example.com/program")]),o._v(" （现在已经被废弃而不再推荐被使用了）。")])])}),[],!1,null,null,null);t.default=e.exports}}]);