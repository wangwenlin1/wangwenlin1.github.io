(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{1097:function(e,t,a){e.exports=a.p+"assets/img/image-20210418123921669.887eec62.png"},1294:function(e,t,a){"use strict";a.r(t);var s=a(19),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"集群搭建-kubeadm-方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集群搭建-kubeadm-方式"}},[e._v("#")]),e._v(" 集群搭建(kubeadm 方式)")]),e._v(" "),s("h2",{attrs:{id:"前置知识点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前置知识点"}},[e._v("#")]),e._v(" 前置知识点")]),e._v(" "),s("p",[e._v("目前生产部署 Kubernetes 集群主要有两种方式：")]),e._v(" "),s("ul",[s("li",[e._v("kubeadm")])]),e._v(" "),s("p",[e._v("Kubeadm 是一个 K8s 部署工具，提供 kubeadm init 和 kubeadm join，用于快速部署 Kubernetes 集群。")]),e._v(" "),s("p",[e._v("官方地址：https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/")]),e._v(" "),s("ul",[s("li",[e._v("二进制包")])]),e._v(" "),s("p",[e._v("从 github 下载发行版的二进制包，手动部署每个组件，组成 Kubernetes 集群。Kubeadm 降低部署门槛，但屏蔽了很多细节，遇到问题很难排查。如果想更容易可控，推荐使用二进制包部署 Kubernetes 集群，虽然手动部署麻烦点，期间可以学习很多工作原理，也利于后期维护。")]),e._v(" "),s("h2",{attrs:{id:"kubeadm-部署方式介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kubeadm-部署方式介绍"}},[e._v("#")]),e._v(" kubeadm 部署方式介绍")]),e._v(" "),s("p",[e._v("kubeadm 是官方社区推出的一个用于快速部署 kubernetes 集群的工具，这个工具能通过两条指令完成一个 kubernetes 集群的部署：")]),e._v(" "),s("p",[e._v("第一、创建一个 Master 节点 kubeadm init")]),e._v(" "),s("p",[e._v("第二， 将 Node 节点加入到当前集群中")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v(" kubeadm "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("Master 节点的 IP 和端口 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),s("h2",{attrs:{id:"安装要求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装要求"}},[e._v("#")]),e._v(" 安装要求")]),e._v(" "),s("p",[e._v("在开始之前，部署 Kubernetes 集群机器需要满足以下几个条件：")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("一台或多台机器，操作系统 CentOS7.x-86_x64")])]),e._v(" "),s("li",[s("p",[e._v("硬件配置：2GB 或更多 RAM，2 个 CPU 或更多 CPU，硬盘 30GB 或更多")])]),e._v(" "),s("li",[s("p",[e._v("集群中所有机器之间网络互通")])]),e._v(" "),s("li",[s("p",[e._v("可以访问外网，需要拉取镜像")])]),e._v(" "),s("li",[s("p",[e._v("禁止 swap 分区")])])]),e._v(" "),s("h2",{attrs:{id:"最终目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最终目标"}},[e._v("#")]),e._v(" 最终目标")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("在所有节点上安装 Docker 和 kubeadm")])]),e._v(" "),s("li",[s("p",[e._v("部署 Kubernetes Master")])]),e._v(" "),s("li",[s("p",[e._v("部署容器网络插件")])]),e._v(" "),s("li",[s("p",[e._v("部署 Kubernetes Node，将节点加入 Kubernetes 集群中")])]),e._v(" "),s("li",[s("p",[e._v("部署 Dashboard Web 页面，可视化查看 Kubernetes 资源")])])]),e._v(" "),s("h2",{attrs:{id:"准备环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备环境"}},[e._v("#")]),e._v(" 准备环境")]),e._v(" "),s("p",[s("img",{attrs:{src:a(1097),alt:"image-20210418123921669"}})]),e._v(" "),s("ul",[s("li",[e._v("角色 IP")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("k8s-master "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".56.1\n\nk8s-node1 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".56.101\n\nk8s-node1 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".56.102\n")])])]),s("h2",{attrs:{id:"系统初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统初始化"}},[e._v("#")]),e._v(" 系统初始化")]),e._v(" "),s("h3",{attrs:{id:"关闭防火墙"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭防火墙"}},[e._v("#")]),e._v(" 关闭防火墙")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("systemctl stop firewalld\n\nsystemctl disable firewalld\n")])])]),s("h3",{attrs:{id:"关闭-selinux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭-selinux"}},[e._v("#")]),e._v(" 关闭 selinux")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" -i "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s/enforcing/disabled/'")]),e._v(" /etc/selinux/config "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 永久")]),e._v("\n\nsetenforce "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 临时")]),e._v("\n")])])]),s("h3",{attrs:{id:"关闭-swap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭-swap"}},[e._v("#")]),e._v(" 关闭 swap")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("swapoff -a "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 临时")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /etc/fstab "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 永久")]),e._v("\n")])])]),s("p",[e._v("PS: 在kubelet启动时添加参数 --fail-swap-on=false 参数，不用关闭swap")]),e._v(" "),s("h3",{attrs:{id:"主机名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主机名"}},[e._v("#")]),e._v(" 主机名：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("hostnamectl set-hostname "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("hostname"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),s("h3",{attrs:{id:"在-master-添加-hosts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-master-添加-hosts"}},[e._v("#")]),e._v(" 在 master 添加 hosts：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">>")]),e._v(" /etc/hosts "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF\n192.168.56.1 k8s-master\n192.168.56.101 k8s-node1\n192.168.56.103 k8s-node2\nEOF")]),e._v("\n")])])]),s("h3",{attrs:{id:"将桥接的-ipv4-流量传递到-iptables-的链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将桥接的-ipv4-流量传递到-iptables-的链"}},[e._v("#")]),e._v(" 将桥接的 IPv4 流量传递到 iptables 的链")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/sysctl.d/k8s.conf "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF")]),e._v("\n\nsysctl --system "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 生效")]),e._v("\n")])])]),s("h3",{attrs:{id:"时间同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间同步"}},[e._v("#")]),e._v(" 时间同步：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("yum "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" ntpdate -y\n\nntpdate time.windows.com\n")])])]),s("h2",{attrs:{id:"所有节点安装-containerd-kubeadm-kubelet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#所有节点安装-containerd-kubeadm-kubelet"}},[e._v("#")]),e._v(" 所有节点安装 containerd/kubeadm/kubelet")]),e._v(" "),s("ul",[s("li",[e._v("安装 containerd（容器运行时软件）")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("tee")]),e._v(" /etc/modules-load.d/containerd.conf")]),e._v("\noverlay\nbr_netfilter\nEOF")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" modprobe overlay\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" modprobe br_netfilter\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 设置必需的 sysctl 参数，这些参数在重新启动后仍然存在。")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("tee")]),e._v(" /etc/sysctl.d/99-kubernetes-cri.conf")]),e._v("\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nEOF")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 应用 sysctl 参数而无需重新启动")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" sysctl --system\n\nyum "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y yum-utils\nyum-config-manager "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --add-repo "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    https://download.docker.com/linux/centos/docker-ce.repo\n\nyum "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" containerd.io\n")])])]),s("ul",[s("li",[e._v("安装 kubeadm，kubelet 和 kubectl")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("EOF"),s("span",{pre:!0,attrs:{class:"token bash punctuation"}},[e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/yum.repos.d/kubernetes.repo")]),e._v("\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF")]),e._v("\n\nyum "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y kubelet kubeadm kubectl\n\nsystemctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" kubelet\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("dnf "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y iproute-tc\n")])])]),s("h2",{attrs:{id:"部署-kubernetes-master"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#部署-kubernetes-master"}},[e._v("#")]),e._v(" 部署 Kubernetes Master")]),e._v(" "),s("h3",{attrs:{id:"在-192-168-56-1-master-执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-192-168-56-1-master-执行"}},[e._v("#")]),e._v(" 在 192.168.56.1（Master）执行")]),e._v(" "),s("p",[e._v("然后接下来在 master 节点配置 kubeadm 初始化文件，可以通过如下命令导出默认的初始化配置：")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("kubeadm config print init-defaults > kubeadm.yaml\n")])])]),s("p",[e._v("然后根据我们自己的需求修改配置，比如修改 imageRepository 的值，kube-proxy 的模式为 ipvs，需要注意的是由于我们使用的containerd作为运行时，所以在初始化节点的时候需要指定 "),s("code",[e._v("cgroupDriver")]),e._v(" 为 "),s("code",[e._v("systemd")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\napiVersion: kubeadm.k8s.io/v1beta2\nbootstrapTokens:\n\n* groups:\n  + system:bootstrappers:kubeadm:default-node-token\n\n  token: abcdef.0123456789abcdef\n  ttl: 24h0m0s\n  usages:\n\n  + signing\n  + authentication\n\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 192.168.56.1\n  bindPort: 6443\nnodeRegistration:\n  criSocket: /run/containerd/containerd.sock \n  name: k8s-master\n  taints:\n\n  + effect: NoSchedule\n\n    key: node-role.kubernetes.io/master\n---\napiServer:\n  timeoutForControlPlane: 4m0s\napiVersion: kubeadm.k8s.io/v1beta2\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\ncontrollerManager: {}\ndns:\n  type: CoreDNS\netcd:\n  local:\n    dataDir: /var/lib/etcd\nimageRepository: k8s.gcr.io\nkind: ClusterConfiguration\nkubernetesVersion: v1.21.0\nnetworking:\n  dnsDomain: cluster.local\n  podSubnet: 172.16.0.0/16\n  serviceSubnet: 10.96.0.0/12\nscheduler: {}\n---\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nkind: KubeProxyConfiguration\nmode: ipvs\n---\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\ncgroupDriver: systemd\n")])])]),s("p",[e._v("由于默认拉取镜像地址 k8s.gcr.io 国内无法访问，这里指定阿里云镜像仓库地址。")]),e._v(" "),s("p",[e._v("然后使用上面的配置文件进行初始化：")]),e._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('$ kubeadm init --config=kubeadm.yaml\n\n[init] Using Kubernetes version: v1.21.0\n[preflight] Running pre-flight checks\n[preflight] Pulling images required for setting up a Kubernetes cluster\n[preflight] This might take a minute or two, depending on the speed of your internet connection\n[preflight] You can also perform this action in beforehand using \'kubeadm config images pull\'\n[certs] Using certificateDir folder "/etc/kubernetes/pki"\n[certs] Generating "ca" certificate and key\n[certs] Generating "apiserver" certificate and key\n[certs] apiserver serving cert is signed for DNS names [k8s-master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.0.5]\n[certs] Generating "apiserver-kubelet-client" certificate and key\n[certs] Generating "front-proxy-ca" certificate and key\n[certs] Generating "front-proxy-client" certificate and key\n[certs] Generating "etcd/ca" certificate and key\n[certs] Generating "etcd/server" certificate and key\n[certs] etcd/server serving cert is signed for DNS names [k8s-master localhost] and IPs [192.168.0.5 127.0.0.1 ::1]\n[certs] Generating "etcd/peer" certificate and key\n[certs] etcd/peer serving cert is signed for DNS names [k8s-master localhost] and IPs [192.168.0.5 127.0.0.1 ::1]\n[certs] Generating "etcd/healthcheck-client" certificate and key\n[certs] Generating "apiserver-etcd-client" certificate and key\n[certs] Generating "sa" key and public key\n[kubeconfig] Using kubeconfig folder "/etc/kubernetes"\n[kubeconfig] Writing "admin.conf" kubeconfig file\n[kubeconfig] Writing "kubelet.conf" kubeconfig file\n[kubeconfig] Writing "controller-manager.conf" kubeconfig file\n[kubeconfig] Writing "scheduler.conf" kubeconfig file\n[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"\n[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"\n[kubelet-start] Starting the kubelet\n[control-plane] Using manifest folder "/etc/kubernetes/manifests"\n[control-plane] Creating static Pod manifest for "kube-apiserver"\n[control-plane] Creating static Pod manifest for "kube-controller-manager"\n[control-plane] Creating static Pod manifest for "kube-scheduler"\n[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"\n[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s\n[kubelet-check] Initial timeout of 40s passed.\n[apiclient] All control plane components are healthy after 70.001862 seconds\n[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace\n[kubelet] Creating a ConfigMap "kubelet-config-1.20" in namespace kube-system with the configuration for the kubelets in the cluster\n[upload-certs] Skipping phase. Please see --upload-certs\n[mark-control-plane] Marking the node k8s-master as control-plane by adding the labels "node-role.kubernetes.io/master=\'\'" and "node-role.kubernetes.io/control-plane=\'\' (deprecated)"\n[mark-control-plane] Marking the node k8s-master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]\n[bootstrap-token] Using token: abcdef.0123456789abcdef\n[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles\n[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes\n[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials\n[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token\n[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster\n[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace\n[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key\n[addons] Applied essential addon: CoreDNS\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG=/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun "kubectl apply -f [podnetwork].yaml" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.56.1:6443 --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:2e70eac3eddebcd794de4c4d3a7ef03ab41b69ad0795c19a913df7a350f7aaab\n')])])]),s("h3",{attrs:{id:"使用-kubectl-工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-kubectl-工具"}},[e._v("#")]),e._v(" 使用 kubectl 工具")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.kube\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" -i /etc/kubernetes/admin.conf "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.kube/config\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("chown")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -u"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" -g"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(" "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.kube/config\nkubectl get nodes\n")])])]),s("h2",{attrs:{id:"安装-pod-网络插件-cni"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-pod-网络插件-cni"}},[e._v("#")]),e._v(" 安装 Pod 网络插件（CNI）")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n")])])]),s("p",[e._v("确保能够访问到 quay.io 这个 registery。如果 Pod 镜像下载失败，可以改这个镜像地址")]),e._v(" "),s("h2",{attrs:{id:"加入-kubernetes-node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加入-kubernetes-node"}},[e._v("#")]),e._v(" 加入 Kubernetes Node")]),e._v(" "),s("h3",{attrs:{id:"在-192-168-56-101-103-node-执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-192-168-56-101-103-node-执行"}},[e._v("#")]),e._v(" 在 192.168.56.101/103（Node）执行")]),e._v(" "),s("p",[e._v("向集群添加新节点，执行在 kubeadm init 输出的 kubeadm join 命令：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("kubeadm "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".56.1:6443 --token abcdef.0123456789abcdef "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --discovery-token-ca-cert-hash sha256:2e70eac3eddebcd794de4c4d3a7ef03ab41b69ad0795c19a913df7a350f7aaab\n")])])]),s("h2",{attrs:{id:"测试-kubernetes-集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试-kubernetes-集群"}},[e._v("#")]),e._v(" 测试 kubernetes 集群")]),e._v(" "),s("p",[e._v("在 Kubernetes 集群中创建一个 pod，验证是否正常运行：")]),e._v(" "),s("p",[e._v("$ kubectl create deployment nginx --image=nginx")]),e._v(" "),s("p",[e._v("$ kubectl expose deployment nginx --port=80 --type=NodePort")]),e._v(" "),s("p",[e._v("$ kubectl get pod, svc")]),e._v(" "),s("p",[e._v("访问地址：http://NodeIP: Port")])])}),[],!1,null,null,null);t.default=n.exports}}]);