(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{1228:function(t,a,n){"use strict";n.r(a);var e=n(19),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"基本操作之crud"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本操作之crud"}},[t._v("#")]),t._v(" 基本操作之CRUD")]),t._v(" "),n("h2",{attrs:{id:"创建文档"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建文档"}},[t._v("#")]),t._v(" 创建文档")]),t._v(" "),n("p",[t._v("命令有三种:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("创建单个文档：db.collection.insertOne()\n创建单个或多个文档：db.collection.insert()\n创建多个文档：db.collection.insertMany()\n")])])]),n("h3",{attrs:{id:"insertone"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#insertone"}},[t._v("#")]),t._v(" insertOne")]),t._v(" "),n("p",[t._v("示例：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('db.goods.insertOne({\n\tname:"哈士奇饼干",\n\tprice:33,\n})\n')])])]),n("p",[t._v("返回结果：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n    "acknowledged": true,\n    "insertedId": ObjectId("5e9c52e32a170000ea003e5a") //5e9c544c2a170000ea003e5b为本次插入数据的主键id\n}\n')])])]),n("p",[t._v("插入复合主键")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("db.goods.insertOne({\n    _id:{id:123,type:'shop'},\n\tname:\"这个是复合组件\",\n\tprice:20.58,\n})\n")])])]),n("h3",{attrs:{id:"insertmany"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#insertmany"}},[t._v("#")]),t._v(" insertMany")]),t._v(" "),n("p",[t._v("示例：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('db.goods.insertMany([\n\t{name:"哈士奇饼干1",price:33,},\n\t{name:"神奇宝贝一只1",stock:100,price:20.58,}\n])\n')])])]),n("p",[t._v("返回结果：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n    "acknowledged": true,\n    "insertedIds": [\n        ObjectId("5e9c56b72a170000ea003e5d"),\n        ObjectId("5e9c56b72a170000ea003e5e")\n    ]\n}\n')])])]),n("h3",{attrs:{id:"insert"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#insert"}},[t._v("#")]),t._v(" insert")]),t._v(" "),n("p",[t._v("示例：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('db.goods.insert([\n\t{name:"哈士奇饼干1",price:33,},\n\t{name:"神奇宝贝一只1",stock:100,price:20.58,}\n])\n')])])]),n("p",[t._v("返回结果：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('BulkWriteResult({\n\t"nRemoved" : 0,\n\t"nInserted" : 2, //插入成功的数量\n\t"nUpserted" : 0,\n\t"nMatched" : 0,\n\t"nModified" : 0,\n\t"writeErrors" : [ ]\n})\n')])])]),n("h2",{attrs:{id:"查询文档"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查询文档"}},[t._v("#")]),t._v(" 查询文档")]),t._v(" "),n("h3",{attrs:{id:"读取全部文档"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#读取全部文档"}},[t._v("#")]),t._v(" 读取全部文档")]),t._v(" "),n("p",[t._v("既不筛选，也不投射")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("db.collection.find();\n")])])]),n("p",[t._v("示例:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("db.goods.find();\n")])])]),n("p",[t._v("返回结果:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 1\n{\n    "_id": ObjectId("5e9c48b42a170000ea003e45"),\n    "name": "纸巾一包",\n    "price": 100\n}\n\n// 2\n{\n    "_id": ObjectId("5e9c48eb2a170000ea003e48"),\n    "name": "奶茶一杯",\n    "price": 20.58\n}\n\n// 3\n{\n    "_id": ObjectId("5e9c56b72a170000ea003e5d"),\n    "name": "哈士奇饼干1",\n    "price": 33\n}\n')])])]),n("h3",{attrs:{id:"匹配查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#匹配查询"}},[t._v("#")]),t._v(" 匹配查询")]),t._v(" "),n("p",[t._v("示例：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//查询名字为"纸巾一包"并且价格为100元的数据\ndb.goods.find({name:"纸巾一包",price:100})\n')])])]),n("p",[t._v("返回结果")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('{\n    "_id": ObjectId("5e9c48b42a170000ea003e45"),\n    "name": "纸巾一包",\n    "price": 100\n}\n')])])]),n("h3",{attrs:{id:"复合主键查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复合主键查询"}},[t._v("#")]),t._v(" 复合主键查询")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('db.goods.find({"_id.type":"shop"})\n')])])]),n("h3",{attrs:{id:"操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#操作符"}},[t._v("#")]),t._v(" 操作符")]),t._v(" "),n("h4",{attrs:{id:"比较操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#比较操作符"}},[t._v("#")]),t._v(" 比较操作符")]),t._v(" "),n("p",[t._v("{:{$:}}"),n("br"),t._v("\n$eq 匹配字段值相等的文档 （可以用于string和int类型） ="),n("br"),t._v("\n$ne 匹配字段值不等的文档 !="),n("br"),t._v("\n$gt 匹配字段值大于查询值的文档 >"),n("br"),t._v("\n$gte 匹配字段值大于或等于查询值的文档 >="),n("br"),t._v("\n$lt 匹配字段值小于查询值的文档 <"),n("br"),t._v("\n$lte 匹配字段值小于或等于查询值的文档 <="),n("br"),t._v("\n$in 匹配字段值与任意查询值相等的文档 “in”"),n("br"),t._v("\n$nin 匹配字段值与任意查询值不相等的文档 “not in”")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//匹配查询\ndb.goods.find({name:{$eq:"纸巾一包"}})\n//in查询\ndb.goods.find({"name":{$in:["纸巾一包","奶茶一杯"]}})\n//读取价格大于32元且小于101元的商品\ndb.goods.find({price:{$gt:32,$lt:101}})\n//复合组件查询\ndb.goods.find({"_id.type":{$eq:"shop"}})\ndb.goods.find({"_id.type":{$in:["shop"]}})\n')])])]),n("h4",{attrs:{id:"逻辑操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#逻辑操作符"}},[t._v("#")]),t._v(" 逻辑操作符")]),t._v(" "),n("p",[t._v("$not 匹配筛选条件不成立的文档"),n("br"),t._v("\n$and 匹配多个筛选条件全部成立的文档"),n("br"),t._v("\n$or 匹配至少一个筛选条件成立的文档"),n("br"),t._v("\n$nor 匹配多个筛选条件全部不成立的文档"),n("br"),t._v("\n逻辑运算符示例：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//查询价格不小于32元的商品\ndb.goods.find({price:{$not:{$lt:32}}})\n//相当于下面的取反\ndb.goods.find({price:{$lt:32}})\n//获取价格为100，并且名称为"纸巾一包"的商品\ndb.goods.find({\n\t$and:[\n\t\t{price:{$eq:100}},\n\t\t{name:"纸巾一包"}\n\t]\n})\n//可以简写如下\ndb.goods.find({price:{$eq:100},name:"纸巾一包"})\n//获取价格不是100，并且名称不为"纸巾一包"的商品\ndb.goods.find({\n\t$nor:[\n\t\t{price:{$eq:100}},\n\t\t{name:"纸巾一包"}\n\t]\n})\n注意：nor也会筛选出并不包含查询字段的文档！！比如会把没有price和name字段的文档也查出来！\n')])])]),n("h4",{attrs:{id:"字段操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字段操作符"}},[t._v("#")]),t._v(" 字段操作符")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$exists 匹配包含查询字段的文档  \n$type 匹配字段符合查询值的文档\n")])])]),n("p",[n("strong",[t._v("$type对应的类型和BSON类型序号")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Double\t1\t \nString\t2\t \nObject\t3\t \nArray\t4\t \nBinary data\t5\t \nUndefined\t6\t已废弃。\nObject id\t7\t \nBoolean\t8\t \nDate\t9\t \nNull\t10\t \nRegular Expression\t11\t \nJavaScript\t13\t \nSymbol\t14\t \nJavaScript (with scope)\t15\t \n32-bit integer\t16\t \nTimestamp\t17\t \n64-bit integer\t18\t \nMin key\t255\tQuery with -1.\nMax key\t127\n")])])]),n("p",[t._v("示例")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//查询复合主键中存在type字段的数据\ndb.goods.find({"_id.type":{$exists:true}})\n//查询存在name字段的数据\ndb.goods.find({name:{$exists:true}})\n//查询类型为普通主键和复合主键的数据\ndb.goods.find({_id:{$type:["objectId","object"]}})\n//查询类型为string的数据\ndb.goods.find({name:{$type:["string"]}})\n')])])]),n("h4",{attrs:{id:"数组操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组操作符"}},[t._v("#")]),t._v(" 数组操作符")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$all 匹配数组字段中包含所有查询值的文档\n$elemMatch 匹配数组字段中至少存在一个值满足筛选条件的文档\n")])])]),n("p",[t._v("示例")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('先插入数据\ndb.goods.insert(\n\t[\n\t\t{\n\t\t    name:"皮卡丘一只",\n\t\t\tprice:100,\n\t\t\tcontact:["111111","Alabama","US"]\n\t\t},\n\t\t{\n\t\t    name:"小火龙一只",\n\t\t\tprice:120,\n\t\t\tcontact:[["222222","333333"],"Beijing","China"]\n\t\t}\n\t]\n)\n//查询contact字段中同时包含"China"和"Beijing"字段的文档\ndb.goods.find({contact:{$all:["China","Beijing"]}})\n//查询联系方式中包含"222222","333333"的文档，注意，这里的数组如果只有"222222"是查询不到的，这里是数组全等的关系\ndb.goods.find({contact:{$all:[["222222","333333"]]}})\n//查询电话号码范围在大于111110和小于222222之间的数据\ndb.goods.find({contact:{$elemMatch:{$gt:"111110",$lt:"222222"}}})\n//查询电话号码范围在"大于111110和小于222222之间"并且"大于211111和小于444444之间"的数据\ndb.goods.find({\n\tcontact:{$all:[\n\t\t{$elemMatch:{$gt:"111111",$lt:"222222"}},\n\t\t{$elemMatch:{$gt:"211111",$lt:"444444"}}\n\t]}\n})\n')])])]),n("h4",{attrs:{id:"运算操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算操作符"}},[t._v("#")]),t._v(" 运算操作符")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("{<field>:{:/pattern/,:'<options>'}}\n{<field>:{:/pattern/<options>}}\n$regex  \n在和$in操作符一起使用时，只能使用/pattern/<options>\n//读取name字段以\"皮\"或\"j\"开头的文档数据\ndb.goods.find({name:{$in:[/^皮/,/^j/]}})\n\n//读取name字段包含LIE（不区分大小写）的文档数据\ndb.goods.find({name:{$regex:/LIE/,$options:'i'}})\n")])])]),n("h3",{attrs:{id:"游标"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#游标"}},[t._v("#")]),t._v(" 游标")]),t._v(" "),n("p",[t._v("游历完游标中所有文档之后，或者在10分钟之后，游标便会自动关闭"),n("br"),t._v("\n可以使用noCursorTimeout()函数来保持游标一直有效")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var myCursor=db.goods.find().noCursorTimeout()\n")])])]),n("p",[t._v("在这之后，在不遍历游标的情况下，你需要主动关闭游标")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("myCursor.close()\n")])])]),n("h4",{attrs:{id:"游标函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#游标函数"}},[t._v("#")]),t._v(" 游标函数")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("cursor.hasNext() //当还有没遍历完的游标文档时，返回true\ncursor.next()  //获取下一次遍历的游标文档\ncursor.forEach(<function>) //遍历游标中所有指向的文档\ncursor.limit(<number>)  //返回指定条数\ncursor.skip(<offest>) //跳过文档中指定数量的文档（传入1表示跳过第一篇文档）\ncursor.count(<applySkipLimit>) //默认情况下，<applySkipLimit>为false，即cursor.count()不会考虑cursor.skip()和cursor.limit()的效果\ncursor.sort(<document>)  //这里的<document>定义了排序的要求（1从小到大排序，-1从大到小排序）\nvar myCursor=db.goods.find();\nwhile(myCursor.hasNext()){\n\tprintjson(myCursor.next());\n}\n\n\nvar myCursor=db.goods.find();\nmyCursor.forEach(printjson)\ndb.goods.find().limit(1)\ndb.goods.find().skip(1)\n\ndb.goods.find().limit(1).count() //返回所有文档总数\ndb.goods.find().limit(1).count(true) //返回一篇文档\n//price字段从大到小排序，并且name字段由小到大排序 （相当于mysql中同时两个排序条件的规则）\ndb.goods.find().sort({price:-1,name:1})\n")])])]),n("p",[n("strong",[t._v("注意事项"),n("br"),t._v("\ncursor.skip(),cursor.limit(),cursor.count()"),n("br"),t._v("\n优先级：count()->skip()->limit()")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("cursor.skip()在cursor.limit()之前执行\ndb.goods.find().limit(5).skip(3)\n结果返回的是5篇文章，从第4篇到第9篇文章\ncursor.count()在cursor.skip()和cursor.limit()之前执行\ndb.goods.find().limit(5).skip(3).sort({price:-1})\n")])])]),n("h3",{attrs:{id:"文档投影"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文档投影"}},[t._v("#")]),t._v(" 文档投影")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("db.goods.find(<query>,<projection>)\n不使用投影时，db.goods.find()返回符合筛选条件的完整文档\n使用投影可以只返回指定的字段\n{field:inclusion}\n1表示返回部分字段，0表示不返回字段，（1和0不可组合使用，_id字段除外）\n//只返回name字段\ndb.goods.find({},{name:1,_id:0})\n//返回除name之外的字段\ndb.goods.find({},{name:0})\n//$slide:2,表示返回前2条，-2表示返回倒数2条，[1,2]表示返回第二条到第三条\ndb.goods.find({},{name:1,content:{$slide:[1,2]}})\n")])])]),n("p",[n("strong",[t._v("$elemMatch和$操作符可以返回数组字段中满足筛选条件的第一个元素")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//返回content数组字段中第一个排序大于"Alabama"的数据，（没content字段的文档也会被返回）\ndb.goods.find({},{name:1,content:{$elemMatch:{$gt:"Alabama"}}})\n\n//返回content数组字段中第一个排序大于"Alabama"的数据\ndb.goods.find({content:{$gt:"Alabama"}},{name:1,"content.$":1,})\n')])])]),n("h2",{attrs:{id:"更新操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更新操作"}},[t._v("#")]),t._v(" 更新操作")]),t._v(" "),n("p",[t._v("注意："),n("br"),t._v("\n1、"),n("br"),t._v("\ndb.goods.update(where查询条件,更新的值,其它条件)"),n("br"),t._v("\ndb.goods.update({“uid”:3},{$rename:{“name”:”alias”}},{multi:true})"),n("br"),t._v("\n2、文档更新操作只会更新一篇文档，即使条件符合多篇文档，也只会更新一篇，如果想要更新所有符合条件的文档，需要添加第三个参数**{multi:true}**")]),t._v(" "),n("h3",{attrs:{id:"文档更新操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文档更新操作符"}},[t._v("#")]),t._v(" 文档更新操作符")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('$set 更新或新增字段\n$unset 删除字段\n$rename 重命名字段 {$rename:{<field1>:<newName1>,<field2>:<newName2>}}\n$inc 加减字段值  (字段不存在时，会默认创建且值为加减的值)\n$mul 相乘字段值 (字段不存在时，会默认创建且值为0 )\n$min 比较减少字段值 (保留最小的值)(字段不存在会自动创建且值为指定的值)(类型不一致按BSON数据类型排序规则比较)\n$max 比较增大字段值 (保留最大的值)(字段不存在会自动创建且值为指定的值)(类型不一致按BSON数据类型排序规则比较)\n//（$rename）重命名写法\ndb.goods.update({"uid":3},{$rename:{"name":"alias"}})\n//（$rename）将数组字段content中的name字段迁移到最外面的name字段\ndb.goods.update({"uid":3},{$rename:{"content.name":"name"}})\n//（$rename）将最外面的name字段迁移到数组字段content中的name字段\ndb.goods.update({"uid":3},{$rename:{"name":"content.name"}})\n//（$inc）将条件uid=3的文档，price字段加一\ndb.goods.update({"uid":3},{$inc:{"price":1}})\n//（$min）源字段大于50时，修改成50\ndb.goods.update({"uid":3},{$min:{"price":50}}) （源price值为30时，不变，保留30）\nBSON数据类型排序规则\n最小\n\tNull\n\tNumbers(ints,longs,doubles,decimals)\n    Symbol,String\n\tObject\n\tArray\n\tBinData\n\tObjectId\n\tBoolean\n\tDate\n最大\n\tRegular Expression\n')])])]),n("h3",{attrs:{id:"数组更新操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组更新操作符"}},[t._v("#")]),t._v(" 数组更新操作符")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('$addToSet 向数组中增添元素\n$pop 从数组中移除元素\n$pull 从数组中移除指定元素\n$pullAll 从数组中有选择性地移除元素\n$push 向数组中增添元素\n//($addToSet)将content数组字段添加"nihao","wohao"两个值\ndb.goods.update({"uid":3},{$addToSet:{"content":{$each:["nihao","wohao"]}}})\n//$pull删除content数组中包含"皮"字的字段\ndb.goods.update({"uid":3},{$pull:{"content":{$regex:/皮/}}})\n{$pullAll:{<field>:[<vaule1>,<vaule2>]}}\n相当于\n{$pull:{<field>:{$in:[<vaule1>,<vaule2>]}}}\n')])])]),n("h3",{attrs:{id:"更新操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更新操作符"}},[t._v("#")]),t._v(" 更新操作符")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ 第一个符合条件的占位符\n$[] 数组中的所有元素\n")])])]),n("p",[n("strong",[t._v("更新数组中的特定元素"),n("br"),t._v("\n$是数组中第一个符合筛选条件的数组元素的占位符，搭配更新操作符使用，可以对满足筛选条件的数组元素进行更新")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('db.goods.update({<array>:<query selector>},<update operator>:{"<array>.$",vaule})\n')])])]),n("p",[t._v("$[]指代数组字段中的所有元素，搭配更新操作符使用，可以对数组中的所有元素进行更新")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('db.goods.update({<array>:<query selector>},<update operator>:{"<array>.$[]",vaule})\n//源数据\n{\n    "_id": ObjectId("5e9f08904757000020000235"),\n    "content": [\n        "nihao",\n        "我很好"\n    ],\n    "uid": 3,\n    "name": "nihao",\n    "num": 1,\n    "num1": 0\n}\n//将content数组中值为"nihao"的替换成"updated"\ndb.goods.update({\n    uid:3,\n\tcontent:"nihao"\n}, {\n    $set: {\n        "content.$":"updated"\n    }\n})\n将content数组中所有字段替换成"updated"\ndb.goods.update({\n    uid:3\n}, {\n    $set: {\n        "content.$[]":"updated"\n    }\n})\n')])])]),n("h3",{attrs:{id:"更新文档选项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更新文档选项"}},[t._v("#")]),t._v(" 更新文档选项")]),t._v(" "),n("p",[t._v("{multi:}"),n("br"),t._v("\n更新多个文档"),n("br"),t._v("\n到目前为止，我们在update命令中使用的筛选条件只对应一篇文档"),n("br"),t._v("\n在默认情况下，即使筛选条件对应了多篇文档，update命令仍然只会更新一篇文档")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('将所有name值为"nihao"的文档num值改成10\ndb.goods.update({\n    name:"nihao"\n}, {$set: {"num":10}},{multi:true})\n')])])]),n("h3",{attrs:{id:"原子性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原子性"}},[t._v("#")]),t._v(" 原子性")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("在MongoDB中，更新单个的文档操作是原子性的。默认情况下，如果一个update()更新多个文档，那么对每个文档的更新是原子性的，但是对整个update而言则不是原子性的。有可能存在前一个文档更新成功，后面的文档更新失败的情况。由于单个文档的更新是原子性的，如果两个更新同时发生，就会出现阻塞，先到的先执行，所以文档最终结果由靠后的操作决定。\n**简单的说就是对同一篇文档进行更新，文档最终结果以最后的更新操作为结果**\n")])])]),n("h2",{attrs:{id:"删除命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#删除命令"}},[t._v("#")]),t._v(" 删除命令")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("db.collection.remove() 删除文档\ndb.collection.drop() 删除集合\n")])])]),n("p",[t._v("注："),n("br"),t._v("\n1、删除文档默认是删除所有符合条件的文档，和update操作不一样，如果需要指定只删除一篇文档，加上第二个参数**（{justOne:true}）**")]),t._v(" "),n("h3",{attrs:{id:"删除文档"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#删除文档"}},[t._v("#")]),t._v(" 删除文档")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('db.<collection>.remove(<query>,<options>)\n<options>声明了一些删除操作的参数\n\ndb.goods.remove()\n//删除name值为"nihao"的所有文档\ndb.goods.remove({name:"nihao"})\n//删除name值为"nihao"的一篇文档（{justOne:true}）\ndb.goods.remove({name:"nihao"},{justOne:true})\n//删除集合内的所有文档\ndb.goods.remove({})\n')])])]),n("h3",{attrs:{id:"删除集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#删除集合"}},[t._v("#")]),t._v(" 删除集合")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("db.<collection>.drop(<writeConcern>,<document>)\ndb.goods.drop()\n")])])]),n("p",[t._v("这里的writeConcern文档定义了本次集合删除操作的安全写级别、"),n("br"),t._v("\ndrop命令可以删除整个集合，包括集合中的所有文档，以及集合的索引")])])}),[],!1,null,null,null);a.default=s.exports}}]);