(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{1143:function(t,s,a){"use strict";a.r(s);var n=a(19),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[t._v("#")]),t._v(" 结构体")]),t._v(" "),a("p",[t._v("和C语言类似，Go也支持结构体类型。此篇文章将介绍Go中的结构体类型和结构体值做一个详细的解释。")]),t._v(" "),a("h2",{attrs:{id:"结构体类型和结构体字面量表示形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体类型和结构体字面量表示形式"}},[t._v("#")]),t._v(" 结构体类型和结构体字面量表示形式")]),t._v(" "),a("p",[t._v("每个非定义结构体类型的字面形式均由 "),a("code",[t._v("struct")]),t._v(" 关键字开头，后面跟着用一对大括号 "),a("code",[t._v("{}")]),t._v(" ，其中包裹着的一系列字段（field）声明。 一般来说，每个字段声明由一个字段名和字段类型组成。一个结构体类型的字段数目可以为0。下面是一个非定义结构体类型的字面形式：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ttitle  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\tauthor "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\tpages  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面这个结构体类型含有三个字段。前两个字段（ "),a("code",[t._v("title")]),t._v(" 和 "),a("code",[t._v("author")]),t._v(" ）的类型均为 "),a("code",[t._v("string")]),t._v(" 。 最后一个字段 "),a("code",[t._v("pages")]),t._v(" 的类型为 "),a("code",[t._v("int")]),t._v(" 。")]),t._v(" "),a("p",[t._v("有时字段也称为成员变量。")]),t._v(" "),a("p",[t._v("相邻的同类型字段可以声明在一起。比如上面这个类型也可表示成下面这样：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ttitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" author "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\tpages         "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("一个结构体类型的尺寸为它的所有字段的（类型）尺寸之和加上一些填充字节的数目。 常常地，编译器（和运行时）会在一个结构体值的两个相邻字段之间填充一些字节来保证一些字段的地址总是某个整数的倍数。 我们可以在后面的"),a("a",{attrs:{href:"https://gfw.go101.org/article/memory-layout.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("内存布局"),a("OutboundLink")],1),t._v("一文中了解到字节填充（padding）和内存地址对齐（memory address alignment）。")]),t._v(" "),a("p",[t._v("一个零字段结构体的尺寸为零。")]),t._v(" "),a("p",[t._v("每个结构体字段在它的声明中可以被指定一个标签（tag）。从语法上讲，字段标签可以是任意字符串，它们是可选的，默认为空字符串。 但在实践中，它们应该被表示成用空格分隔的键值对形式，并且每个标签尽量使用直白字面形式（"),a("code"),t._v("..."),a("code"),t._v("）表示，而键值对中的值使用解释型字面形式（"),a("code",[t._v('"..."')]),t._v("）表示。 比如下例：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tTitle  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('`json:"title" myfmt:"s1"`')]),t._v("\n\tAuthor "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('`json:"author,omitempty" myfmt:"s2"`')]),t._v("\n\tPages  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('`json:"pages,omitempty" myfmt:"n1"`')]),t._v("\n\tX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Y   "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('`myfmt:"b1"`')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意：上例中的 "),a("code",[t._v("X")]),t._v(" 和 "),a("code",[t._v("Y")]),t._v(" 字段的标签是一样的（尽管在实践中基本上从不会这样使用字段标签）。")]),t._v(" "),a("p",[t._v("我们可以使用"),a("a",{attrs:{href:"https://gfw.go101.org/article/reflection.html#struct-field-tag",target:"_blank",rel:"noopener noreferrer"}},[t._v("反射"),a("OutboundLink")],1),t._v("来检视字段的标签信息。")]),t._v(" "),a("p",[t._v("每个字段标签的目的取决于具体应用。上面这个例子中的字段标签用来帮助 "),a("code",[t._v("encoding/json")]),t._v(" 标准库包来将上面这个结构体类型的某个值编码成JSON数据或者从一份JSON数据解码到上面这个结构体类型的某个值中。在编码和解码过程中， "),a("code",[t._v("encoding/json")]),t._v(" 标准库包中的函数将只考虑导出的结构体字段。这是为什么上面这个结构体的字段均为导出的。")]),t._v(" "),a("p",[t._v("把字段标签当成字段注释来使用不是一个好主意。")]),t._v(" "),a("p",[t._v("和C语言不一样，Go结构体不支持字段联合（union）。")]),t._v(" "),a("p",[t._v("上面的例子中展示的结构体类型都是非定义的和匿名的。在实践中，定义的结构体类型用得更流行。")]),t._v(" "),a("p",[t._v("只有导出字段可以被使用在其它代码包中。非导出字段类以于很多其它语言中的私有或者保护型的成员变量。")]),t._v(" "),a("p",[t._v("一个结构体类型中的字段标签和字段的声明顺序对此结构体类型的身份识别很重要。 如果两个非定义结构体类型的各个对应字段声明都相同（按照它们的出现顺序），则此两个非定义结构体类型是等同的。 两个字段声明只有在它们的名称、类型和标签都等同的情况下才相同。 注意："),a("strong",[t._v("两个声明在不同的代码包中的非导出字段将总被认为是不同的字段。")])]),t._v(" "),a("p",[t._v("一个结构体类型不能（直接或者间接）含有一个类型为此结构类型的字段。")]),t._v(" "),a("h2",{attrs:{id:"结构体字面量表示形式和结构体值的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体字面量表示形式和结构体值的使用"}},[t._v("#")]),t._v(" 结构体字面量表示形式和结构体值的使用")]),t._v(" "),a("p",[t._v("在Go中，语法形式 "),a("code",[t._v("T{...}")]),t._v(" 称为一个组合字面量形式（composite literal），其中 "),a("code",[t._v("T")]),t._v(" 必须为一个类型名或者类型字面形式。 组合字面量形式可以用来表示结构体类型和内置容器类型（将在后面的文章中介绍）的值。")]),t._v(" "),a("p",[t._v("注意：组合字面量 "),a("code",[t._v("T{...}")]),t._v(" 是一个类型确定值，它的类型为 "),a("code",[t._v("T")]),t._v(" 。")]),t._v(" "),a("p",[t._v("假设 "),a("code",[t._v("S")]),t._v(" 是一个结构体类型并且它的底层类型为 "),a("code",[t._v("struct{ x int; y bool}")]),t._v(" ， "),a("code",[t._v("S")]),t._v(" 的零值可以表示成下面所示的组合字面量两种变种形式：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("S{0, false}")]),t._v("。在此变种形式中，所有的字段名称均不出现，但每个字段的值必须指定，并且每个字段的出现顺序和它们的声明顺序必须一致。")]),t._v(" "),a("li",[a("code",[t._v("S{x: 0, y: false}")]),t._v("、"),a("code",[t._v("S{y: false, x: 0}")]),t._v("、"),a("code",[t._v("S{x: 0}")]),t._v("、"),a("code",[t._v("S{y: false}")]),t._v("和"),a("code",[t._v("S{}")]),t._v("。 在此变种形式中，字段的名称和值必须成对出现，但是每个字段都不是必须出现的，并且字段的出现顺序并不重要。 没有出现的字段的值被编译器认为是它们各自类型的零值。"),a("code",[t._v("S{}")]),t._v("是最常用的类型"),a("code",[t._v("S")]),t._v("的零值的表示形式。")])]),t._v(" "),a("p",[t._v("如果 "),a("code",[t._v("S")]),t._v(" 是声明在另一个代码包中的一个结构体类型，则推荐使用上面所示的第二种变种形式来表示它的值。 因为另一个代码包的维护者今后可能会在此结构体中添加新的字段，从而导致当前使用的第一种变种形式在今后可能编译不通过。")]),t._v(" "),a("p",[t._v("当然，上面所示的结构体值的组合字面量也可以用来表示结构体类型的非零值。")]),t._v(" "),a("p",[t._v("对于类型 "),a("code",[t._v("S")]),t._v(" 的一个值 "),a("code",[t._v("v")]),t._v(" ，我们可以用 "),a("code",[t._v("v.x")]),t._v(" 和 "),a("code",[t._v("v.y")]),t._v(" 来表示它的字段。 "),a("code",[t._v("v.x")]),t._v(" （或 "),a("code",[t._v("v.y")]),t._v(" ）这种形式称为一个选择器（selector）。其中的 "),a("code",[t._v("v")]),t._v(" 称为此选择器的属主。 今后，我们称一个选择器中的句点 "),a("code",[t._v(".")]),t._v(" 为属性选择操作符。")]),t._v(" "),a("p",[t._v("一个例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Book "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ttitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" author "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\tpages         "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tbook "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" Book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go语言101"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"老貘"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {Go语言101 老貘 256}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用带字段名的组合字面量来表示结构体值。")]),t._v("\n\tbook "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"老貘"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" title"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go语言101"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// title和author字段的值都为空字符串""，pages字段的值为0。')]),t._v("\n\tbook "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// title字段空字符串""，pages字段为0。')]),t._v("\n\tbook "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"老貘"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用选择器来访问和修改字段值。")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" book2 Book "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <=> book2 := Book{}")]),t._v("\n\tbook2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("author "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Tapir"')]),t._v("\n\tbook2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pages "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("book2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 300")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果一个组合字面量中最后一项和结尾的 "),a("code",[t._v("}")]),t._v(" 处于同一行，则此项后的逗号 "),a("code",[t._v(",")]),t._v(" 是可选的；否则此逗号不可省略。 我们可以阅读后面的"),a("a",{attrs:{href:"https://gfw.go101.org/article/line-break-rules.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go代码断行规则"),a("OutboundLink")],1),t._v("一文了解更多断行规则。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Book "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tauthor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"老貘"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tpages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\ttitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go语言101"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里行尾的逗号不可省略")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下行}前的逗号可以省略。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"老貘"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" title"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go语言101"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"关于结构体值的赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于结构体值的赋值"}},[t._v("#")]),t._v(" 关于结构体值的赋值")]),t._v(" "),a("p",[t._v("当一个（源）结构体值被赋值给另外一个（目标）结构体值时，其效果和逐个将源结构体值的各个字段赋值给目标结构体值的各个对应字段的效果是一样的。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tbook1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" Book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("pages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tbook2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" Book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go语言101"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"老貘"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\tbook2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" book1\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上面这行和下面这三行是等价的。")]),t._v("\n\tbook2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" book1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("title\n\tbook2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("author "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" book1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("author\n\tbook2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pages "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" book1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pages\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果两个结构体值的类型不同，则只有在它们的底层类型相同（要考虑字段标签）并且其中至少有一个结构体值的类型为"),a("a",{attrs:{href:"https://gfw.go101.org/article/type-system-overview.html#non-defined-type",target:"_blank",rel:"noopener noreferrer"}},[t._v("非定义类型"),a("OutboundLink")],1),t._v("时（换句话说，只有它们可以被隐式转换为对方的类型的时候，见下）才可以互相赋值。")]),t._v(" "),a("h2",{attrs:{id:"结构体字段的可寻址性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体字段的可寻址性"}},[t._v("#")]),t._v(" 结构体字段的可寻址性")]),t._v(" "),a("p",[t._v("如果一个结构体值是可寻址的，则它的字段也是可寻址的；反之，一个不可寻址的结构体值的字段也是不可寻址的。 不可寻址的字段的值是不可更改的。所有的组合字面量都是不可寻址的。")]),t._v(" "),a("p",[t._v("一个例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Book "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tPages "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" book "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量值book是可寻址的")]),t._v("\n\tp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pages\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {123}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面这两行编译不通过，因为Book{}是不可寻址的，")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继而Book{}.Pages也是不可寻址的。")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n\tBook{}.Pages = 123\n\tp = &Book{}.Pages // <=> p = &(Book{}.Pages)\n\t*/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意：选择器中的属性选择操作符 "),a("code",[t._v(".")]),t._v(" 的优先级比取地址操作符 "),a("code",[t._v("&")]),t._v(" 的优先级要高。")]),t._v(" "),a("h2",{attrs:{id:"组合字面量不可寻址但可被取地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合字面量不可寻址但可被取地址"}},[t._v("#")]),t._v(" 组合字面量不可寻址但可被取地址")]),t._v(" "),a("p",[t._v("一般来说，只有可被寻址的值才能被取地址，但是Go中有一个语法糖（语法例外）：虽然所有的组合字面量都是不可寻址的，但是它们都可被取地址。")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Book "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tPages "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Book{100}是不可寻址的，但是它可以被取地址。")]),t._v("\n\tp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("Book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <=> tmp := Book{100}; p := &tmp")]),t._v("\n\tp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pages "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"在选择器中-结构体值的指针可以当作结构值来使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在选择器中-结构体值的指针可以当作结构值来使用"}},[t._v("#")]),t._v(" 在选择器中，结构体值的指针可以当作结构值来使用")]),t._v(" "),a("p",[t._v("和C语言不同，Go中没有 "),a("code",[t._v("->")]),t._v(" 操作符用来通过一个结构体值的指针来访为此结构体值的字段。 在Go中， "),a("code",[t._v("->")]),t._v(" 操作符也是用句点 "),a("code",[t._v(".")]),t._v(" 来表示的。")]),t._v(" "),a("p",[t._v("一个例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Book "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tpages "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tbook1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("Book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// book1是一个指针")]),t._v("\n\tbook2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Book"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// book2是另外一个指针")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 像使用结构值一样来使用结构体值的指针。")]),t._v("\n\tbook2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pages "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" book1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pages\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上一行等价于下一行。换句话说，上一行")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两个选择器中的指针属主将被自动解引用。")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("book2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pages "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("book1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pages\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"关于结构体值的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于结构体值的比较"}},[t._v("#")]),t._v(" 关于结构体值的比较")]),t._v(" "),a("p",[t._v("如果一个结构体类型是可比较的，则它肯定不包含"),a("a",{attrs:{href:"https://gfw.go101.org/article/type-system-overview.html#types-not-support-comparison",target:"_blank",rel:"noopener noreferrer"}},[t._v("不可比较类型"),a("OutboundLink")],1),t._v("的字段（这里不忽略名为空标识符 "),a("code",[t._v("_")]),t._v(" 的字段）。")]),t._v(" "),a("p",[t._v("和结构体值的赋值规则类似，如果两个不同类型的结构体值均为可比较的，则它们仅在它们的底层类型相同（要考虑字段标签）并且其中至少有一个结构体值的类型为非定义类型时（换句话说，只有它们可以被隐式转换为对方的类型的时候，见下）才可以互相比较。")]),t._v(" "),a("p",[t._v("如果两个结构体值可以相互比较，则它们的比较结果等同于逐个比较它们的相应字段（按照字段在代码中的声明顺序）。 两个结构体值只有在它们的相应字段都相等的情况下才相等；当一对字段被发现不相等的或者"),a("a",{attrs:{href:"https://gfw.go101.org/article/interface.html#comparison",target:"_blank",rel:"noopener noreferrer"}},[t._v("在比较中产生恐慌"),a("OutboundLink")],1),t._v("的时候，对结构体的比较将提前结束结束。 在比较中，名为空标识符 "),a("code",[t._v("_")]),t._v(" 的字段将被忽略掉。")]),t._v(" "),a("h2",{attrs:{id:"关于结构体值的类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于结构体值的类型转换"}},[t._v("#")]),t._v(" 关于结构体值的类型转换")]),t._v(" "),a("p",[t._v("两个类型分别为 "),a("code",[t._v("S1")]),t._v(" 和 "),a("code",[t._v("S2")]),t._v(" 的结构体值只有在 "),a("code",[t._v("S1")]),t._v(" 和 "),a("code",[t._v("S2")]),t._v(" 的底层类型相同（忽略掉字段标签）的情况下才能相互转换为对方的类型。 特别地，如果 "),a("code",[t._v("S1")]),t._v(" 和 "),a("code",[t._v("S2")]),t._v(" 的底层类型相同（要考虑字段标签）并且只要它们其中有一个为非定义类型，则此转换可以是隐式的。")]),t._v(" "),a("p",[t._v("比如，对于下面的代码片段中所示的五个结构体类型： "),a("code",[t._v("S0")]),t._v(" 、 "),a("code",[t._v("S1")]),t._v(" 、 "),a("code",[t._v("S2")]),t._v(" 、 "),a("code",[t._v("S3")]),t._v(" 和 "),a("code",[t._v("S4")]),t._v(" ：")]),t._v(" "),a("ul",[a("li",[t._v("类型"),a("code",[t._v("S0")]),t._v("的值不能被转换为其它四个类型中的任意一个，原因是它与另外四个类型的对应字段名不同（因此底层类型不同）。")]),t._v(" "),a("li",[t._v("类型"),a("code",[t._v("S1")]),t._v("、"),a("code",[t._v("S2")]),t._v("、"),a("code",[t._v("S3")]),t._v("和"),a("code",[t._v("S4")]),t._v("的任意两个值可以转换为对方的类型。")])]),t._v(" "),a("p",[t._v("特别地，")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("S2")]),t._v("表示的类型的值可以被隐式转化为类型"),a("code",[t._v("S3")]),t._v("，反之亦然。")]),t._v(" "),a("li",[a("code",[t._v("S2")]),t._v("表示的类型的值可以被隐式转换为类型"),a("code",[t._v("S4")]),t._v("，反之亦然。")])]),t._v(" "),a("p",[t._v("但是，")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("S2")]),t._v("表示的类型的值必须被显式转换为类型"),a("code",[t._v("S1")]),t._v("，反之亦然。")]),t._v(" "),a("li",[t._v("类型"),a("code",[t._v("S3")]),t._v("的值必须被显式转换为类型"),a("code",[t._v("S4")]),t._v("，反之亦然。")])]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" S0 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ty "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n\tx "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" S1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// S1是一个非定义类型")]),t._v("\n\tx "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n\ty "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" S2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// S2也是一个非定义类型")]),t._v("\n\tx "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n\ty "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" S3 S2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// S3是一个定义类型。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" S4 S3 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// S4是一个定义类型。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果不考虑字段标签，S3（S4）和S1的底层类型一样。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果考虑字段标签，S3（S4）和S1的底层类型不一样。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" S0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" S1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" S2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" S3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" S4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tv1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("S1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" v2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("S2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tv1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("S1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" v3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("S3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tv1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("S1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" v4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("S4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tv2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" v3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这两个转换可以是隐式的")]),t._v("\n\tv2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" v4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这两个转换也可以是隐式的")]),t._v("\n\tv3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("S3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" v4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("S4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("事实上，两个结构体值只有在它们可以相互隐式转换为对方的类型的时候才能相互赋值和比较。")]),t._v(" "),a("h2",{attrs:{id:"匿名结构体类型可以使用在结构体字段声明中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名结构体类型可以使用在结构体字段声明中"}},[t._v("#")]),t._v(" 匿名结构体类型可以使用在结构体字段声明中")]),t._v(" "),a("p",[t._v("匿名结构体类型允许出现在结构体字段声明中。匿名结构体类型也允许出现在组合字面量中。")]),t._v(" "),a("p",[t._v("一个例子：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" aBook "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tauthor "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此字段的类型为一个匿名结构体类型")]),t._v("\n\t\tfirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastName "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\t\tgender              "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ttitle "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\tpages "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tauthor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastName "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n\t\tgender              "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tfirstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mark"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tlastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Twain"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此组合字面量中的类型为一个匿名结构体类型")]),t._v("\n\ttitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The Million Pound Note"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tpages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("96")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("通常来说，为了代码可读性，最好少使用匿名结构体类型。")]),t._v(" "),a("h2",{attrs:{id:"更多关于结构体类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更多关于结构体类型"}},[t._v("#")]),t._v(" 更多关于结构体类型")]),t._v(" "),a("p",[t._v("Go中有一些和结构体类型相关的进阶知识点。这些知识点将后面的"),a("a",{attrs:{href:"https://gfw.go101.org/article/type-embedding.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("类型内嵌"),a("OutboundLink")],1),t._v("和"),a("a",{attrs:{href:"https://gfw.go101.org/article/memory-layout.html#size-and-padding",target:"_blank",rel:"noopener noreferrer"}},[t._v("内存布局"),a("OutboundLink")],1),t._v("两篇文章中介绍。")])])}),[],!1,null,null,null);s.default=e.exports}}]);